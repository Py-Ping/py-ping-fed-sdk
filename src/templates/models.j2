{#
 # Ensure an object name does not clash with the model class name. If it does,
 # then the clash can only be with an Enum class (since model classes will
 # necessarily have unique names in the swagger definition) and therefore we
 # append the specified suffix to the clashing enum class within the scope of
 # this module
 #}
{% macro local_name(obj_name) %}
{%   if obj_name == class_name %}{{ obj_name }}{{ details['conflict_suffix'] }}{% else %}{{ obj_name }}{% endif %}
{% endmacro -%}

from pingfedsdk.model import Model
from enum import Enum
{% for folder, imports in details.get('imports').items() %}
{%   for imp in imports %}
{%     if folder == 'models' %}
from pingfedsdk.{{ folder }}.{{ safe_module_name(imp) }} import {{ imp }}
{%     endif %}
{%     if folder == 'enums' %}
{%       set enum_name = imp[0] %}
{%       set suffix = imp[1] %}
from pingfedsdk.{{ folder }} import {{ enum_name }}{{ suffix }}
{%     endif %}
{%   endfor %}
{% endfor %}


{# Build parameter declaration lists for the __init__ method #}
{% set required = details.get('required', []) %}
{% set params = namespace(required=[], optional=[], all=['self']) %}
{% for property, attributes in details.get('properties', {}).items() %}
{%   set pname = safe_name(property) %}
{%   set ptype = local_name(attributes.type) %}
{%   if property in required %}
{%     set _ = params.required.append('%s: %s' | format(pname, ptype)) %}
{%   else %}
{%     set _ = params.optional.append('%s: %s = None' | format(pname, ptype)) %}
{%   endif %}
{% endfor %}
{% set _ = params.all.extend(params.required) %}
{% set _ = params.all.extend(params.optional) -%}


class {{ class_name }}(Model):
    """{{details.get('description', '').replace("\n","").strip()}}

    Attributes
    ----------
{% for property, prop_details in details.get('properties').items() %}
    {{ property }}: {{ prop_details.type }}
{% if prop_details.description %}        {{ prop_details.description }}

{% endif %}
{% endfor %}
    """
    def __init__({{ params.all | join(', ') }}) -> None:
{% if not details["properties"] %}        pass
{% endif %}
{% for property in details.get('properties') %}
        self.{{ safe_name(property) }} = {{ safe_name(property) }}
{% endfor %}

    def _validate(self) -> bool:
        return any(x for x in [{% for property in required %}"{{ property }}"{% if not loop.last %}, {% endif %}{% endfor %}] if self.__dict__[x] is not None)

    def __eq__(self, other) -> bool:
        if isinstance(other, {{ class_name }}):
            return self.__dict__ == other.__dict__
        return NotImplemented

    def __hash__(self) -> int:
        return hash(frozenset([{% for property in details.get('properties') %}self.{{ property }}{% if not loop.last %}, {% endif %}{% endfor %}]))

{% if details["properties"] %}
    @classmethod
    def from_dict(cls, python_dict: dict):
        valid_data = {}
        for k, v in python_dict.items():
            if k in [{% for property in details.get('properties', {}) %}"{{ property }}"{% if not loop.last %}, {% endif %}{% endfor %}] and v is not None:
{% for property, detail in details.get('properties').items() %}                if k == "{{ safe_name(property) }}":
                    {{ detail.get_from_dict_str() }}
{% endfor %}

        return cls(**valid_data)
{% else %}
    @classmethod
    def from_dict(cls, python_dict: dict):
        return cls()
{% endif %}

    def to_dict(self, remove_nonetypes=False):
        """
        Naive dictionary serialiser. Recursively handles most types in this
        module. If you make your own class you need to inherit from model
        and implement to_dict.
        """
        body = {}
        for k, v in self.__dict__.items():
            if k in [{% for property in details.get('properties', {}) %}"{{ property }}"{% if not loop.last %}, {% endif %}{% endfor %}]:
                if isinstance(v, Model):
                    body[k] = v.to_dict(remove_nonetypes)
                elif isinstance(v, list):
                    vals = []
                    for x in v:
                        if isinstance(x, Model):
                            vals.append(x.to_dict(remove_nonetypes))
                        elif not remove_nonetypes or (remove_nonetypes and x is not None):
                            vals.append(x)
                    body[k] = vals
                elif isinstance(v, dict):
                    vals = {}
                    for x, y in v.items():
                        if isinstance(y, Model):
                            vals[x] = y.to_dict(remove_nonetypes)
                        elif not remove_nonetypes or (remove_nonetypes and y is not None):
                            vals[x] = y
                    body[k] = vals
                elif isinstance(v, set):
                    vals = []
                    for x in v:
                        if isinstance(x, Model):
                            vals.append(x.to_dict(remove_nonetypes))
                        elif not remove_nonetypes or (remove_nonetypes and x is not None):
                            vals.append(x)
                    body[k] = vals
                elif isinstance(v, Enum):
                    body[k] = str(v).split('.')[-1]
                elif not remove_nonetypes or (remove_nonetypes and v is not None):
                    body[k] = v
        return body

