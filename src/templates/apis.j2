import os
import logging
import traceback

from json import dumps
from requests import Session
from requests.exceptions import HTTPError
{% for response_code in details.get('codes', []) %}
{% if get_exception_by_code(response_code) and response_code != 403 %}
from pingfedsdk.exceptions import {{ get_exception_by_code(response_code) }}
{% endif %}
{% endfor %}
{% if 'ApiResult' not in details.get('imports') and 422 in details.get('codes', []) %}
from pingfedsdk.models.ApiResult import ApiResult
{% endif %}
{% for imp in details.get('imports') %}
from pingfedsdk.models.{{ imp }} import {{ imp }}
{% endfor %}


class {{ safe_name(class_name) }}:
    def __init__(self, endpoint: str, session: Session) -> None:
        logging.basicConfig(format='%(asctime)s [%(levelname)s] (%(funcName)s) %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p')
        self.logger = logging.getLogger('PingSDK.{{ safe_name(class_name) }}')
        self.logger.setLevel(int(os.environ.get('Logging', logging.DEBUG)))
        self.endpoint = endpoint
        self.session = session

    def _safe_response(self, response_obj):
        return {x.replace("id", "var_id").replace("type", "var_type"): y for x, y in response_obj.json().items()}

    def _build_uri(self, path: str):
        return f"{self.endpoint}{path}"
{% for api in details.get('details') %}
{% for operation in api.get('operations',[]) %}

    def {{ operation.get('nickname') }}(self{% for parameter in operation.get('parameters',[]) %}, {{ safe_variable(safe_name(parameter.get('name'))) }}: {% if json_type_convert(parameter.get('type')) %}{{ json_type_convert(parameter.get('type')) }}{% else %}{{ parameter.get('type') }}{% endif %}{% endfor %}) -> {% if json_type_convert(operation.get('type')) not in ('', 'None') %}{{ json_type_convert(operation.get('type')) }}{% elif json_type_convert(operation.get('type')) == 'None' %}dict{% else %}{{ operation.get('type') }}{% endif %}:
        """ {{ operation.get('summary') }}
        """
{% if operation.get('method') in ['POST', 'PUT'] %}

        payload = {
{% for parameter in operation.get('parameters',[]) %}
            "{{ safe_variable(safe_name(parameter.get('name'))) }}": {{ safe_variable(safe_name(parameter.get('name'))) }}{% if not json_type_convert(parameter.get('type')) %}.to_dict(){% endif %}{% if not loop.last %},{% endif %}

{% endfor %}

        }
{% endif %}
        try:
            response = self.session.{{ operation.get('method').lower() }}(
{% if operation.get('method') in ['POST', 'PUT'] %}                data=dumps(payload),{% endif %}

                url=self._build_uri({% if has_substitution(api.get('path')) %}f{% endif %}"{{ get_request_path(api.get('path')) }}"),
                headers={'Accept': 'application/json'}
            )
        except HTTPError as http_err:
            print(traceback.format_exc())
            self.logger.error(f'HTTP error occurred: {http_err}')
        except Exception as err:
            print(traceback.format_exc())
            self.logger.error(f'Error occurred: {err}')
        else:
{% for response_message in operation.get('responseMessages') %}
            if response.status_code == {{response_message.get('code')}}:
{% if response_message.get('code') == 422 %}
                clean_response = self._safe_response(response)
                raise ValidationError(ApiResult(**clean_response).to_dict())
{% elif response_message.get('code') in (200, 201) %}
                self.logger.info("{{ response_message.get('message') }}")
{% elif get_exception_by_code(response_message.get('code')) %}
                message = "{{response_message.get('message')}}"
                self.logger.info(message)
                raise {{ get_exception_by_code(response_message.get('code')) }}(message)
{% endif %}
{% endfor %}
        finally:
            clean_response = self._safe_response(response)
            return {% if json_type_convert(operation.get('type')) not in ('', 'None') %}{{ json_type_convert(operation.get('type')) }}(**clean_response){% elif json_type_convert(operation.get('type')) == 'None' %}clean_response{% else %}{{ operation.get('type') }}(**clean_response){% endif %}

{% endfor %}{% endfor %}