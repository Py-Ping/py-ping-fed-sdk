{
    "basePath": "/pf-admin-api/v1",
    "definitions": {
        "AccessTokenAttribute": {
            "description": "An attribute for an Access Token's attribute contract.",
            "properties": {
                "multiValued": {
                    "description": "Indicates whether attribute value is always returned as an array.",
                    "position": 20,
                    "type": "boolean"
                },
                "name": {
                    "description": "The name of this attribute.",
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "AccessTokenAttributeContract": {
            "description": "A set of attributes exposed by an Access Token Manager.",
            "properties": {
                "coreAttributes": {
                    "description": "A list of core token attributes that are associated with the access token management plugin type. This field is read-only and is ignored on POST/PUT.",
                    "items": {
                        "$ref": "#/definitions/AccessTokenAttribute"
                    },
                    "position": 5,
                    "type": "array"
                },
                "defaultSubjectAttribute": {
                    "description": "Default subject attribute to use for audit logging when validating the access token. Blank value means to use USER_KEY attribute value after grant lookup.",
                    "position": 30,
                    "type": "string"
                },
                "extendedAttributes": {
                    "description": "A list of additional token attributes that are associated with this access token management plugin instance.",
                    "items": {
                        "$ref": "#/definitions/AccessTokenAttribute"
                    },
                    "position": 10,
                    "type": "array"
                },
                "inherited": {
                    "description": "Whether this attribute contract is inherited from its parent instance. If true, the rest of the properties in this model become read-only. The default value is false.",
                    "position": 20,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "AccessTokenManagementSettings": {
            "description": "General access token management settings.",
            "properties": {
                "defaultAccessTokenManagerRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the default access token manager, if one is defined.",
                    "position": 10
                }
            },
            "type": "object"
        },
        "AccessTokenManager": {
            "allOf": [
                {
                    "$ref": "#/definitions/PluginInstance"
                },
                {
                    "description": "An OAuth access token management plugin instance.",
                    "properties": {
                        "accessControlSettings": {
                            "$ref": "#/definitions/AtmAccessControlSettings",
                            "description": "Settings which determine which clients may access this token manager.",
                            "position": 1020
                        },
                        "attributeContract": {
                            "$ref": "#/definitions/AccessTokenAttributeContract",
                            "description": "The list of attributes that will be added to an access token.",
                            "position": 1000
                        },
                        "selectionSettings": {
                            "$ref": "#/definitions/AtmSelectionSettings",
                            "description": "Settings which determine how this token manager can be selected for use by an OAuth request.",
                            "position": 1010
                        },
                        "sequenceNumber": {
                            "description": "Number added to an access token to identify which Access Token Manager issued the token.",
                            "format": "int32",
                            "position": 1040,
                            "type": "integer"
                        },
                        "sessionValidationSettings": {
                            "$ref": "#/definitions/SessionValidationSettings",
                            "description": "Settings which determine how the user session is associated with the access token.",
                            "position": 1030
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "AccessTokenManagerDescriptor": {
            "allOf": [
                {
                    "$ref": "#/definitions/PluginDescriptor"
                },
                {
                    "description": "An OAuth access token management plugin descriptor.",
                    "properties": {},
                    "type": "object"
                }
            ]
        },
        "AccessTokenManagerDescriptors": {
            "description": "A collection of OAuth access token management plugin descriptors.",
            "properties": {
                "items": {
                    "description": "The list of OAuth access token management plugin descriptors.",
                    "items": {
                        "$ref": "#/definitions/AccessTokenManagerDescriptor"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AccessTokenManagerMapping": {
            "description": "A mapping in a connection that defines how access tokens are created.",
            "properties": {
                "accessTokenManagerRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "The access token manager used in OAuth attribute mapping.",
                    "position": 5
                },
                "attributeContractFulfillment": {
                    "additionalProperties": {
                        "$ref": "#/definitions/AttributeFulfillmentValue"
                    },
                    "description": "A list of mappings from attribute names to their fulfillment values.",
                    "position": 20,
                    "type": "object"
                },
                "attributeSources": {
                    "description": "A list of configured data stores to look up attributes from.",
                    "items": {
                        "$ref": "#/definitions/AttributeSource"
                    },
                    "position": 10,
                    "type": "array"
                },
                "issuanceCriteria": {
                    "$ref": "#/definitions/IssuanceCriteria",
                    "description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
                    "position": 30
                }
            },
            "required": [
                "attributeContractFulfillment"
            ],
            "type": "object"
        },
        "AccessTokenManagers": {
            "description": "A collection of OAuth access token management plugin instances.",
            "properties": {
                "items": {
                    "description": "The list of OAuth access token management plugin instances.",
                    "items": {
                        "$ref": "#/definitions/AccessTokenManager"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AccessTokenMapping": {
            "description": "The Access Token Attribute Mapping.",
            "properties": {
                "accessTokenManagerRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the access token manager this mapping is associated with. This property cannot be changed after the mapping is created.",
                    "position": 8
                },
                "attributeContractFulfillment": {
                    "additionalProperties": {
                        "$ref": "#/definitions/AttributeFulfillmentValue"
                    },
                    "description": "A list of mappings from attribute names to their fulfillment values.",
                    "position": 20,
                    "type": "object"
                },
                "attributeSources": {
                    "description": "A list of configured data stores to look up attributes from.",
                    "items": {
                        "$ref": "#/definitions/AttributeSource"
                    },
                    "position": 10,
                    "type": "array"
                },
                "context": {
                    "$ref": "#/definitions/AccessTokenMappingContext",
                    "description": "The context of the Access Token Mapping. This property cannot be changed after the mapping is created.",
                    "position": 6
                },
                "id": {
                    "description": "The id of the Access Token Mapping.",
                    "position": 5,
                    "type": "string"
                },
                "issuanceCriteria": {
                    "$ref": "#/definitions/IssuanceCriteria",
                    "description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
                    "position": 30
                }
            },
            "required": [
                "accessTokenManagerRef",
                "attributeContractFulfillment",
                "context",
                "id"
            ],
            "type": "object"
        },
        "AccessTokenMappingContext": {
            "description": "The Access Token Attribute Mapping.",
            "properties": {
                "contextRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the associated Access Token Mapping Context instance.",
                    "position": 20
                },
                "type": {
                    "description": "The Access Token Mapping Context type.",
                    "enum": [
                        "DEFAULT",
                        "PCV",
                        "IDP_CONNECTION",
                        "IDP_ADAPTER",
                        "AUTHENTICATION_POLICY_CONTRACT",
                        "CLIENT_CREDENTIALS",
                        "TOKEN_EXCHANGE_PROCESSOR_POLICY"
                    ],
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "contextRef",
                "type"
            ],
            "type": "object"
        },
        "AccessTokenMappings": {
            "description": "A collection of Access Token Attribute Mapping items.",
            "properties": {
                "items": {
                    "description": "The actual list of Access Token Attribute mappings.",
                    "items": {
                        "$ref": "#/definitions/AccessTokenMapping"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AccountManagementSettings": {
            "description": "Account management settings.",
            "properties": {
                "accountStatusAlgorithm": {
                    "description": "The account status algorithm name. \nACCOUNT_STATUS_ALGORITHM_AD -  Algorithm name for Active Directory, which uses a bitmap for each user entry. \nACCOUNT_STATUS_ALGORITHM_FLAG - Algorithm name for Oracle Directory Server and other LDAP directories that use a separate attribute to store the user's status. When this option is selected, the Flag Comparison Value and Flag Comparison Status fields should be used.",
                    "enum": [
                        "ACCOUNT_STATUS_ALGORITHM_AD",
                        "ACCOUNT_STATUS_ALGORITHM_FLAG"
                    ],
                    "position": 20,
                    "type": "string"
                },
                "accountStatusAttributeName": {
                    "description": "The account status attribute name.",
                    "position": 10,
                    "type": "string"
                },
                "defaultStatus": {
                    "description": "The default status of the account.",
                    "position": 50,
                    "type": "boolean"
                },
                "flagComparisonStatus": {
                    "description": "The flag that represents comparison status.",
                    "position": 40,
                    "type": "boolean"
                },
                "flagComparisonValue": {
                    "description": "The flag that represents comparison value.",
                    "position": 30,
                    "type": "string"
                }
            },
            "required": [
                "accountStatusAlgorithm",
                "accountStatusAttributeName"
            ],
            "type": "object"
        },
        "Action": {
            "description": "A read-only plugin action that either represents a file download or an arbitrary invocation performed by the plugin.",
            "properties": {
                "description": {
                    "description": "The description of this action.",
                    "position": 30,
                    "type": "string"
                },
                "download": {
                    "description": "Whether this action will trigger a download or invoke an internal action that will return a string result.",
                    "position": 40,
                    "type": "boolean"
                },
                "id": {
                    "description": "The ID of this action.",
                    "position": 10,
                    "type": "string"
                },
                "invocationRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Whether this action will trigger a download or invoke an internal action that will return a string result.",
                    "position": 50
                },
                "name": {
                    "description": "The name of this action.",
                    "position": 20,
                    "type": "string"
                },
                "parameters": {
                    "description": "List of parameters for this action.",
                    "items": {
                        "$ref": "#/definitions/FieldDescriptor"
                    },
                    "position": 60,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ActionDescriptor": {
            "description": "Describes an arbitrary action that is available for a plugin.",
            "properties": {
                "description": {
                    "description": "The description of this action",
                    "position": 20,
                    "type": "string"
                },
                "download": {
                    "description": "Whether this action will trigger a download or invoke an internal action that will return a string result.",
                    "position": 30,
                    "type": "boolean"
                },
                "downloadContentType": {
                    "description": "If this is a download, this is the Content-Type of the downloaded file. Otherwise, this is null.",
                    "position": 40,
                    "type": "string"
                },
                "downloadFileName": {
                    "description": "If this is a download, this is the suggested file name of the downloaded file. Otherwise, this is null.",
                    "position": 50,
                    "type": "string"
                },
                "name": {
                    "description": "The name of this action",
                    "position": 10,
                    "type": "string"
                },
                "parameters": {
                    "description": "List of parameters for this action.",
                    "items": {
                        "$ref": "#/definitions/FieldDescriptor"
                    },
                    "position": 60,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ActionOptions": {
            "description": "Action options to invoke action.",
            "properties": {
                "parameters": {
                    "description": "List of action parameters.",
                    "items": {
                        "$ref": "#/definitions/ActionParameter"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "required": [
                "parameters"
            ],
            "type": "object"
        },
        "ActionParameter": {
            "description": "An action parameter value.",
            "properties": {
                "name": {
                    "description": "The name of the action parameter.",
                    "position": 10,
                    "type": "string"
                },
                "value": {
                    "description": "The value for the action parameter.",
                    "position": 20,
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "ActionResult": {
            "description": "The result for non-download plugin actions.",
            "properties": {
                "message": {
                    "description": "The message from the completed action.",
                    "position": 10,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Actions": {
            "description": "A read-only list of available actions for this plugin instance.",
            "properties": {
                "items": {
                    "description": "The list of available actions.",
                    "items": {
                        "$ref": "#/definitions/Action"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AdditionalAllowedEntitiesConfiguration": {
            "description": "Additional allowed entities or issuers configuration. Currently only used in OIDC IdP (RP) connection.",
            "properties": {
                "additionalAllowedEntities": {
                    "description": "An array of additional allowed entities or issuers to be accepted during entity or issuer validation.",
                    "items": {
                        "$ref": "#/definitions/Entity"
                    },
                    "position": 300,
                    "type": "array"
                },
                "allowAdditionalEntities": {
                    "description": "Set to true to configure additional entities or issuers to be accepted during entity or issuer validation.",
                    "position": 100,
                    "type": "boolean"
                },
                "allowAllEntities": {
                    "description": "Set to true to accept any entity or issuer during entity or issuer validation. (Not Recommended)",
                    "position": 200,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "AdditionalKeySet": {
            "description": "The attributes used to configure an OAuth/OpenID Connect additional signing key set with virtual issuers.",
            "properties": {
                "description": {
                    "description": "A description of the key set.",
                    "position": 15,
                    "type": "string"
                },
                "id": {
                    "description": "The unique ID for the key set. It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned if not specified.",
                    "position": 5,
                    "type": "string"
                },
                "issuers": {
                    "description": "A list of virtual issuers that will use the current key set. Once assigned to a key set, the same virtual issuer cannot be assigned to another key set instance.",
                    "items": {
                        "$ref": "#/definitions/ResourceLink"
                    },
                    "position": 25,
                    "type": "array"
                },
                "name": {
                    "description": "The key set name.",
                    "position": 10,
                    "type": "string"
                },
                "signingKeys": {
                    "$ref": "#/definitions/SigningKeys",
                    "description": "A set of references to the keys.",
                    "position": 20
                }
            },
            "required": [
                "issuers",
                "name",
                "signingKeys"
            ],
            "type": "object"
        },
        "AdditionalKeySets": {
            "description": "A collection of OAuth/OpenID Connect additional signing key sets.",
            "properties": {
                "items": {
                    "description": "The actual list of signing key sets.",
                    "items": {
                        "$ref": "#/definitions/AdditionalKeySet"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AdministrativeAccount": {
            "description": "A PingFederate administrator account.",
            "properties": {
                "active": {
                    "description": "Indicates whether the account is active or not.",
                    "position": 30,
                    "type": "boolean"
                },
                "auditor": {
                    "description": "Indicates whether the account belongs to an Auditor. An Auditor has View-only permissions for all administrative functions. An Auditor cannot have any administrative roles.",
                    "position": 50,
                    "type": "boolean"
                },
                "department": {
                    "description": "The Department name of account user.",
                    "position": 80,
                    "type": "string"
                },
                "description": {
                    "description": "Description of the account.",
                    "position": 40,
                    "type": "string"
                },
                "emailAddress": {
                    "description": "Email address associated with the account.",
                    "position": 70,
                    "type": "string"
                },
                "encryptedPassword": {
                    "description": "For GET requests, this field contains the encrypted account password. For POST and PUT requests, if you wish to re-use the password from an API response to this endpoint, this field should be passed back unchanged.",
                    "position": 25,
                    "type": "string"
                },
                "password": {
                    "description": "Password for the Account. This field is only applicable during a POST operation.",
                    "position": 20,
                    "type": "string"
                },
                "phoneNumber": {
                    "description": "Phone number associated with the account.",
                    "position": 60,
                    "type": "string"
                },
                "roles": {
                    "description": "Roles available for an administrator. <br>USER_ADMINISTRATOR - Can create, deactivate or delete accounts and reset passwords. Additionally, install replacement license keys. <br> CRYPTO_ADMINISTRATOR - Can manage local keys and certificates. <br> ADMINISTRATOR - Can configure partner connections and most system settings (except the management of native accounts and the handling of local keys and certificates. <br>EXPRESSION_ADMINISTRATOR - Can add and update OGNL expressions. <br>",
                    "items": {
                        "enum": [
                            "USER_ADMINISTRATOR",
                            "CRYPTO_ADMINISTRATOR",
                            "ADMINISTRATOR",
                            "EXPRESSION_ADMINISTRATOR"
                        ],
                        "type": "string"
                    },
                    "position": 90,
                    "type": "array",
                    "uniqueItems": true
                },
                "username": {
                    "description": "Username for the Administrative Account.",
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "username"
            ],
            "type": "object"
        },
        "AdministrativeAccounts": {
            "description": "PingFederate administrator accounts.",
            "properties": {
                "items": {
                    "description": "List of Administrative Accounts.",
                    "items": {
                        "$ref": "#/definitions/AdministrativeAccount"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AlternativeLoginHintTokenIssuer": {
            "description": "JSON Web Key Set Settings.",
            "properties": {
                "issuer": {
                    "description": "The issuer. Issuer is unique.",
                    "position": 10,
                    "type": "string"
                },
                "jwks": {
                    "description": "The JWKS.",
                    "position": 30,
                    "type": "string"
                },
                "jwksURL": {
                    "description": "The JWKS URL.",
                    "position": 20,
                    "type": "string"
                }
            },
            "required": [
                "issuer"
            ],
            "type": "object"
        },
        "ApcMappingPolicyAction": {
            "allOf": [
                {
                    "$ref": "#/definitions/PolicyAction"
                },
                {
                    "description": "An authentication policy contract selection action.",
                    "properties": {
                        "attributeMapping": {
                            "$ref": "#/definitions/AttributeMapping",
                            "description": "Contract fulfillment with the authentication policy contract's default values, and additional attributes retrieved from local data stores.",
                            "position": 40
                        },
                        "authenticationPolicyContractRef": {
                            "$ref": "#/definitions/ResourceLink",
                            "description": "Reference to the associated authentication policy contract.",
                            "position": 30
                        }
                    },
                    "required": [
                        "attributeMapping",
                        "authenticationPolicyContractRef"
                    ],
                    "type": "object"
                }
            ]
        },
        "ApcToPersistentGrantMapping": {
            "description": "An authentication policy contract mapping into an OAuth persistent grant.",
            "properties": {
                "attributeContractFulfillment": {
                    "additionalProperties": {
                        "$ref": "#/definitions/AttributeFulfillmentValue"
                    },
                    "description": "A list of mappings from attribute names to their fulfillment values.",
                    "position": 20,
                    "type": "object"
                },
                "attributeSources": {
                    "description": "A list of configured data stores to look up attributes from.",
                    "items": {
                        "$ref": "#/definitions/AttributeSource"
                    },
                    "position": 10,
                    "type": "array"
                },
                "authenticationPolicyContractRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the associated authentication policy contract. The reference cannot be changed after the mapping has been created.",
                    "position": 2
                },
                "id": {
                    "description": "The ID of the authentication policy contract to persistent grant mapping.",
                    "position": 1,
                    "type": "string"
                },
                "issuanceCriteria": {
                    "$ref": "#/definitions/IssuanceCriteria",
                    "description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
                    "position": 30
                }
            },
            "required": [
                "attributeContractFulfillment",
                "authenticationPolicyContractRef",
                "id"
            ],
            "type": "object"
        },
        "ApcToPersistentGrantMappings": {
            "description": "A collection of OAuth authentication policy contract to persistent grant mapping items.",
            "properties": {
                "items": {
                    "description": "The actual list of OAuth authentication policy contract to persistent grant mappings.",
                    "items": {
                        "$ref": "#/definitions/ApcToPersistentGrantMapping"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ApcToSpAdapterMapping": {
            "description": "The Authentication Policy Contract (APC) to SP Adapter Mapping.",
            "properties": {
                "attributeContractFulfillment": {
                    "additionalProperties": {
                        "$ref": "#/definitions/AttributeFulfillmentValue"
                    },
                    "description": "A list of mappings from attribute names to their fulfillment values.",
                    "position": 20,
                    "type": "object"
                },
                "attributeSources": {
                    "description": "A list of configured data stores to look up attributes from.",
                    "items": {
                        "$ref": "#/definitions/AttributeSource"
                    },
                    "position": 10,
                    "type": "array"
                },
                "defaultTargetResource": {
                    "description": "Default target URL for this APC-to-adapter mapping configuration.",
                    "position": 70,
                    "type": "string"
                },
                "id": {
                    "description": "The id of the APC-to-SP Adapter mapping. This field is read-only and is ignored when passed in with the payload.",
                    "position": 60,
                    "type": "string"
                },
                "issuanceCriteria": {
                    "$ref": "#/definitions/IssuanceCriteria",
                    "description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
                    "position": 30
                },
                "licenseConnectionGroupAssignment": {
                    "description": "The license connection group.",
                    "position": 80,
                    "type": "string"
                },
                "sourceId": {
                    "description": "The id of the Authentication Policy Contract.",
                    "position": 40,
                    "type": "string"
                },
                "targetId": {
                    "description": "The id of the SP Adapter.",
                    "position": 50,
                    "type": "string"
                }
            },
            "required": [
                "attributeContractFulfillment",
                "sourceId",
                "targetId"
            ],
            "type": "object"
        },
        "ApcToSpAdapterMappings": {
            "description": "A collection of Authentication Policy Contract (APC) to SP Adapter Mappings.",
            "properties": {
                "items": {
                    "description": "The actual list of mappings.",
                    "items": {
                        "$ref": "#/definitions/ApcToSpAdapterMapping"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ApiResponse": {
            "type": "object"
        },
        "ApiResult": {
            "description": "Details on the result of the operation.",
            "properties": {
                "developerMessage": {
                    "description": "Developer-oriented error message, if available.",
                    "position": 30,
                    "type": "string"
                },
                "message": {
                    "description": "Success or error message.",
                    "position": 20,
                    "type": "string"
                },
                "resultId": {
                    "description": "Result identifier.",
                    "position": 10,
                    "type": "string"
                },
                "validationErrors": {
                    "description": "List of validation errors, if any.",
                    "items": {
                        "$ref": "#/definitions/ValidationError"
                    },
                    "position": 40,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ApplicationSessionPolicy": {
            "description": "Session controls for user facing PingFederate application endpoints, such as the profile management endpoint.",
            "properties": {
                "idleTimeoutMins": {
                    "description": "The idle timeout period, in minutes. If set to -1, the idle timeout will be set to the maximum timeout. The default is 60.",
                    "format": "int32",
                    "position": 20,
                    "type": "integer"
                },
                "maxTimeoutMins": {
                    "description": "The maximum timeout period, in minutes. If set to -1, sessions do not expire. The default is 480.",
                    "format": "int32",
                    "position": 30,
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "ArtifactResolverLocation": {
            "description": "The remote party URLs to resolve the artifact.",
            "properties": {
                "index": {
                    "description": "The priority of the endpoint.",
                    "format": "int32",
                    "position": 10,
                    "type": "integer"
                },
                "url": {
                    "description": "Remote party URLs that you will use to resolve/translate the artifact and get the actual protocol message",
                    "position": 20,
                    "type": "string"
                }
            },
            "required": [
                "index",
                "url"
            ],
            "type": "object"
        },
        "ArtifactSettings": {
            "description": "The settings for an Artifact binding.",
            "properties": {
                "lifetime": {
                    "description": "The lifetime of the artifact in seconds.",
                    "format": "int32",
                    "position": 10,
                    "type": "integer"
                },
                "resolverLocations": {
                    "description": "Remote party URLs that you will use to resolve/translate the artifact and get the actual protocol message",
                    "items": {
                        "$ref": "#/definitions/ArtifactResolverLocation"
                    },
                    "position": 20,
                    "type": "array"
                },
                "sourceId": {
                    "description": "Source ID for SAML1.x connections",
                    "position": 30,
                    "type": "string"
                }
            },
            "required": [
                "lifetime",
                "resolverLocations"
            ],
            "type": "object"
        },
        "AssertionLifetime": {
            "description": "The timeframe of validity before and after the issuance of the assertion.",
            "properties": {
                "minutesAfter": {
                    "description": "Assertion validity in minutes after the assertion issuance.",
                    "format": "int32",
                    "position": 20,
                    "type": "integer"
                },
                "minutesBefore": {
                    "description": "Assertion validity in minutes before the assertion issuance.",
                    "format": "int32",
                    "position": 10,
                    "type": "integer"
                }
            },
            "required": [
                "minutesAfter",
                "minutesBefore"
            ],
            "type": "object"
        },
        "AtmAccessControlSettings": {
            "description": "Access control settings for an access token management plugin instance.",
            "properties": {
                "allowedClients": {
                    "description": "If 'restrictClients' is true, this field defines the list of OAuth clients that are allowed to access the token manager.",
                    "items": {
                        "$ref": "#/definitions/ResourceLink"
                    },
                    "position": 30,
                    "type": "array"
                },
                "inherited": {
                    "description": "If this token manager has a parent, this flag determines whether access control settings are inherited from the parent. When set to true, the other fields in this model become read-only. The default value is false.",
                    "position": 10,
                    "type": "boolean"
                },
                "restrictClients": {
                    "description": "Determines whether access to this token manager is restricted to specific OAuth clients. If false, the 'allowedClients' field is ignored. The default value is false.",
                    "position": 20,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "AtmSelectionSettings": {
            "description": "Selection settings for an access token management plugin instance.",
            "properties": {
                "inherited": {
                    "description": "If this token manager has a parent, this flag determines whether selection settings, such as resource URI's, are inherited from the parent. When set to true, the other fields in this model become read-only. The default value is false.",
                    "position": 10,
                    "type": "boolean"
                },
                "resourceUris": {
                    "description": "The list of base resource URI's which map to this token manager. A resource URI, specified via the 'aud' parameter, can be used to select a specific token manager for an OAuth request.",
                    "items": {
                        "type": "string"
                    },
                    "position": 20,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "Attribute": {
            "description": "The definition of an attribute in an attribute contract.",
            "properties": {
                "name": {
                    "description": "The name of this attribute.",
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "AttributeFulfillmentValue": {
            "description": "Defines how an attribute in an attribute contract should be populated.",
            "properties": {
                "source": {
                    "$ref": "#/definitions/SourceTypeIdKey",
                    "description": "The attribute value source.",
                    "position": 20
                },
                "value": {
                    "description": "The value for this attribute.",
                    "position": 30,
                    "type": "string"
                }
            },
            "required": [
                "source",
                "value"
            ],
            "type": "object"
        },
        "AttributeMapping": {
            "description": "A list of mappings from attribute sources to attribute targets.",
            "properties": {
                "attributeContractFulfillment": {
                    "additionalProperties": {
                        "$ref": "#/definitions/AttributeFulfillmentValue"
                    },
                    "description": "A list of mappings from attribute names to their fulfillment values.",
                    "position": 20,
                    "type": "object"
                },
                "attributeSources": {
                    "description": "A list of configured data stores to look up attributes from.",
                    "items": {
                        "$ref": "#/definitions/AttributeSource"
                    },
                    "position": 10,
                    "type": "array"
                },
                "issuanceCriteria": {
                    "$ref": "#/definitions/IssuanceCriteria",
                    "description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
                    "position": 30
                }
            },
            "required": [
                "attributeContractFulfillment"
            ],
            "type": "object"
        },
        "AttributeQueryNameMapping": {
            "description": "The attribute query name mappings between the SP and the IdP.",
            "properties": {
                "localName": {
                    "description": "The local attribute name.",
                    "position": 10,
                    "type": "string"
                },
                "remoteName": {
                    "description": "The remote attribute name as defined by the attribute authority.",
                    "position": 20,
                    "type": "string"
                }
            },
            "required": [
                "localName",
                "remoteName"
            ],
            "type": "object"
        },
        "AttributeRule": {
            "description": "Authentication policy rules using attributes from the previous authentication source. Each rule is evaluated to determine the next action in the policy.",
            "properties": {
                "attributeName": {
                    "description": "The name of the attribute to use in this attribute rule.",
                    "position": 10,
                    "type": "string"
                },
                "condition": {
                    "description": "The condition that will be applied to the attribute's expected value.",
                    "enum": [
                        "EQUALS",
                        "EQUALS_CASE_INSENSITIVE",
                        "EQUALS_DN",
                        "NOT_EQUAL",
                        "NOT_EQUAL_CASE_INSENSITIVE",
                        "NOT_EQUAL_DN",
                        "MULTIVALUE_CONTAINS",
                        "MULTIVALUE_CONTAINS_CASE_INSENSITIVE",
                        "MULTIVALUE_CONTAINS_DN",
                        "MULTIVALUE_DOES_NOT_CONTAIN",
                        "MULTIVALUE_DOES_NOT_CONTAIN_CASE_INSENSITIVE",
                        "MULTIVALUE_DOES_NOT_CONTAIN_DN"
                    ],
                    "position": 20,
                    "type": "string"
                },
                "expectedValue": {
                    "description": "The expected value of this attribute rule.",
                    "position": 30,
                    "type": "string"
                },
                "result": {
                    "description": "The result of this attribute rule.",
                    "position": 40,
                    "type": "string"
                }
            },
            "required": [
                "attributeName",
                "condition",
                "expectedValue",
                "result"
            ],
            "type": "object"
        },
        "AttributeRules": {
            "description": "A collection of attribute rules",
            "properties": {
                "fallbackToSuccess": {
                    "description": "When all the rules fail, you may choose to default to the general success action or fail. Default to success.",
                    "position": 10,
                    "type": "boolean"
                },
                "items": {
                    "description": "The actual list of attribute rules.",
                    "items": {
                        "$ref": "#/definitions/AttributeRule"
                    },
                    "position": 20,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AttributeSource": {
            "description": "The configured settings to look up attributes from an associated data store.",
            "discriminator": "type",
            "properties": {
                "attributeContractFulfillment": {
                    "additionalProperties": {
                        "$ref": "#/definitions/AttributeFulfillmentValue"
                    },
                    "description": "A list of mappings from attribute names to their fulfillment values. This field is only valid for the SP Connection's Browser SSO mappings",
                    "position": 50,
                    "type": "object"
                },
                "dataStoreRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the associated data store.",
                    "position": 20
                },
                "description": {
                    "description": "The description of this attribute source. The description needs to be unique amongst the attribute sources for the mapping.<br>Note: Required for APC-to-SP Adapter Mappings",
                    "position": 40,
                    "type": "string"
                },
                "id": {
                    "description": "The ID that defines this attribute source. Only alphanumeric characters allowed.<br>Note: Required for OpenID Connect policy attribute sources, OAuth IdP adapter mappings, OAuth access token mappings and APC-to-SP Adapter Mappings. IdP Connections will ignore this property since it only allows one attribute source to be defined per mapping. IdP-to-SP Adapter Mappings can contain multiple attribute sources.",
                    "position": 30,
                    "type": "string"
                },
                "type": {
                    "description": "The data store type of this attribute source.",
                    "enum": [
                        "LDAP",
                        "PING_ONE_LDAP_GATEWAY",
                        "JDBC",
                        "CUSTOM"
                    ],
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "dataStoreRef",
                "type"
            ],
            "type": "object"
        },
        "AuthenticationPoliciesSettings": {
            "description": "The settings for the authentication policies.",
            "properties": {
                "enableIdpAuthnSelection": {
                    "description": "Enable IdP authentication policies.",
                    "position": 10,
                    "type": "boolean"
                },
                "enableSpAuthnSelection": {
                    "description": "Enable SP authentication policies.",
                    "position": 20,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "AuthenticationPolicy": {
            "description": "An authentication policy.",
            "properties": {
                "authnSelectionTrees": {
                    "description": "The list of authentication policy trees.",
                    "items": {
                        "$ref": "#/definitions/AuthenticationPolicyTree"
                    },
                    "position": 40,
                    "type": "array"
                },
                "defaultAuthenticationSources": {
                    "description": "The default authentication sources.",
                    "items": {
                        "$ref": "#/definitions/AuthenticationSource"
                    },
                    "position": 50,
                    "type": "array"
                },
                "failIfNoSelection": {
                    "description": "Fail if policy finds no authentication source.",
                    "position": 30,
                    "type": "boolean"
                },
                "trackedHttpParameters": {
                    "description": "The HTTP request parameters to track and make available to authentication sources, selectors, and contract mappings throughout the authentication policy.",
                    "items": {
                        "type": "string"
                    },
                    "position": 70,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AuthenticationPolicyContract": {
            "description": "Authentication Policy Contracts carry user attributes from the identity provider to the service provider.",
            "properties": {
                "coreAttributes": {
                    "description": "A list of read-only assertion attributes (for example, subject) that are automatically populated by PingFederate.",
                    "items": {
                        "$ref": "#/definitions/AuthenticationPolicyContractAttribute"
                    },
                    "position": 30,
                    "type": "array"
                },
                "extendedAttributes": {
                    "description": "A list of additional attributes as needed.",
                    "items": {
                        "$ref": "#/definitions/AuthenticationPolicyContractAttribute"
                    },
                    "position": 40,
                    "type": "array"
                },
                "id": {
                    "description": "The persistent, unique ID for the authentication policy contract. It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned if not specified.",
                    "position": 10,
                    "type": "string"
                },
                "name": {
                    "description": "The Authentication Policy Contract Name. Name is unique.",
                    "position": 20,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AuthenticationPolicyContractAssertionMapping": {
            "description": "The Authentication Policy Contract Assertion Mapping.",
            "properties": {
                "abortSsoTransactionAsFailSafe": {
                    "description": "If set to true, SSO transaction will be aborted as a fail-safe when the data-store's attribute mappings fail to complete the attribute contract. Otherwise, the attribute contract with default values is used. By default, this value is false.",
                    "position": 8,
                    "type": "boolean"
                },
                "attributeContractFulfillment": {
                    "additionalProperties": {
                        "$ref": "#/definitions/AttributeFulfillmentValue"
                    },
                    "description": "A list of mappings from attribute names to their fulfillment values.",
                    "position": 20,
                    "type": "object"
                },
                "attributeSources": {
                    "description": "A list of configured data stores to look up attributes from.",
                    "items": {
                        "$ref": "#/definitions/AttributeSource"
                    },
                    "position": 10,
                    "type": "array"
                },
                "authenticationPolicyContractRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the associated Authentication Policy Contract.",
                    "position": 5
                },
                "issuanceCriteria": {
                    "$ref": "#/definitions/IssuanceCriteria",
                    "description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
                    "position": 30
                },
                "restrictVirtualEntityIds": {
                    "description": "Restricts this mapping to specific virtual entity IDs.",
                    "position": 6,
                    "type": "boolean"
                },
                "restrictedVirtualEntityIds": {
                    "description": "The list of virtual server IDs that this mapping is restricted to.",
                    "items": {
                        "type": "string"
                    },
                    "position": 7,
                    "type": "array"
                }
            },
            "required": [
                "attributeContractFulfillment",
                "authenticationPolicyContractRef"
            ],
            "type": "object"
        },
        "AuthenticationPolicyContractAttribute": {
            "description": "An attribute for the Authentication Policy Contract.",
            "properties": {
                "name": {
                    "description": "The name of this attribute.",
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "AuthenticationPolicyContractMapping": {
            "description": "An Authentication Policy Contract mapping into IdP Connection.",
            "properties": {
                "attributeContractFulfillment": {
                    "additionalProperties": {
                        "$ref": "#/definitions/AttributeFulfillmentValue"
                    },
                    "description": "A list of mappings from attribute names to their fulfillment values.",
                    "position": 20,
                    "type": "object"
                },
                "attributeSources": {
                    "description": "A list of configured data stores to look up attributes from.",
                    "items": {
                        "$ref": "#/definitions/AttributeSource"
                    },
                    "position": 10,
                    "type": "array"
                },
                "authenticationPolicyContractRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the associated Authentication Policy Contract.",
                    "position": 5
                },
                "issuanceCriteria": {
                    "$ref": "#/definitions/IssuanceCriteria",
                    "description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
                    "position": 30
                },
                "restrictVirtualServerIds": {
                    "description": "Restricts this mapping to specific virtual entity IDs.",
                    "position": 6,
                    "type": "boolean"
                },
                "restrictedVirtualServerIds": {
                    "description": "The list of virtual server IDs that this mapping is restricted to.",
                    "items": {
                        "type": "string"
                    },
                    "position": 7,
                    "type": "array"
                }
            },
            "required": [
                "attributeContractFulfillment",
                "authenticationPolicyContractRef"
            ],
            "type": "object"
        },
        "AuthenticationPolicyContracts": {
            "description": "A collection of Authentication Policy Contracts",
            "properties": {
                "items": {
                    "description": "The actual list of Authentication Policy Contracts.",
                    "items": {
                        "$ref": "#/definitions/AuthenticationPolicyContract"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AuthenticationPolicyFragment": {
            "description": "An authentication policy fragment.",
            "properties": {
                "description": {
                    "description": "A description for the authentication policy fragment.",
                    "position": 30,
                    "type": "string"
                },
                "id": {
                    "description": "The authentication policy fragment ID. ID is unique.",
                    "position": 10,
                    "type": "string"
                },
                "inputs": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "The reference to the authentication policy contract to use as the attribute inputs for this authentication policy fragment.",
                    "position": 50
                },
                "name": {
                    "description": "The authentication policy fragment name. Name is unique.",
                    "position": 20,
                    "type": "string"
                },
                "outputs": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "The reference to the authentication policy contract to use as the attribute outputs for this authentication policy fragment.",
                    "position": 60
                },
                "rootNode": {
                    "$ref": "#/definitions/AuthenticationPolicyTreeNode",
                    "description": "The beginning action for the authentication fragment policy.",
                    "position": 40
                }
            },
            "type": "object"
        },
        "AuthenticationPolicyFragments": {
            "description": "A collection of Authentication Policy Fragments",
            "properties": {
                "items": {
                    "description": "The actual list of Authentication Policy Fragments.",
                    "items": {
                        "$ref": "#/definitions/AuthenticationPolicyFragment"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AuthenticationPolicyTree": {
            "description": "An authentication policy tree.",
            "properties": {
                "authenticationApiApplicationRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Authentication API Application Id to be used in this policy branch. If the value is not specified, no Authentication API Application will be used.",
                    "position": 31
                },
                "description": {
                    "description": "A description for the authentication policy.",
                    "position": 30,
                    "type": "string"
                },
                "enabled": {
                    "description": "Whether or not this authentication policy tree is enabled. Default is true.",
                    "position": 40,
                    "type": "boolean"
                },
                "handleFailuresLocally": {
                    "description": "If a policy ends in failure keep the user local.",
                    "position": 60,
                    "type": "boolean"
                },
                "id": {
                    "description": "The authentication policy ID. ID is unique.",
                    "position": 10,
                    "type": "string"
                },
                "name": {
                    "description": "The authentication policy name. Name is unique.",
                    "position": 20,
                    "type": "string"
                },
                "rootNode": {
                    "$ref": "#/definitions/AuthenticationPolicyTreeNode",
                    "description": "A node inside the authentication policy tree.",
                    "position": 50
                }
            },
            "type": "object"
        },
        "AuthenticationPolicyTreeNode": {
            "description": "An authentication policy tree node.",
            "properties": {
                "action": {
                    "$ref": "#/definitions/PolicyAction",
                    "description": "The result action.",
                    "position": 10
                },
                "children": {
                    "description": "The nodes inside the authentication policy tree node of type AuthenticationPolicyTreeNode.",
                    "items": {
                        "$ref": "#/definitions/AuthenticationPolicyTreeNode"
                    },
                    "position": 20,
                    "type": "array"
                }
            },
            "required": [
                "action"
            ],
            "type": "object"
        },
        "AuthenticationSelector": {
            "allOf": [
                {
                    "$ref": "#/definitions/PluginInstance"
                },
                {
                    "description": "An Authentication Selector instance.",
                    "properties": {
                        "attributeContract": {
                            "$ref": "#/definitions/AuthenticationSelectorAttributeContract",
                            "description": "The list of attributes that the Authentication Selector provides.",
                            "position": 1000
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "AuthenticationSelectorAttribute": {
            "description": "An attribute for the Authentication Selector attribute contract.",
            "properties": {
                "name": {
                    "description": "The name of this attribute.",
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "AuthenticationSelectorAttributeContract": {
            "description": "A set of attributes exposed by an Authentication Selector.",
            "properties": {
                "extendedAttributes": {
                    "description": "A list of additional attributes that can be returned by the Authentication Selector. The extended attributes are only used if the Authentication Selector supports them.",
                    "items": {
                        "$ref": "#/definitions/AuthenticationSelectorAttribute"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AuthenticationSelectorDescriptor": {
            "allOf": [
                {
                    "$ref": "#/definitions/PluginDescriptor"
                },
                {
                    "description": "An Authentication Selector descriptor.",
                    "properties": {},
                    "type": "object"
                }
            ]
        },
        "AuthenticationSelectorDescriptors": {
            "description": "A collection of Authentication Selector descriptors.",
            "properties": {
                "items": {
                    "description": "The list of Authentication Selector descriptors.",
                    "items": {
                        "$ref": "#/definitions/AuthenticationSelectorDescriptor"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AuthenticationSelectors": {
            "description": "A collection of Authentication Selector instances.",
            "properties": {
                "items": {
                    "description": "The actual list of Authentication Selectors.",
                    "items": {
                        "$ref": "#/definitions/AuthenticationSelector"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AuthenticationSessionPolicies": {
            "description": "A collection of authentication session policies.",
            "properties": {
                "items": {
                    "description": "The actual list of policies.",
                    "items": {
                        "$ref": "#/definitions/AuthenticationSessionPolicy"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AuthenticationSessionPolicy": {
            "description": "The session policy for a specified authentication source.",
            "properties": {
                "authenticationSource": {
                    "$ref": "#/definitions/AuthenticationSource",
                    "description": "The authentication source this session policy applies to. This property cannot be changed after the policy is created.",
                    "position": 20
                },
                "authnContextSensitive": {
                    "description": "Determines whether the requested authentication context is considered when deciding whether an existing session is valid for a given request. The default is false.",
                    "position": 60,
                    "type": "boolean"
                },
                "enableSessions": {
                    "description": "Determines whether sessions are enabled for the authentication source. This value overrides the enableSessions value from the global authentication session policy.",
                    "position": 30,
                    "type": "boolean"
                },
                "id": {
                    "description": "The persistent, unique ID for the session policy. It can be any combination of [a-z0-9._-]. This property is system-assigned if not specified.",
                    "position": 10,
                    "type": "string"
                },
                "idleTimeoutMins": {
                    "description": "The idle timeout period, in minutes. If omitted, the value from the global authentication session policy will be used. If set to -1, the idle timeout will be set to the maximum timeout. If a value is provided for this property, a value must also be provided for maxTimeoutMins.",
                    "format": "int32",
                    "position": 40,
                    "type": "integer"
                },
                "maxTimeoutMins": {
                    "description": "The maximum timeout period, in minutes. If omitted, the value from the global authentication session policy will be used. If set to -1, sessions do not expire. If a value is provided for this property, a value must also be provided for idleTimeoutMins.",
                    "format": "int32",
                    "position": 50,
                    "type": "integer"
                },
                "persistent": {
                    "description": "Determines whether sessions for the authentication source are persistent. This value overrides the persistentSessions value from the global authentication session policy. This field is ignored if enableSessions is false.",
                    "position": 35,
                    "type": "boolean"
                },
                "timeoutDisplayUnit": {
                    "description": "The display unit for session timeout periods in the PingFederate administrative console. When the display unit is HOURS or DAYS, the timeout values in minutes must correspond to a whole number value for the specified unit.",
                    "enum": [
                        "MINUTES",
                        "HOURS",
                        "DAYS"
                    ],
                    "position": 55,
                    "type": "string"
                }
            },
            "required": [
                "authenticationSource",
                "enableSessions"
            ],
            "type": "object"
        },
        "AuthenticationSource": {
            "description": "An authentication source (IdP adapter or IdP connection).",
            "properties": {
                "sourceRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "A reference to the authentication source.",
                    "position": 20
                },
                "type": {
                    "description": "The type of this authentication source.",
                    "enum": [
                        "IDP_ADAPTER",
                        "IDP_CONNECTION"
                    ],
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "sourceRef",
                "type"
            ],
            "type": "object"
        },
        "AuthnApiApplication": {
            "description": "Authentication API Application.",
            "properties": {
                "additionalAllowedOrigins": {
                    "description": "The domain in the redirect URL is always whitelisted. This field contains a list of additional allowed origin URL's for cross-origin resource sharing.",
                    "items": {
                        "type": "string"
                    },
                    "position": 50,
                    "type": "array"
                },
                "clientForRedirectlessModeRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "The client this application must use if it invokes the authentication API in redirectless mode. No client may be specified if restrictAccessToRedirectlessMode is false under /authenticationApi/settings.",
                    "position": 60
                },
                "description": {
                    "description": "The Authentication API Application description.",
                    "position": 40,
                    "type": "string"
                },
                "id": {
                    "description": "The persistent, unique ID for the Authentication API application. It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned if not specified.",
                    "position": 10,
                    "type": "string"
                },
                "name": {
                    "description": "The Authentication API Application Name. Name must be unique.",
                    "position": 20,
                    "type": "string"
                },
                "url": {
                    "description": "The Authentication API Application redirect URL.",
                    "position": 30,
                    "type": "string"
                }
            },
            "required": [
                "id",
                "name",
                "url"
            ],
            "type": "object"
        },
        "AuthnApiApplications": {
            "description": "A collection of Authentication API Application items.",
            "properties": {
                "items": {
                    "description": "The actual list of Authentication API Applications.",
                    "items": {
                        "$ref": "#/definitions/AuthnApiApplication"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AuthnApiSettings": {
            "description": "Authentication API Application Settings.",
            "properties": {
                "apiEnabled": {
                    "description": "Specifies whether the authentication API is enabled. The default value is false.",
                    "position": 10,
                    "type": "boolean"
                },
                "defaultApplicationRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Application for non authentication policy use cases.",
                    "position": 20
                },
                "enableApiDescriptions": {
                    "description": "Enable the API Descriptions endpoint.",
                    "position": 30,
                    "type": "boolean"
                },
                "includeRequestContext": {
                    "description": "Determines whether the request context parameters are included in response for authentication API. The default value is false.",
                    "position": 50,
                    "type": "boolean"
                },
                "restrictAccessToRedirectlessMode": {
                    "description": "Determines whether access to the authentication API redirectless mode is restricted to specified applications.",
                    "position": 40,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "AuthnContextMapping": {
            "description": "The authentication context mapping between local and remote values.",
            "properties": {
                "local": {
                    "description": "The local authentication context value.",
                    "position": 5,
                    "type": "string"
                },
                "remote": {
                    "description": "The remote authentication context value.",
                    "position": 10,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AuthnSelectorPolicyAction": {
            "allOf": [
                {
                    "$ref": "#/definitions/PolicyAction"
                },
                {
                    "description": "An authentication selector selection action.",
                    "properties": {
                        "authenticationSelectorRef": {
                            "$ref": "#/definitions/ResourceLink",
                            "description": "Reference to the associated authentication selector.",
                            "position": 30
                        }
                    },
                    "required": [
                        "authenticationSelectorRef"
                    ],
                    "type": "object"
                }
            ]
        },
        "AuthnSourcePolicyAction": {
            "allOf": [
                {
                    "$ref": "#/definitions/PolicyAction"
                },
                {
                    "description": "An authentication source selection action.",
                    "properties": {
                        "attributeRules": {
                            "$ref": "#/definitions/AttributeRules",
                            "description": "The authentication policy rules."
                        },
                        "authenticationSource": {
                            "$ref": "#/definitions/AuthenticationSource",
                            "description": "The associated authentication source.",
                            "position": 30
                        },
                        "inputUserIdMapping": {
                            "$ref": "#/definitions/AttributeFulfillmentValue",
                            "description": "The input user ID mapping.",
                            "position": 40
                        },
                        "userIdAuthenticated": {
                            "description": "Indicates whether the user ID obtained by the user ID mapping is authenticated.",
                            "position": 50,
                            "type": "boolean"
                        }
                    },
                    "required": [
                        "authenticationSource"
                    ],
                    "type": "object"
                }
            ]
        },
        "AuthorizationServerSettings": {
            "description": "Authorization Server Settings attributes.",
            "properties": {
                "activationCodeCheckMode": {
                    "description": "Determines whether the user is prompted to enter or confirm the activation code after authenticating or before. The default is AFTER_AUTHENTICATION.",
                    "enum": [
                        "AFTER_AUTHENTICATION",
                        "BEFORE_AUTHENTICATION"
                    ],
                    "position": 315,
                    "type": "string"
                },
                "adminWebServicePcvRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "The password credential validator reference that is used for authenticating access to the OAuth Administrative Web Service.",
                    "position": 240
                },
                "allowUnidentifiedClientExtensionGrants": {
                    "description": "Allow unidentified clients to request extension grants. The default value is false.",
                    "position": 230,
                    "type": "boolean"
                },
                "allowUnidentifiedClientROCreds": {
                    "description": "Allow unidentified clients to request resource owner password credentials grants. The default value is false.",
                    "position": 220,
                    "type": "boolean"
                },
                "allowedOrigins": {
                    "description": "The list of allowed origins.",
                    "items": {
                        "type": "string"
                    },
                    "position": 270,
                    "type": "array"
                },
                "approvedScopesAttribute": {
                    "description": "Attribute from the external consent adapter's contract, intended for storing approved scopes returned by the external consent page.",
                    "position": 350,
                    "type": "string"
                },
                "atmIdForOAuthGrantManagement": {
                    "description": "The ID of the Access Token Manager used for OAuth enabled grant management.",
                    "position": 250,
                    "type": "string"
                },
                "authorizationCodeEntropy": {
                    "description": "The authorization code entropy, in bytes.",
                    "format": "int32",
                    "position": 70,
                    "type": "integer"
                },
                "authorizationCodeTimeout": {
                    "description": "The authorization code timeout, in seconds.",
                    "format": "int32",
                    "position": 60,
                    "type": "integer"
                },
                "bypassActivationCodeConfirmation": {
                    "description": "Indicates if the Activation Code Confirmation page should be bypassed if 'verification_url_complete' is used by the end user to authorize a device.",
                    "position": 320,
                    "type": "boolean"
                },
                "bypassAuthorizationForApprovedGrants": {
                    "description": "Bypass authorization for previously approved persistent grants. The default value is false.",
                    "position": 210,
                    "type": "boolean"
                },
                "clientSecretRetentionPeriod": {
                    "description": "The length of time in minutes that client secrets will be retained as secondary secrets after secret change. The default value is 0, which will disable secondary client secret retention.",
                    "format": "int32",
                    "position": 390,
                    "type": "integer"
                },
                "defaultScopeDescription": {
                    "description": "The default scope description.",
                    "position": 10,
                    "type": "string"
                },
                "devicePollingInterval": {
                    "description": "The amount of time client should wait between polling requests, in seconds.",
                    "format": "int32",
                    "position": 310,
                    "type": "integer"
                },
                "disallowPlainPKCE": {
                    "description": "Determines whether PKCE's 'plain' code challenge method will be disallowed. The default value is false.",
                    "position": 80,
                    "type": "boolean"
                },
                "exclusiveScopeGroups": {
                    "description": "The list of exclusive scope groups.",
                    "items": {
                        "$ref": "#/definitions/ScopeGroupEntry"
                    },
                    "position": 50,
                    "type": "array"
                },
                "exclusiveScopes": {
                    "description": "The list of exclusive scopes.",
                    "items": {
                        "$ref": "#/definitions/ScopeEntry"
                    },
                    "position": 40,
                    "type": "array"
                },
                "includeIssuerInAuthorizationResponse": {
                    "description": "Determines whether the authorization server's issuer value is added to the authorization response or not. The default value is false.",
                    "position": 90,
                    "type": "boolean"
                },
                "jwtSecuredAuthorizationResponseModeLifetime": {
                    "description": "The lifetime, in seconds, of the JWT Secured authorization response. The default value is 600.",
                    "format": "int32",
                    "position": 400,
                    "type": "integer"
                },
                "parReferenceLength": {
                    "description": "The entropy of pushed authorization request references, in bytes. The default value is 24.",
                    "format": "int32",
                    "position": 370,
                    "type": "integer"
                },
                "parReferenceTimeout": {
                    "description": "The timeout, in seconds, of the pushed authorization request reference. The default value is 60.",
                    "format": "int32",
                    "position": 360,
                    "type": "integer"
                },
                "parStatus": {
                    "description": "The status of pushed authorization request support. The default value is ENABLED.",
                    "enum": [
                        "DISABLED",
                        "ENABLED",
                        "REQUIRED"
                    ],
                    "position": 380,
                    "type": "string"
                },
                "pendingAuthorizationTimeout": {
                    "description": "The 'device_code' and 'user_code' timeout, in seconds.",
                    "format": "int32",
                    "position": 300,
                    "type": "integer"
                },
                "persistentGrantContract": {
                    "$ref": "#/definitions/PersistentGrantContract",
                    "description": "The persistent grant contract defines attributes that are associated with OAuth persistent grants.",
                    "position": 200
                },
                "persistentGrantIdleTimeout": {
                    "description": "The persistent grant idle timeout. The default value is 30 (days). -1 indicates an indefinite amount of time.",
                    "format": "int64",
                    "position": 140,
                    "type": "integer"
                },
                "persistentGrantIdleTimeoutTimeUnit": {
                    "description": "The persistent grant idle timeout time unit.",
                    "enum": [
                        "MINUTES",
                        "DAYS",
                        "HOURS"
                    ],
                    "position": 150,
                    "type": "string"
                },
                "persistentGrantLifetime": {
                    "description": "The persistent grant lifetime. The default value is indefinite. -1 indicates an indefinite amount of time.",
                    "format": "int64",
                    "position": 120,
                    "type": "integer"
                },
                "persistentGrantLifetimeUnit": {
                    "description": "The persistent grant lifetime unit.",
                    "enum": [
                        "MINUTES",
                        "DAYS",
                        "HOURS"
                    ],
                    "position": 130,
                    "type": "string"
                },
                "persistentGrantReuseGrantTypes": {
                    "description": "The grant types that the OAuth AS can reuse rather than creating a new grant for each request. Only 'IMPLICIT' or 'AUTHORIZATION_CODE' or 'RESOURCE_OWNER_CREDENTIALS' are valid grant types.",
                    "items": {
                        "enum": [
                            "IMPLICIT",
                            "AUTHORIZATION_CODE",
                            "RESOURCE_OWNER_CREDENTIALS",
                            "CLIENT_CREDENTIALS",
                            "REFRESH_TOKEN",
                            "EXTENSION",
                            "DEVICE_CODE",
                            "ACCESS_TOKEN_VALIDATION",
                            "CIBA",
                            "TOKEN_EXCHANGE"
                        ],
                        "type": "string"
                    },
                    "position": 190,
                    "type": "array"
                },
                "refreshRollingInterval": {
                    "description": "The minimum interval to roll refresh tokens, in hours.",
                    "format": "int64",
                    "position": 180,
                    "type": "integer"
                },
                "refreshTokenLength": {
                    "description": "The refresh token length in number of characters.",
                    "format": "int32",
                    "position": 160,
                    "type": "integer"
                },
                "refreshTokenRollingGracePeriod": {
                    "description": "The grace period that a rolled refresh token remains valid in seconds. The default value is 0.",
                    "format": "int32",
                    "position": 179,
                    "type": "integer"
                },
                "registeredAuthorizationPath": {
                    "description": "The Registered Authorization Path is concatenated to PingFederate base URL to generate 'verification_url' and 'verification_url_complete' values in a Device Authorization request. PingFederate listens to this path if specified",
                    "position": 290,
                    "type": "string"
                },
                "rollRefreshTokenValues": {
                    "description": "The roll refresh token values default policy. The default value is true.",
                    "position": 170,
                    "type": "boolean"
                },
                "scopeForOAuthGrantManagement": {
                    "description": "The OAuth scope to validate when accessing grant management service.",
                    "position": 260,
                    "type": "string"
                },
                "scopeGroups": {
                    "description": "The list of common scope groups.",
                    "items": {
                        "$ref": "#/definitions/ScopeGroupEntry"
                    },
                    "position": 30,
                    "type": "array"
                },
                "scopes": {
                    "description": "The list of common scopes.",
                    "items": {
                        "$ref": "#/definitions/ScopeEntry"
                    },
                    "position": 20,
                    "type": "array"
                },
                "tokenEndpointBaseUrl": {
                    "description": "The token endpoint base URL used to validate the 'aud' claim during Private Key JWT Client Authentication.",
                    "position": 110,
                    "type": "string"
                },
                "trackUserSessionsForLogout": {
                    "description": "Determines whether user sessions are tracked for logout. If this property is not provided on a PUT, the setting is left unchanged.",
                    "position": 100,
                    "type": "boolean"
                },
                "userAuthorizationConsentAdapter": {
                    "description": "Adapter ID of the external consent adapter to be used for the consent page user interface.",
                    "position": 340,
                    "type": "string"
                },
                "userAuthorizationConsentPageSetting": {
                    "description": "User Authorization Consent Page setting to use PingFederate's internal consent page or an external system",
                    "enum": [
                        "INTERNAL",
                        "ADAPTER"
                    ],
                    "position": 330,
                    "type": "string"
                },
                "userAuthorizationUrl": {
                    "description": "The URL used to generate 'verification_url' and 'verification_url_complete' values in a Device Authorization request",
                    "position": 280,
                    "type": "string"
                }
            },
            "required": [
                "authorizationCodeEntropy",
                "authorizationCodeTimeout",
                "bypassActivationCodeConfirmation",
                "defaultScopeDescription",
                "devicePollingInterval",
                "pendingAuthorizationTimeout",
                "refreshRollingInterval",
                "refreshTokenLength",
                "registeredAuthorizationPath"
            ],
            "type": "object"
        },
        "BackChannelAuth": {
            "description": "The SOAP authentication methods when sending or receiving a message using SOAP back channel.",
            "discriminator": "type",
            "properties": {
                "digitalSignature": {
                    "description": "If incoming or outgoing messages must be signed.",
                    "position": 30,
                    "type": "boolean"
                },
                "httpBasicCredentials": {
                    "$ref": "#/definitions/UsernamePasswordCredentials",
                    "description": "The credentials to use when you authenticate with the SOAP endpoint.",
                    "position": 20
                },
                "type": {
                    "description": "The back channel authentication type.",
                    "enum": [
                        "INBOUND",
                        "OUTBOUND"
                    ],
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "BaseDefaultValueLocalIdentityField": {
            "allOf": [
                {
                    "$ref": "#/definitions/LocalIdentityField"
                },
                {
                    "description": "Holds fields that are shared by all default value type fields.",
                    "properties": {
                        "defaultValue": {
                            "description": "The default value for this field.",
                            "position": 100,
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "BaseProviderRole": {
            "description": "Base Provider Role.",
            "properties": {
                "enable": {
                    "type": "boolean"
                },
                "enableSaml10": {
                    "description": "Enable SAML 1.0.",
                    "position": 40,
                    "type": "boolean"
                },
                "enableSaml11": {
                    "description": "Enable SAML 1.1.",
                    "position": 30,
                    "type": "boolean"
                },
                "enableWsFed": {
                    "description": "Enable WS Federation.",
                    "position": 50,
                    "type": "boolean"
                },
                "enableWsTrust": {
                    "description": "Enable WS Trust.",
                    "position": 60,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "BaseSelectionFieldDescriptor": {
            "allOf": [
                {
                    "$ref": "#/definitions/FieldDescriptor"
                },
                {
                    "description": "Holds fields that are shared by all selection-type field descriptors.",
                    "properties": {
                        "optionValues": {
                            "description": "The list of option values for this selection field.",
                            "items": {
                                "$ref": "#/definitions/OptionValue"
                            },
                            "position": 100,
                            "type": "array"
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "BaseSelectionLocalIdentityField": {
            "allOf": [
                {
                    "$ref": "#/definitions/LocalIdentityField"
                },
                {
                    "description": "Holds fields that are shared by all selection-type fields.",
                    "properties": {
                        "options": {
                            "description": "The list of options for this selection field.",
                            "items": {
                                "type": "string"
                            },
                            "position": 100,
                            "type": "array"
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "BaseSigningSettings": {
            "description": "Settings related to signing messages.",
            "properties": {
                "algorithm": {
                    "description": "The algorithm used to sign messages sent to this partner. The default is SHA1withDSA for DSA certs, SHA256withRSA for RSA certs, and SHA256withECDSA for EC certs. For RSA certs, SHA1withRSA, SHA384withRSA, and SHA512withRSA are also supported. For EC certs, SHA384withECDSA and SHA512withECDSA are also supported. If the connection is WS-Federation with JWT token type, then the possible values are RSA SHA256, RSA SHA384, RSA SHA512, ECDSA SHA256, ECDSA SHA384, ECDSA SHA512",
                    "position": 30,
                    "type": "string"
                },
                "includeCertInSignature": {
                    "description": "Determines whether the signing certificate is included in the signature <KeyInfo> element.",
                    "position": 40,
                    "type": "boolean"
                },
                "includeRawKeyInSignature": {
                    "description": "Determines whether the <KeyValue> element with the raw public key is included in the signature <KeyInfo> element.",
                    "position": 50,
                    "type": "boolean"
                },
                "signingKeyPairRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "The ID of the key pair used to sign messages sent to this partner. The ID of the key pair is also known as the alias and can be found by viewing the corresponding certificate under 'Signing & Decryption Keys & Certificates' in the PingFederate admin console.",
                    "position": 10
                }
            },
            "required": [
                "signingKeyPairRef"
            ],
            "type": "object"
        },
        "BinaryLdapAttributeSettings": {
            "description": "Binary settings for a LDAP attribute.",
            "properties": {
                "binaryEncoding": {
                    "description": "Get the encoding type for this attribute. If not specified, the default is BASE64.",
                    "enum": [
                        "BASE64",
                        "HEX",
                        "SID"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "BulkConfig": {
            "description": "Model describing a series of configuration operations.",
            "properties": {
                "metadata": {
                    "$ref": "#/definitions/BulkConfigMetadata",
                    "description": "The metadata detailing how this config was generated.",
                    "position": 10
                },
                "operations": {
                    "description": "A list of configuration operations.",
                    "items": {
                        "$ref": "#/definitions/ConfigOperation"
                    },
                    "position": 20,
                    "type": "array"
                }
            },
            "required": [
                "metadata",
                "operations"
            ],
            "type": "object"
        },
        "BulkConfigMetadata": {
            "description": "Model describing how bulk configuration data was generated.",
            "properties": {
                "pfVersion": {
                    "description": "The version of PingFederate this config was generated from.",
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "pfVersion"
            ],
            "type": "object"
        },
        "CSRResponse": {
            "description": "Represents a CSR response file.",
            "properties": {
                "fileData": {
                    "description": "The CSR response file data in PKCS7 format or as an X.509 certificate. PEM encoding (with or without the header and footer lines) is required. New line characters should be omitted or encoded in this value.",
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "fileData"
            ],
            "type": "object"
        },
        "CaptchaSettings": {
            "description": "Settings for CAPTCHA.",
            "properties": {
                "encryptedSecretKey": {
                    "description": "The encrypted secret key for reCAPTCHA. If you do not want to update the stored value, this attribute should be passed back unchanged.",
                    "position": 30,
                    "type": "string"
                },
                "secretKey": {
                    "description": "Secret key for reCAPTCHA. GETs will not return this attribute. To update this field, specify the new value in this attribute.",
                    "position": 20,
                    "type": "string"
                },
                "siteKey": {
                    "description": "Site key for reCAPTCHA.",
                    "position": 10,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CertView": {
            "description": "Certificate details.",
            "properties": {
                "cryptoProvider": {
                    "description": "Cryptographic Provider. This is only applicable if Hybrid HSM mode is true.",
                    "enum": [
                        "LOCAL",
                        "HSM"
                    ],
                    "position": 120,
                    "type": "string"
                },
                "expires": {
                    "description": "The end date up until which the item is valid, in ISO 8601 format (UTC).",
                    "format": "date-time",
                    "position": 50,
                    "type": "string"
                },
                "id": {
                    "description": "The persistent, unique ID for the certificate.",
                    "position": 5,
                    "type": "string"
                },
                "issuerDN": {
                    "description": "The issuer's distinguished name.",
                    "position": 30,
                    "type": "string"
                },
                "keyAlgorithm": {
                    "description": "The public key algorithm.",
                    "position": 60,
                    "type": "string"
                },
                "keySize": {
                    "description": "The public key size.",
                    "format": "int32",
                    "position": 70,
                    "type": "integer"
                },
                "serialNumber": {
                    "description": "The serial number assigned by the CA.",
                    "position": 10,
                    "type": "string"
                },
                "sha1Fingerprint": {
                    "description": "SHA-1 fingerprint in Hex encoding.",
                    "position": 100,
                    "type": "string"
                },
                "sha256Fingerprint": {
                    "description": "SHA-256 fingerprint in Hex encoding.",
                    "position": 102,
                    "type": "string"
                },
                "signatureAlgorithm": {
                    "description": "The signature algorithm.",
                    "position": 80,
                    "type": "string"
                },
                "status": {
                    "description": "Status of the item.",
                    "enum": [
                        "VALID",
                        "EXPIRED",
                        "NOT_YET_VALID",
                        "REVOKED"
                    ],
                    "position": 110,
                    "type": "string"
                },
                "subjectAlternativeNames": {
                    "description": "The subject alternative names (SAN).",
                    "items": {
                        "type": "string"
                    },
                    "position": 25,
                    "type": "array"
                },
                "subjectDN": {
                    "description": "The subject's distinguished name.",
                    "position": 20,
                    "type": "string"
                },
                "validFrom": {
                    "description": "The start date from which the item is valid, in ISO 8601 format (UTC).",
                    "format": "date-time",
                    "position": 40,
                    "type": "string"
                },
                "version": {
                    "description": "The X.509 version to which the item conforms.",
                    "format": "int32",
                    "position": 90,
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "CertViews": {
            "description": "A collection of Certificate items.",
            "properties": {
                "items": {
                    "description": "The actual list of certificate instances.",
                    "items": {
                        "$ref": "#/definitions/CertView"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "CertificateExpirationNotificationSettings": {
            "description": "Notification settings for certificate expiration events.",
            "properties": {
                "emailAddress": {
                    "description": "Email address where notifications are sent.",
                    "position": 10,
                    "type": "string"
                },
                "finalWarningPeriod": {
                    "description": "Time before certificate expiration when final warning is sent (in days).",
                    "format": "int32",
                    "position": 30,
                    "type": "integer"
                },
                "initialWarningPeriod": {
                    "description": "Time before certificate expiration when initial warning is sent (in days).",
                    "format": "int32",
                    "position": 20,
                    "type": "integer"
                },
                "notificationPublisherRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the associated notification publisher.",
                    "position": 40
                }
            },
            "required": [
                "emailAddress",
                "finalWarningPeriod"
            ],
            "type": "object"
        },
        "CertificateRevocationSettings": {
            "description": "Certificate revocation settings.",
            "properties": {
                "crlSettings": {
                    "$ref": "#/definitions/CrlSettings",
                    "description": "Certificate revocation CRL settings. If this attribute is omitted, CRL checks are disabled.",
                    "position": 20
                },
                "ocspSettings": {
                    "$ref": "#/definitions/OcspSettings",
                    "description": "Certificate revocation OCSP settings. If this attribute is omitted, OCSP checks are disabled.",
                    "position": 10
                },
                "proxySettings": {
                    "$ref": "#/definitions/ProxySettings",
                    "description": "If OCSP messaging is routed through a proxy server, specify the server's host (DNS name or IP address) and the port number. The same proxy information applies to CRL checking, when CRL is enabled for failover.",
                    "position": 30
                }
            },
            "type": "object"
        },
        "ChangeDetectionSettings": {
            "description": "Setting to detect changes to a user or a group.",
            "properties": {
                "changedUsersAlgorithm": {
                    "description": "The changed user algorithm. \nACTIVE_DIRECTORY_USN - For Active Directory only, this algorithm queries for update sequence numbers on user records that are larger than the last time records were checked. \nTIMESTAMP - Queries for timestamps on user records that are not older than the last time records were checked. This check is more efficient from the point of view of the PingFederate provisioner but can be more time consuming on the LDAP side, particularly with the Oracle Directory Server. \nTIMESTAMP_NO_NEGATION - Queries for timestamps on user records that are newer than the last time records were checked. This algorithm is recommended for the Oracle Directory Server.",
                    "enum": [
                        "ACTIVE_DIRECTORY_USN",
                        "TIMESTAMP",
                        "TIMESTAMP_NO_NEGATION"
                    ],
                    "position": 30,
                    "type": "string"
                },
                "groupObjectClass": {
                    "description": "The group object class.",
                    "position": 20,
                    "type": "string"
                },
                "timeStampAttributeName": {
                    "description": "The timestamp attribute name.",
                    "position": 50,
                    "type": "string"
                },
                "userObjectClass": {
                    "description": "The user object class.",
                    "position": 10,
                    "type": "string"
                },
                "usnAttributeName": {
                    "description": "The USN attribute name.",
                    "position": 40,
                    "type": "string"
                }
            },
            "required": [
                "changedUsersAlgorithm",
                "groupObjectClass",
                "timeStampAttributeName",
                "userObjectClass"
            ],
            "type": "object"
        },
        "Channel": {
            "description": "A channel is a combination of a source data store and a provisioning target. It include settings of a source data store, managing provisioning threads and mapping of attributes.",
            "properties": {
                "active": {
                    "description": "Indicates whether the channel is the active channel for this connection.",
                    "position": 10,
                    "type": "boolean"
                },
                "attributeMapping": {
                    "description": "The mapping of attributes from the local data store into Fields specified by the service provider.",
                    "items": {
                        "$ref": "#/definitions/SaasAttributeMapping"
                    },
                    "position": 30,
                    "type": "array"
                },
                "channelSource": {
                    "$ref": "#/definitions/ChannelSource",
                    "description": "The LDAP settings that apply to the source user-data store.",
                    "position": 20
                },
                "maxThreads": {
                    "description": "The number of processing threads. The default value is 1.",
                    "format": "int32",
                    "position": 50,
                    "type": "integer"
                },
                "name": {
                    "description": "The name of the channel.",
                    "position": 40,
                    "type": "string"
                },
                "timeout": {
                    "description": "Timeout is the number of seconds that can be adjusted if more time is needed for provisioning a large amount of data. It is applicable when the number of processing thread is more than 1. The default value is 60. ",
                    "format": "int32",
                    "position": 60,
                    "type": "integer"
                }
            },
            "required": [
                "active",
                "attributeMapping",
                "channelSource",
                "maxThreads",
                "name",
                "timeout"
            ],
            "type": "object"
        },
        "ChannelSource": {
            "description": "The source data source and LDAP settings.",
            "properties": {
                "accountManagementSettings": {
                    "$ref": "#/definitions/AccountManagementSettings",
                    "description": "Account management settings that includes the status and algorithms.",
                    "position": 60
                },
                "baseDn": {
                    "description": "The base DN where the user records are located.",
                    "position": 70,
                    "type": "string"
                },
                "changeDetectionSettings": {
                    "$ref": "#/definitions/ChangeDetectionSettings",
                    "description": "Settings to detect a during provisioning.",
                    "position": 40
                },
                "dataSource": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to an LDAP datastore.",
                    "position": 10
                },
                "groupMembershipDetection": {
                    "$ref": "#/definitions/GroupMembershipDetection",
                    "description": "Settings to detect group memberships.",
                    "position": 50
                },
                "groupSourceLocation": {
                    "$ref": "#/definitions/ChannelSourceLocation",
                    "description": "The group provisioning source location settings.",
                    "position": 90
                },
                "guidAttributeName": {
                    "description": "the GUID attribute name.",
                    "position": 20,
                    "type": "string"
                },
                "guidBinary": {
                    "description": "Indicates whether the GUID is stored in binary format.",
                    "position": 30,
                    "type": "boolean"
                },
                "userSourceLocation": {
                    "$ref": "#/definitions/ChannelSourceLocation",
                    "description": "The user provisioning source location settings.",
                    "position": 80
                }
            },
            "required": [
                "accountManagementSettings",
                "baseDn",
                "changeDetectionSettings",
                "dataSource",
                "groupMembershipDetection",
                "guidAttributeName",
                "guidBinary",
                "userSourceLocation"
            ],
            "type": "object"
        },
        "ChannelSourceLocation": {
            "description": "The location settings that includes a DN and a LDAP filter.",
            "properties": {
                "filter": {
                    "description": "An LDAP filter.",
                    "position": 20,
                    "type": "string"
                },
                "groupDN": {
                    "description": "The group DN for users or groups.",
                    "position": 10,
                    "type": "string"
                },
                "nestedSearch": {
                    "description": "Indicates whether the search is nested.",
                    "position": 30,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "CheckBoxFieldDescriptor": {
            "allOf": [
                {
                    "$ref": "#/definitions/FieldDescriptor"
                },
                {
                    "description": "A boolean field typically rendered as a checkbox in a configuration UI.",
                    "properties": {},
                    "type": "object"
                }
            ]
        },
        "CheckboxGroupLocalIdentityField": {
            "allOf": [
                {
                    "$ref": "#/definitions/BaseSelectionLocalIdentityField"
                },
                {
                    "description": "A checkbox group selection type field.",
                    "properties": {
                        "options": {
                            "description": "The list of options for this selection field.",
                            "items": {
                                "type": "string"
                            },
                            "position": 100,
                            "type": "array"
                        }
                    },
                    "required": [
                        "options"
                    ],
                    "type": "object"
                }
            ]
        },
        "CheckboxLocalIdentityField": {
            "allOf": [
                {
                    "$ref": "#/definitions/BaseDefaultValueLocalIdentityField"
                },
                {
                    "description": "A checkbox selection type field.",
                    "properties": {},
                    "type": "object"
                }
            ]
        },
        "CibaServerPolicySettings": {
            "description": "Settings for the CIBA request policy configuration.",
            "properties": {
                "defaultRequestPolicyRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the default request policy, if one is defined.",
                    "position": 10
                }
            },
            "type": "object"
        },
        "Client": {
            "description": "OAuth client.",
            "properties": {
                "allowAuthenticationApiInit": {
                    "description": "Set to true to allow this client to initiate the authentication API redirectless flow.",
                    "position": 107,
                    "type": "boolean"
                },
                "bypassActivationCodeConfirmationOverride": {
                    "description": "Indicates if the Activation Code Confirmation page should be bypassed if 'verification_url_complete' is used by the end user to authorize a device. This overrides the 'bypassUseCodeConfirmation' value present in Authorization Server Settings.",
                    "position": 340,
                    "type": "boolean"
                },
                "bypassApprovalPage": {
                    "description": "Use this setting, for example, when you want to deploy a trusted application and authenticate end users via an IdP adapter or IdP connection.",
                    "position": 110,
                    "type": "boolean"
                },
                "cibaDeliveryMode": {
                    "description": "The token delivery mode for the client.  The default value is 'POLL'.",
                    "enum": [
                        "POLL",
                        "PING"
                    ],
                    "position": 410,
                    "type": "string"
                },
                "cibaNotificationEndpoint": {
                    "description": "The endpoint the OP will call after a successful or failed end-user authentication.",
                    "position": 420,
                    "type": "string"
                },
                "cibaPollingInterval": {
                    "description": "The minimum amount of time in seconds that the Client must wait between polling requests to the token endpoint. The default is 3 seconds.",
                    "format": "int32",
                    "position": 430,
                    "type": "integer"
                },
                "cibaRequestObjectSigningAlgorithm": {
                    "description": "The JSON Web Signature [JWS] algorithm that must be used to sign the CIBA Request Object. All signing algorithms are allowed if value is not present <br>RS256 - RSA using SHA-256<br>RS384 - RSA using SHA-384<br>RS512 - RSA using SHA-512<br>ES256 - ECDSA using P256 Curve and SHA-256<br>ES384 - ECDSA using P384 Curve and SHA-384<br>ES512 - ECDSA using P521 Curve and SHA-512<br>PS256 - RSASSA-PSS using SHA-256 and MGF1 padding with SHA-256<br>PS384 - RSASSA-PSS using SHA-384 and MGF1 padding with SHA-384<br>PS512 - RSASSA-PSS using SHA-512 and MGF1 padding with SHA-512<br>RSASSA-PSS is only supported with SafeNet Luna, Thales nCipher or Java 11.",
                    "enum": [
                        "RS256",
                        "RS384",
                        "RS512",
                        "ES256",
                        "ES384",
                        "ES512",
                        "PS256",
                        "PS384",
                        "PS512"
                    ],
                    "position": 441,
                    "type": "string"
                },
                "cibaRequireSignedRequests": {
                    "description": "Determines whether CIBA signed requests are required for this client.",
                    "position": 440,
                    "type": "boolean"
                },
                "cibaUserCodeSupported": {
                    "description": "Determines whether CIBA user code is supported for this client.",
                    "position": 450,
                    "type": "boolean"
                },
                "clientAuth": {
                    "$ref": "#/definitions/ClientAuth",
                    "description": "Client authentication settings.  If this model is null, it indicates that no client authentication will be used.",
                    "position": 180
                },
                "clientId": {
                    "description": "A unique identifier the client provides to the Resource Server to identify itself. This identifier is included with every request the client makes. For PUT requests, this field is optional and it will be overridden by the 'id' parameter of the PUT request.",
                    "position": 10,
                    "type": "string"
                },
                "clientSecretChangedTime": {
                    "description": "The time at which the client secret was last changed. This property is read only and is ignored on PUT and POST requests.",
                    "format": "date-time",
                    "position": 490,
                    "type": "string"
                },
                "clientSecretRetentionPeriod": {
                    "description": "The length of time in minutes that client secrets will be retained as secondary secrets after secret change. The default value is 0, which will disable secondary client secret retention. This value will override the Client Secret Retention Period value on the Authorization Server Settings.",
                    "format": "int32",
                    "position": 481,
                    "type": "integer"
                },
                "clientSecretRetentionPeriodType": {
                    "description": "Use OVERRIDE_SERVER_DEFAULT to override the Client Secret Retention Period value on the Authorization Server Settings. SERVER_DEFAULT will default to the Client Secret Retention Period value on the Authorization Server Setting. Defaults to SERVER_DEFAULT.",
                    "enum": [
                        "SERVER_DEFAULT",
                        "OVERRIDE_SERVER_DEFAULT"
                    ],
                    "position": 480,
                    "type": "string"
                },
                "defaultAccessTokenManagerRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "The default access token manager for this client.",
                    "position": 65
                },
                "description": {
                    "description": "A description of what the client application does. This description appears when the user is prompted for authorization.",
                    "position": 50,
                    "type": "string"
                },
                "deviceFlowSettingType": {
                    "description": "Allows an administrator to override the Device Authorization Settings set globally for the OAuth AS. Defaults to SERVER_DEFAULT.",
                    "enum": [
                        "SERVER_DEFAULT",
                        "OVERRIDE_SERVER_DEFAULT"
                    ],
                    "position": 300,
                    "type": "string"
                },
                "devicePollingIntervalOverride": {
                    "description": "The amount of time client should wait between polling requests, in seconds. This overrides the 'devicePollingInterval' value present in Authorization Server Settings.",
                    "format": "int32",
                    "position": 330,
                    "type": "integer"
                },
                "enabled": {
                    "description": "Specifies whether the client is enabled. The default value is true.",
                    "position": 15,
                    "type": "boolean"
                },
                "exclusiveScopes": {
                    "description": "The exclusive scopes available for this client.",
                    "items": {
                        "type": "string"
                    },
                    "position": 150,
                    "type": "array",
                    "uniqueItems": true
                },
                "extendedParameters": {
                    "additionalProperties": {
                        "$ref": "#/definitions/ParameterValues"
                    },
                    "description": "OAuth Client Metadata can be extended to use custom Client Metadata Parameters. The names of these custom parameters should be defined in /extendedProperties.",
                    "position": 200,
                    "type": "object"
                },
                "grantTypes": {
                    "description": "The grant types allowed for this client. The EXTENSION grant type applies to SAML/JWT assertion grants.",
                    "items": {
                        "enum": [
                            "IMPLICIT",
                            "AUTHORIZATION_CODE",
                            "RESOURCE_OWNER_CREDENTIALS",
                            "CLIENT_CREDENTIALS",
                            "REFRESH_TOKEN",
                            "EXTENSION",
                            "DEVICE_CODE",
                            "ACCESS_TOKEN_VALIDATION",
                            "CIBA",
                            "TOKEN_EXCHANGE"
                        ],
                        "type": "string"
                    },
                    "position": 30,
                    "type": "array",
                    "uniqueItems": true
                },
                "jwksSettings": {
                    "$ref": "#/definitions/JwksSettings",
                    "description": "JSON Web Key Set Settings of the OAuth client. Required if private key JWT client authentication or signed requests is enabled.",
                    "position": 190
                },
                "jwtSecuredAuthorizationResponseModeContentEncryptionAlgorithm": {
                    "description": "The JSON Web Encryption [JWE] content-encryption algorithm for the JWT Secured Authorization Response.<br>AES_128_CBC_HMAC_SHA_256 - Composite AES-CBC-128 HMAC-SHA-256<br>AES_192_CBC_HMAC_SHA_384 - Composite AES-CBC-192 HMAC-SHA-384<br>AES_256_CBC_HMAC_SHA_512 - Composite AES-CBC-256 HMAC-SHA-512<br>AES_128_GCM - AES-GCM-128<br>AES_192_GCM - AES-GCM-192<br>AES_256_GCM - AES-GCM-256",
                    "enum": [
                        "AES_128_CBC_HMAC_SHA_256",
                        "AES_192_CBC_HMAC_SHA_384",
                        "AES_256_CBC_HMAC_SHA_512",
                        "AES_128_GCM",
                        "AES_192_GCM",
                        "AES_256_GCM"
                    ],
                    "position": 512,
                    "type": "string"
                },
                "jwtSecuredAuthorizationResponseModeEncryptionAlgorithm": {
                    "description": "The JSON Web Encryption [JWE] encryption algorithm used to encrypt the content-encryption key of the JWT Secured Authorization Response.<br>DIR - Direct Encryption with symmetric key<br>A128KW - AES-128 Key Wrap<br>A192KW - AES-192 Key Wrap<br>A256KW - AES-256 Key Wrap<br>A128GCMKW - AES-GCM-128 key encryption<br>A192GCMKW - AES-GCM-192 key encryption<br>A256GCMKW - AES-GCM-256 key encryption<br>ECDH_ES - ECDH-ES<br>ECDH_ES_A128KW - ECDH-ES with AES-128 Key Wrap<br>ECDH_ES_A192KW - ECDH-ES with AES-192 Key Wrap<br>ECDH_ES_A256KW - ECDH-ES with AES-256 Key Wrap<br>RSA_OAEP - RSAES OAEP<br>RSA_OAEP_256 - RSAES OAEP using SHA-256 and MGF1 with SHA-256",
                    "enum": [
                        "DIR",
                        "A128KW",
                        "A192KW",
                        "A256KW",
                        "A128GCMKW",
                        "A192GCMKW",
                        "A256GCMKW",
                        "ECDH_ES",
                        "ECDH_ES_A128KW",
                        "ECDH_ES_A192KW",
                        "ECDH_ES_A256KW",
                        "RSA_OAEP",
                        "RSA_OAEP_256"
                    ],
                    "position": 511,
                    "type": "string"
                },
                "jwtSecuredAuthorizationResponseModeSigningAlgorithm": {
                    "description": "The JSON Web Signature [JWS] algorithm required to sign the JWT Secured Authorization Response.<br>HS256 - HMAC using SHA-256<br>HS384 - HMAC using SHA-384<br>HS512 - HMAC using SHA-512<br>RS256 - RSA using SHA-256<br>RS384 - RSA using SHA-384<br>RS512 - RSA using SHA-512<br>ES256 - ECDSA using P256 Curve and SHA-256<br>ES384 - ECDSA using P384 Curve and SHA-384<br>ES512 - ECDSA using P521 Curve and SHA-512<br>PS256 - RSASSA-PSS using SHA-256 and MGF1 padding with SHA-256<br>PS384 - RSASSA-PSS using SHA-384 and MGF1 padding with SHA-384<br>PS512 - RSASSA-PSS using SHA-512 and MGF1 padding with SHA-512<br>A null value will represent the default algorithm which is RS256.<br>RSASSA-PSS is only supported with SafeNet Luna, Thales nCipher or Java 11",
                    "enum": [
                        "RS256",
                        "RS384",
                        "RS512",
                        "HS256",
                        "HS384",
                        "HS512",
                        "ES256",
                        "ES384",
                        "ES512",
                        "PS256",
                        "PS384",
                        "PS512"
                    ],
                    "position": 510,
                    "type": "string"
                },
                "logoUrl": {
                    "description": "The location of the logo used on user-facing OAuth grant authorization and revocation pages.",
                    "position": 60,
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for the client instance. This name appears when the user is prompted for authorization.",
                    "position": 40,
                    "type": "string"
                },
                "oidcPolicy": {
                    "$ref": "#/definitions/ClientOIDCPolicy",
                    "description": "Open ID Connect Policy settings.  This is included in the message only when OIDC is enabled.",
                    "position": 170
                },
                "pendingAuthorizationTimeoutOverride": {
                    "description": "The 'device_code' and 'user_code' timeout, in seconds. This overrides the 'pendingAuthorizationTimeout' value present in Authorization Server Settings.",
                    "format": "int32",
                    "position": 320,
                    "type": "integer"
                },
                "persistentGrantExpirationTime": {
                    "description": "The persistent grant expiration time. -1 indicates an indefinite amount of time.",
                    "format": "int64",
                    "position": 90,
                    "type": "integer"
                },
                "persistentGrantExpirationTimeUnit": {
                    "description": "The persistent grant expiration time unit.",
                    "enum": [
                        "MINUTES",
                        "DAYS",
                        "HOURS"
                    ],
                    "position": 100,
                    "type": "string"
                },
                "persistentGrantExpirationType": {
                    "description": "Allows an administrator to override the Persistent Grant Lifetime set globally for the OAuth AS. Defaults to SERVER_DEFAULT.",
                    "enum": [
                        "INDEFINITE_EXPIRY",
                        "SERVER_DEFAULT",
                        "OVERRIDE_SERVER_DEFAULT"
                    ],
                    "position": 80,
                    "type": "string"
                },
                "persistentGrantIdleTimeout": {
                    "description": "The persistent grant idle timeout.",
                    "format": "int64",
                    "position": 102,
                    "type": "integer"
                },
                "persistentGrantIdleTimeoutTimeUnit": {
                    "description": "The persistent grant idle timeout time unit.",
                    "enum": [
                        "MINUTES",
                        "DAYS",
                        "HOURS"
                    ],
                    "position": 103,
                    "type": "string"
                },
                "persistentGrantIdleTimeoutType": {
                    "description": "Allows an administrator to override the Persistent Grant Idle Timeout set globally for the OAuth AS. Defaults to SERVER_DEFAULT.",
                    "enum": [
                        "INDEFINITE_EXPIRY",
                        "SERVER_DEFAULT",
                        "OVERRIDE_SERVER_DEFAULT"
                    ],
                    "position": 101,
                    "type": "string"
                },
                "persistentGrantReuseGrantTypes": {
                    "description": "The grant types that the OAuth AS can reuse rather than creating a new grant for each request. This value will override the Reuse Existing Persistent Access Grants for Grant Types on the Authorization Server Settings. Only 'IMPLICIT' or 'AUTHORIZATION_CODE' or 'RESOURCE_OWNER_CREDENTIALS' are valid grant types.",
                    "items": {
                        "enum": [
                            "IMPLICIT",
                            "AUTHORIZATION_CODE",
                            "RESOURCE_OWNER_CREDENTIALS",
                            "CLIENT_CREDENTIALS",
                            "REFRESH_TOKEN",
                            "EXTENSION",
                            "DEVICE_CODE",
                            "ACCESS_TOKEN_VALIDATION",
                            "CIBA",
                            "TOKEN_EXCHANGE"
                        ],
                        "type": "string"
                    },
                    "position": 105,
                    "type": "array",
                    "uniqueItems": true
                },
                "persistentGrantReuseType": {
                    "description": "Allows and administrator to override the Reuse Existing Persistent Access Grants for Grant Types set globally for OAuth AS. Defaults to SERVER_DEFAULT.",
                    "enum": [
                        "SERVER_DEFAULT",
                        "OVERRIDE_SERVER_DEFAULT"
                    ],
                    "position": 104,
                    "type": "string"
                },
                "redirectUris": {
                    "description": "URIs to which the OAuth AS may redirect the resource owner's user agent after authorization is obtained. A redirection URI is used with the Authorization Code and Implicit grant types. Wildcards are allowed. However, for security reasons, make the URL as restrictive as possible.For example: https://*.company.com/* Important: If more than one URI is added or if a single URI uses wildcards, then Authorization Code grant and token requests must contain a specific matching redirect uri parameter.",
                    "items": {
                        "type": "string"
                    },
                    "position": 20,
                    "type": "array"
                },
                "refreshRolling": {
                    "description": "Use ROLL or DONT_ROLL to override the Roll Refresh Token Values setting on the Authorization Server Settings. SERVER_DEFAULT will default to the Roll Refresh Token Values setting on the Authorization Server Setting screen. Defaults to SERVER_DEFAULT.",
                    "enum": [
                        "SERVER_DEFAULT",
                        "DONT_ROLL",
                        "ROLL"
                    ],
                    "position": 70,
                    "type": "string"
                },
                "refreshTokenRollingGracePeriod": {
                    "description": "The grace period that a rolled refresh token remains valid in seconds.",
                    "format": "int32",
                    "position": 471,
                    "type": "integer"
                },
                "refreshTokenRollingGracePeriodType": {
                    "description": "When specified, it overrides the global Refresh Token Grace Period defined in the Authorization Server Settings. The default value is SERVER_DEFAULT",
                    "enum": [
                        "SERVER_DEFAULT",
                        "OVERRIDE_SERVER_DEFAULT"
                    ],
                    "position": 470,
                    "type": "string"
                },
                "refreshTokenRollingInterval": {
                    "description": "The minimum interval to roll refresh tokens, in hours. This value will override the Refresh Token Rolling Interval Value on the Authorization Server Settings.",
                    "format": "int64",
                    "position": 74,
                    "type": "integer"
                },
                "refreshTokenRollingIntervalType": {
                    "description": "Use OVERRIDE_SERVER_DEFAULT to override the Refresh Token Rolling Interval value on the Authorization Server Settings. SERVER_DEFAULT will default to the Refresh Token Rolling Interval value on the Authorization Server Setting. Defaults to SERVER_DEFAULT.",
                    "enum": [
                        "SERVER_DEFAULT",
                        "OVERRIDE_SERVER_DEFAULT"
                    ],
                    "position": 73,
                    "type": "string"
                },
                "requestObjectSigningAlgorithm": {
                    "description": "The JSON Web Signature [JWS] algorithm that must be used to sign the Request Object. All signing algorithms are allowed if value is not present <br>RS256 - RSA using SHA-256<br>RS384 - RSA using SHA-384<br>RS512 - RSA using SHA-512<br>ES256 - ECDSA using P256 Curve and SHA-256<br>ES384 - ECDSA using P384 Curve and SHA-384<br>ES512 - ECDSA using P521 Curve and SHA-512<br>PS256 - RSASSA-PSS using SHA-256 and MGF1 padding with SHA-256<br>PS384 - RSASSA-PSS using SHA-384 and MGF1 padding with SHA-384<br>PS512 - RSASSA-PSS using SHA-512 and MGF1 padding with SHA-512<br>RSASSA-PSS is only supported with SafeNet Luna, Thales nCipher or Java 11.",
                    "enum": [
                        "RS256",
                        "RS384",
                        "RS512",
                        "ES256",
                        "ES384",
                        "ES512",
                        "PS256",
                        "PS384",
                        "PS512"
                    ],
                    "position": 161,
                    "type": "string"
                },
                "requestPolicyRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "The CIBA request policy.",
                    "position": 451
                },
                "requireJwtSecuredAuthorizationResponseMode": {
                    "description": "Determines whether JWT Secured authorization response mode is required when initiating an authorization request. The default is false.",
                    "position": 159,
                    "type": "boolean"
                },
                "requireProofKeyForCodeExchange": {
                    "description": "Determines whether Proof Key for Code Exchange (PKCE) is required for this client.",
                    "position": 400,
                    "type": "boolean"
                },
                "requirePushedAuthorizationRequests": {
                    "description": "Determines whether pushed authorization requests are required when initiating an authorization request. The default is false.",
                    "position": 158,
                    "type": "boolean"
                },
                "requireSignedRequests": {
                    "description": "Determines whether signed requests are required for this client",
                    "position": 160,
                    "type": "boolean"
                },
                "restrictScopes": {
                    "description": "Restricts this client's access to specific scopes.",
                    "position": 120,
                    "type": "boolean"
                },
                "restrictToDefaultAccessTokenManager": {
                    "description": "Determines whether the client is restricted to using only its default access token manager. The default is false.",
                    "position": 67,
                    "type": "boolean"
                },
                "restrictedResponseTypes": {
                    "description": "The response types allowed for this client. If omitted all response types are available to the client.",
                    "items": {
                        "type": "string"
                    },
                    "position": 155,
                    "type": "array",
                    "uniqueItems": true
                },
                "restrictedScopes": {
                    "description": "The scopes available for this client.",
                    "items": {
                        "type": "string"
                    },
                    "position": 130,
                    "type": "array",
                    "uniqueItems": true
                },
                "tokenExchangeProcessorPolicyRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "The Token Exchange Processor policy.",
                    "position": 460
                },
                "tokenIntrospectionContentEncryptionAlgorithm": {
                    "description": "The JSON Web Encryption [JWE] content-encryption algorithm for the Token Introspection Response.<br>AES_128_CBC_HMAC_SHA_256 - Composite AES-CBC-128 HMAC-SHA-256<br>AES_192_CBC_HMAC_SHA_384 - Composite AES-CBC-192 HMAC-SHA-384<br>AES_256_CBC_HMAC_SHA_512 - Composite AES-CBC-256 HMAC-SHA-512<br>AES_128_GCM - AES-GCM-128<br>AES_192_GCM - AES-GCM-192<br>AES_256_GCM - AES-GCM-256",
                    "enum": [
                        "AES_128_CBC_HMAC_SHA_256",
                        "AES_192_CBC_HMAC_SHA_384",
                        "AES_256_CBC_HMAC_SHA_512",
                        "AES_128_GCM",
                        "AES_192_GCM",
                        "AES_256_GCM"
                    ],
                    "position": 502,
                    "type": "string"
                },
                "tokenIntrospectionEncryptionAlgorithm": {
                    "description": "The JSON Web Encryption [JWE] encryption algorithm used to encrypt the content-encryption key of the Token Introspection Response.<br>DIR - Direct Encryption with symmetric key<br>A128KW - AES-128 Key Wrap<br>A192KW - AES-192 Key Wrap<br>A256KW - AES-256 Key Wrap<br>A128GCMKW - AES-GCM-128 key encryption<br>A192GCMKW - AES-GCM-192 key encryption<br>A256GCMKW - AES-GCM-256 key encryption<br>ECDH_ES - ECDH-ES<br>ECDH_ES_A128KW - ECDH-ES with AES-128 Key Wrap<br>ECDH_ES_A192KW - ECDH-ES with AES-192 Key Wrap<br>ECDH_ES_A256KW - ECDH-ES with AES-256 Key Wrap<br>RSA_OAEP - RSAES OAEP<br>RSA_OAEP_256 - RSAES OAEP using SHA-256 and MGF1 with SHA-256",
                    "enum": [
                        "DIR",
                        "A128KW",
                        "A192KW",
                        "A256KW",
                        "A128GCMKW",
                        "A192GCMKW",
                        "A256GCMKW",
                        "ECDH_ES",
                        "ECDH_ES_A128KW",
                        "ECDH_ES_A192KW",
                        "ECDH_ES_A256KW",
                        "RSA_OAEP",
                        "RSA_OAEP_256"
                    ],
                    "position": 501,
                    "type": "string"
                },
                "tokenIntrospectionSigningAlgorithm": {
                    "description": "The JSON Web Signature [JWS] algorithm required to sign the Token Introspection Response.<br>HS256 - HMAC using SHA-256<br>HS384 - HMAC using SHA-384<br>HS512 - HMAC using SHA-512<br>RS256 - RSA using SHA-256<br>RS384 - RSA using SHA-384<br>RS512 - RSA using SHA-512<br>ES256 - ECDSA using P256 Curve and SHA-256<br>ES384 - ECDSA using P384 Curve and SHA-384<br>ES512 - ECDSA using P521 Curve and SHA-512<br>PS256 - RSASSA-PSS using SHA-256 and MGF1 padding with SHA-256<br>PS384 - RSASSA-PSS using SHA-384 and MGF1 padding with SHA-384<br>PS512 - RSASSA-PSS using SHA-512 and MGF1 padding with SHA-512<br>A null value will represent the default algorithm which is RS256.<br>RSASSA-PSS is only supported with SafeNet Luna, Thales nCipher or Java 11",
                    "enum": [
                        "RS256",
                        "RS384",
                        "RS512",
                        "HS256",
                        "HS384",
                        "HS512",
                        "ES256",
                        "ES384",
                        "ES512",
                        "PS256",
                        "PS384",
                        "PS512"
                    ],
                    "position": 500,
                    "type": "string"
                },
                "userAuthorizationUrlOverride": {
                    "description": "The URL used as 'verification_url' and 'verification_url_complete' values in a Device Authorization request. This property overrides the 'userAuthorizationUrl' value present in Authorization Server Settings.",
                    "position": 310,
                    "type": "string"
                },
                "validateUsingAllEligibleAtms": {
                    "description": "Validates token using all eligible access token managers for the client. This setting is ignored if 'restrictToDefaultAccessTokenManager' is set to true.",
                    "position": 68,
                    "type": "boolean"
                }
            },
            "required": [
                "clientId",
                "grantTypes",
                "name"
            ],
            "type": "object"
        },
        "ClientAuth": {
            "description": "Client Authentication.",
            "properties": {
                "clientCertIssuerDn": {
                    "description": "Client TLS Certificate Issuer DN.",
                    "position": 30,
                    "type": "string"
                },
                "clientCertSubjectDn": {
                    "description": "Client TLS Certificate Subject DN.",
                    "position": 40,
                    "type": "string"
                },
                "encryptedSecret": {
                    "description": "For GET requests, this field contains the encrypted client secret, if one exists.  For POST and PUT requests, if you wish to reuse the existing secret, this field should be passed back unchanged.",
                    "position": 25,
                    "type": "string"
                },
                "enforceReplayPrevention": {
                    "description": "Enforce replay prevention on JSON Web Tokens. This field is applicable only for Private Key JWT Client Authentication.",
                    "position": 50,
                    "type": "boolean"
                },
                "secondarySecrets": {
                    "description": "The list of secondary client secrets that are temporarily retained.",
                    "items": {
                        "$ref": "#/definitions/SecondarySecret"
                    },
                    "position": 26,
                    "type": "array"
                },
                "secret": {
                    "description": "Client secret for Basic Authentication.  To update the client secret, specify the plaintext value in this field.  This field will not be populated for GET requests.",
                    "position": 20,
                    "type": "string"
                },
                "tokenEndpointAuthSigningAlgorithm": {
                    "description": "The JSON Web Signature [JWS] algorithm that must be used to sign the JSON Web Tokens. This field is applicable only for Private Key JWT Client Authentication. All signing algorithms are allowed if value is not present <br>RS256 - RSA using SHA-256<br>RS384 - RSA using SHA-384<br>RS512 - RSA using SHA-512<br>ES256 - ECDSA using P256 Curve and SHA-256<br>ES384 - ECDSA using P384 Curve and SHA-384<br>ES512 - ECDSA using P521 Curve and SHA-512<br>PS256 - RSASSA-PSS using SHA-256 and MGF1 padding with SHA-256<br>PS384 - RSASSA-PSS using SHA-384 and MGF1 padding with SHA-384<br>PS512 - RSASSA-PSS using SHA-512 and MGF1 padding with SHA-512<br>RSASSA-PSS is only supported with SafeNet Luna, Thales nCipher or Java 11.",
                    "enum": [
                        "RS256",
                        "RS384",
                        "RS512",
                        "ES256",
                        "ES384",
                        "ES512",
                        "PS256",
                        "PS384",
                        "PS512"
                    ],
                    "position": 60,
                    "type": "string"
                },
                "type": {
                    "description": "Client authentication type.<br>The required field for type SECRET is secret.<br>The required fields for type CERTIFICATE are clientCertIssuerDn and clientCertSubjectDn.<br>The required field for type PRIVATE_KEY_JWT is: either jwks or jwksUrl.",
                    "enum": [
                        "NONE",
                        "SECRET",
                        "CERTIFICATE",
                        "PRIVATE_KEY_JWT"
                    ],
                    "position": 10,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ClientMetadata": {
            "description": "The client metadata.",
            "properties": {
                "description": {
                    "description": "The metadata description.",
                    "position": 20,
                    "type": "string"
                },
                "multiValued": {
                    "description": "If the field should allow multiple values.",
                    "position": 30,
                    "type": "boolean"
                },
                "parameter": {
                    "description": "The metadata name.",
                    "position": 10,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ClientOIDCPolicy": {
            "description": "OAuth Client Open ID Connect Policy.",
            "properties": {
                "grantAccessSessionRevocationApi": {
                    "description": "Determines whether this client is allowed to access the Session Revocation API.",
                    "position": 30,
                    "type": "boolean"
                },
                "grantAccessSessionSessionManagementApi": {
                    "description": "Determines whether this client is allowed to access the Session Management API.",
                    "position": 40,
                    "type": "boolean"
                },
                "idTokenContentEncryptionAlgorithm": {
                    "description": "The JSON Web Encryption [JWE] content encryption algorithm for the ID Token.<br>AES_128_CBC_HMAC_SHA_256 - Composite AES-CBC-128 HMAC-SHA-256<br>AES_192_CBC_HMAC_SHA_384 - Composite AES-CBC-192 HMAC-SHA-384<br>AES_256_CBC_HMAC_SHA_512 - Composite AES-CBC-256 HMAC-SHA-512<br>AES_128_GCM - AES-GCM-128<br>AES_192_GCM - AES-GCM-192<br>AES_256_GCM - AES-GCM-256",
                    "enum": [
                        "AES_128_CBC_HMAC_SHA_256",
                        "AES_192_CBC_HMAC_SHA_384",
                        "AES_256_CBC_HMAC_SHA_512",
                        "AES_128_GCM",
                        "AES_192_GCM",
                        "AES_256_GCM"
                    ],
                    "position": 12,
                    "type": "string"
                },
                "idTokenEncryptionAlgorithm": {
                    "description": "The JSON Web Encryption [JWE] encryption algorithm used to encrypt the content encryption key for the ID Token.<br>DIR - Direct Encryption with symmetric key<br>A128KW - AES-128 Key Wrap<br>A192KW - AES-192 Key Wrap<br>A256KW - AES-256 Key Wrap<br>A128GCMKW - AES-GCM-128 key encryption<br>A192GCMKW - AES-GCM-192 key encryption<br>A256GCMKW - AES-GCM-256 key encryption<br>ECDH_ES - ECDH-ES<br>ECDH_ES_A128KW - ECDH-ES with AES-128 Key Wrap<br>ECDH_ES_A192KW - ECDH-ES with AES-192 Key Wrap<br>ECDH_ES_A256KW - ECDH-ES with AES-256 Key Wrap<br>RSA_OAEP - RSAES OAEP<br>RSA_OAEP_256 - RSAES OAEP using SHA-256 and MGF1 with SHA-256",
                    "enum": [
                        "DIR",
                        "A128KW",
                        "A192KW",
                        "A256KW",
                        "A128GCMKW",
                        "A192GCMKW",
                        "A256GCMKW",
                        "ECDH_ES",
                        "ECDH_ES_A128KW",
                        "ECDH_ES_A192KW",
                        "ECDH_ES_A256KW",
                        "RSA_OAEP",
                        "RSA_OAEP_256"
                    ],
                    "position": 11,
                    "type": "string"
                },
                "idTokenSigningAlgorithm": {
                    "description": "The JSON Web Signature [JWS] algorithm required for the ID Token.<br>NONE - No signing algorithm<br>HS256 - HMAC using SHA-256<br>HS384 - HMAC using SHA-384<br>HS512 - HMAC using SHA-512<br>RS256 - RSA using SHA-256<br>RS384 - RSA using SHA-384<br>RS512 - RSA using SHA-512<br>ES256 - ECDSA using P256 Curve and SHA-256<br>ES384 - ECDSA using P384 Curve and SHA-384<br>ES512 - ECDSA using P521 Curve and SHA-512<br>PS256 - RSASSA-PSS using SHA-256 and MGF1 padding with SHA-256<br>PS384 - RSASSA-PSS using SHA-384 and MGF1 padding with SHA-384<br>PS512 - RSASSA-PSS using SHA-512 and MGF1 padding with SHA-512<br>A null value will represent the default algorithm which is RS256.<br>RSASSA-PSS is only supported with SafeNet Luna, Thales nCipher or Java 11",
                    "enum": [
                        "NONE",
                        "HS256",
                        "HS384",
                        "HS512",
                        "RS256",
                        "RS384",
                        "RS512",
                        "ES256",
                        "ES384",
                        "ES512",
                        "PS256",
                        "PS384",
                        "PS512"
                    ],
                    "position": 10,
                    "type": "string"
                },
                "logoutUris": {
                    "description": "A list of client logout URI's which will be invoked when a user logs out through one of PingFederate's SLO endpoints.",
                    "items": {
                        "type": "string"
                    },
                    "position": 60,
                    "type": "array"
                },
                "pairwiseIdentifierUserType": {
                    "description": "Determines whether the subject identifier type is pairwise.",
                    "position": 70,
                    "type": "boolean"
                },
                "pingAccessLogoutCapable": {
                    "description": "Set this value to true if you wish to enable client application logout, and the client is PingAccess, or its logout endpoints follow the PingAccess path convention.",
                    "position": 50,
                    "type": "boolean"
                },
                "policyGroup": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "The Open ID Connect policy. A null value will represent the default policy group.",
                    "position": 20
                },
                "sectorIdentifierUri": {
                    "description": "The URI references a file with a single JSON array of Redirect URI and JWKS URL values.",
                    "position": 80,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ClientRegistrationOIDCPolicy": {
            "description": "Client Registration Open ID Connect Policy settings.",
            "properties": {
                "idTokenContentEncryptionAlgorithm": {
                    "description": "The JSON Web Encryption [JWE] content encryption algorithm for the ID Token.<br>AES_128_CBC_HMAC_SHA_256 - Composite AES-CBC-128 HMAC-SHA-256<br>AES_192_CBC_HMAC_SHA_384 - Composite AES-CBC-192 HMAC-SHA-384<br>AES_256_CBC_HMAC_SHA_512 - Composite AES-CBC-256 HMAC-SHA-512<br>AES_128_GCM - AES-GCM-128<br>AES_192_GCM - AES-GCM-192<br>AES_256_GCM - AES-GCM-256",
                    "enum": [
                        "AES_128_CBC_HMAC_SHA_256",
                        "AES_192_CBC_HMAC_SHA_384",
                        "AES_256_CBC_HMAC_SHA_512",
                        "AES_128_GCM",
                        "AES_192_GCM",
                        "AES_256_GCM"
                    ],
                    "position": 12,
                    "type": "string"
                },
                "idTokenEncryptionAlgorithm": {
                    "description": "The JSON Web Encryption [JWE] encryption algorithm used to encrypt the content encryption key for the ID Token.<br>DIR - Direct Encryption with symmetric key<br>A128KW - AES-128 Key Wrap<br>A192KW - AES-192 Key Wrap<br>A256KW - AES-256 Key Wrap<br>A128GCMKW - AES-GCM-128 key encryption<br>A192GCMKW - AES-GCM-192 key encryption<br>A256GCMKW - AES-GCM-256 key encryption<br>ECDH_ES - ECDH-ES<br>ECDH_ES_A128KW - ECDH-ES with AES-128 Key Wrap<br>ECDH_ES_A192KW - ECDH-ES with AES-192 Key Wrap<br>ECDH_ES_A256KW - ECDH-ES with AES-256 Key Wrap<br>RSA_OAEP - RSAES OAEP<br>RSA_OAEP_256 - RSAES OAEP using SHA-256 and MGF1 with SHA-256",
                    "enum": [
                        "DIR",
                        "A128KW",
                        "A192KW",
                        "A256KW",
                        "A128GCMKW",
                        "A192GCMKW",
                        "A256GCMKW",
                        "ECDH_ES",
                        "ECDH_ES_A128KW",
                        "ECDH_ES_A192KW",
                        "ECDH_ES_A256KW",
                        "RSA_OAEP",
                        "RSA_OAEP_256"
                    ],
                    "position": 11,
                    "type": "string"
                },
                "idTokenSigningAlgorithm": {
                    "description": "The JSON Web Signature [JWS] algorithm required for the ID Token.<br>NONE - No signing algorithm<br>HS256 - HMAC using SHA-256<br>HS384 - HMAC using SHA-384<br>HS512 - HMAC using SHA-512<br>RS256 - RSA using SHA-256<br>RS384 - RSA using SHA-384<br>RS512 - RSA using SHA-512<br>ES256 - ECDSA using P256 Curve and SHA-256<br>ES384 - ECDSA using P384 Curve and SHA-384<br>ES512 - ECDSA using P521 Curve and SHA-512<br>PS256 - RSASSA-PSS using SHA-256 and MGF1 padding with SHA-256<br>PS384 - RSASSA-PSS using SHA-384 and MGF1 padding with SHA-384<br>PS512 - RSASSA-PSS using SHA-512 and MGF1 padding with SHA-512<br>A null value will represent the default algorithm which is RS256.<br>RSASSA-PSS is only supported with SafeNet Luna, Thales nCipher or Java 11",
                    "enum": [
                        "NONE",
                        "HS256",
                        "HS384",
                        "HS512",
                        "RS256",
                        "RS384",
                        "RS512",
                        "ES256",
                        "ES384",
                        "ES512",
                        "PS256",
                        "PS384",
                        "PS512"
                    ],
                    "position": 10,
                    "type": "string"
                },
                "policyGroup": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "The Open ID Connect policy. A null value will represent the default policy group.",
                    "position": 20
                }
            },
            "type": "object"
        },
        "ClientRegistrationPolicies": {
            "description": "A collection of client registration policy plugin instances.",
            "properties": {
                "items": {
                    "description": "The list of client registration policy plugin instances.",
                    "items": {
                        "$ref": "#/definitions/ClientRegistrationPolicy"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ClientRegistrationPolicy": {
            "allOf": [
                {
                    "$ref": "#/definitions/PluginInstance"
                },
                {
                    "description": "A client registration policy plugin instance.",
                    "properties": {},
                    "type": "object"
                }
            ]
        },
        "ClientRegistrationPolicyDescriptor": {
            "allOf": [
                {
                    "$ref": "#/definitions/PluginDescriptor"
                },
                {
                    "description": "A client registration policy plugin descriptor.",
                    "properties": {},
                    "type": "object"
                }
            ]
        },
        "ClientRegistrationPolicyDescriptors": {
            "description": "A collection of client registration policy plugin descriptors.",
            "properties": {
                "items": {
                    "description": "The list of client registration policy plugin descriptors.",
                    "items": {
                        "$ref": "#/definitions/ClientRegistrationPolicyDescriptor"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ClientSecret": {
            "description": "Client Secret.",
            "properties": {
                "encryptedSecret": {
                    "description": "For GET requests, this field contains the encrypted client secret, if one exists.  For POST and PUT requests, if you wish to reuse the existing secret, this field should be passed back unchanged.",
                    "position": 20,
                    "type": "string"
                },
                "secondarySecrets": {
                    "description": "The list of secondary client secrets that are temporarily retained.",
                    "items": {
                        "$ref": "#/definitions/SecondarySecret"
                    },
                    "position": 30,
                    "type": "array"
                },
                "secret": {
                    "description": "Client secret for Basic Authentication.  To update the client secret, specify the plaintext value in this field.  This field will not be populated for GET requests.",
                    "position": 10,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ClientSettings": {
            "description": "The client settings.",
            "properties": {
                "clientMetadata": {
                    "description": "The client metadata.",
                    "items": {
                        "$ref": "#/definitions/ClientMetadata"
                    },
                    "position": 10,
                    "type": "array"
                },
                "dynamicClientRegistration": {
                    "$ref": "#/definitions/DynamicClientRegistration",
                    "description": "Dynamic client registration settings.",
                    "position": 20
                }
            },
            "type": "object"
        },
        "Clients": {
            "description": "A collection of OAuth client items.",
            "properties": {
                "items": {
                    "description": "The actual list of OAuth clients.",
                    "items": {
                        "$ref": "#/definitions/Client"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ClusterNode": {
            "description": "Describes a node in a clustered deployment of PingFederate.",
            "properties": {
                "address": {
                    "description": "The IP address and port this node is running on.",
                    "position": 10,
                    "type": "string"
                },
                "configurationTimestamp": {
                    "description": "The time stamp of the configuration data retrieved by this node.",
                    "format": "date-time",
                    "position": 70,
                    "type": "string"
                },
                "index": {
                    "description": "Index of the node within the cluster, or -1 if an index is not assigned.",
                    "format": "int32",
                    "position": 20,
                    "type": "integer"
                },
                "mode": {
                    "description": "The deployment mode of this node, from a clustering standpoint. CLUSTERED_DUAL is not supported.",
                    "enum": [
                        "CLUSTERED_ENGINE",
                        "CLUSTERED_CONSOLE",
                        "CLUSTERED_DUAL",
                        "STANDALONE"
                    ],
                    "position": 30,
                    "type": "string"
                },
                "nodeGroup": {
                    "description": "The node group for this node. This field is only populated if adaptive clustering is enabled.",
                    "position": 40,
                    "type": "string"
                },
                "nodeTags": {
                    "description": "The node tags for this node. This field is only populated for engine nodes.",
                    "position": 60,
                    "type": "string"
                },
                "replicationStatus": {
                    "description": "The replication status of the node.",
                    "enum": [
                        "RETRIEVING",
                        "APPLYING",
                        "FAILED",
                        "SUCCEEDED",
                        "OUT_OF_DATE"
                    ],
                    "position": 80,
                    "type": "string"
                },
                "version": {
                    "description": "The PingFederate version this node is running on.",
                    "position": 50,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ClusterStatus": {
            "description": "Information on cluster nodes and replication status.",
            "properties": {
                "lastConfigUpdateTime": {
                    "description": "Time when the configuration of this node was last updated.",
                    "format": "date-time",
                    "position": 20,
                    "type": "string"
                },
                "lastReplicationTime": {
                    "description": "Time when configuration changes were last replicated.",
                    "format": "date-time",
                    "position": 30,
                    "type": "string"
                },
                "mixedMode": {
                    "description": "Indicates whether there is more than one version of PingFederate in the cluster.",
                    "position": 50,
                    "type": "boolean"
                },
                "nodes": {
                    "description": "List of nodes in the cluster.",
                    "items": {
                        "$ref": "#/definitions/ClusterNode"
                    },
                    "position": 10,
                    "type": "array"
                },
                "replicationRequired": {
                    "description": "Indicates whether a replication is required to propagate config updates.",
                    "position": 40,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ConditionalIssuanceCriteriaEntry": {
            "description": "An issuance criterion that checks a source attribute against a particular condition and the expected value. If the condition is true then this issuance criterion passes, otherwise the criterion fails.",
            "properties": {
                "attributeName": {
                    "description": "The name of the attribute to use in this issuance criterion.",
                    "position": 20,
                    "type": "string"
                },
                "condition": {
                    "description": "The condition that will be applied to the source attribute's value and the expected value.",
                    "enum": [
                        "EQUALS",
                        "EQUALS_CASE_INSENSITIVE",
                        "EQUALS_DN",
                        "NOT_EQUAL",
                        "NOT_EQUAL_CASE_INSENSITIVE",
                        "NOT_EQUAL_DN",
                        "MULTIVALUE_CONTAINS",
                        "MULTIVALUE_CONTAINS_CASE_INSENSITIVE",
                        "MULTIVALUE_CONTAINS_DN",
                        "MULTIVALUE_DOES_NOT_CONTAIN",
                        "MULTIVALUE_DOES_NOT_CONTAIN_CASE_INSENSITIVE",
                        "MULTIVALUE_DOES_NOT_CONTAIN_DN"
                    ],
                    "position": 30,
                    "type": "string"
                },
                "errorResult": {
                    "description": "The error result to return if this issuance criterion fails. This error result will show up in the PingFederate server logs.",
                    "position": 50,
                    "type": "string"
                },
                "source": {
                    "$ref": "#/definitions/SourceTypeIdKey",
                    "description": "The source of the attribute.",
                    "position": 10
                },
                "value": {
                    "description": "The expected value of this issuance criterion.",
                    "position": 40,
                    "type": "string"
                }
            },
            "required": [
                "attributeName",
                "condition",
                "source",
                "value"
            ],
            "type": "object"
        },
        "ConfigField": {
            "description": "A plugin configuration field value.",
            "properties": {
                "encryptedValue": {
                    "description": "For encrypted or hashed fields, this attribute contains the encrypted representation of the field's value, if a value is defined. If you do not want to update the stored value, this attribute should be passed back unchanged.",
                    "position": 30,
                    "type": "string"
                },
                "inherited": {
                    "description": "Whether this field is inherited from its parent instance. If true, the value/encrypted value properties become read-only. The default value is false.",
                    "position": 40,
                    "type": "boolean"
                },
                "name": {
                    "description": "The name of the configuration field.",
                    "position": 10,
                    "type": "string"
                },
                "value": {
                    "description": "The value for the configuration field. For encrypted or hashed fields, GETs will not return this attribute. To update an encrypted or hashed field, specify the new value in this attribute.",
                    "position": 20,
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "ConfigOperation": {
            "description": "Model describing a list of configuration operations for a given resource type.",
            "properties": {
                "itemIds": {
                    "description": "The item ID's for the operation. This field only applies to the DELETE operation type.",
                    "items": {
                        "type": "string"
                    },
                    "position": 40,
                    "type": "array"
                },
                "items": {
                    "description": "The configuration items for the operation. This field only applies to the SAVE operation type.",
                    "items": {
                        "type": "object"
                    },
                    "position": 30,
                    "type": "array"
                },
                "operationType": {
                    "description": "The type of operation to be performed.",
                    "enum": [
                        "SAVE",
                        "DELETE"
                    ],
                    "position": 20,
                    "type": "string"
                },
                "resourceType": {
                    "description": "The identifier for the resource type the operation applies to.",
                    "position": 10,
                    "type": "string"
                },
                "subResource": {
                    "description": "The subresource for the operation.",
                    "position": 15,
                    "type": "string"
                }
            },
            "required": [
                "operationType",
                "resourceType"
            ],
            "type": "object"
        },
        "ConfigRow": {
            "description": "A row of configuration values for a plugin configuration table.",
            "properties": {
                "defaultRow": {
                    "description": "Whether this row is the default.",
                    "position": 20,
                    "type": "boolean"
                },
                "fields": {
                    "description": "The configuration fields in the row.",
                    "items": {
                        "$ref": "#/definitions/ConfigField"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "required": [
                "fields"
            ],
            "type": "object"
        },
        "ConfigStoreBundle": {
            "description": "List of all configuration settings in a bundle.",
            "properties": {
                "items": {
                    "description": "List of configuration settings.",
                    "items": {
                        "$ref": "#/definitions/ConfigStoreSetting"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ConfigStoreSetting": {
            "description": "Single configuration setting.",
            "properties": {
                "id": {
                    "description": "The id of the configuration setting.",
                    "position": 10,
                    "type": "string"
                },
                "listValue": {
                    "description": "The list of values for the configuration setting. This is used when the setting has a list of string values.",
                    "items": {
                        "type": "string"
                    },
                    "position": 30,
                    "type": "array"
                },
                "mapValue": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The map of key/value pairs for the configuration setting. This is used when the setting has a map of string keys and values.",
                    "position": 40,
                    "type": "object"
                },
                "stringValue": {
                    "description": "The value of the configuration setting. This is used when the setting has a single string value.",
                    "position": 20,
                    "type": "string"
                },
                "type": {
                    "description": "The type of configuration setting. This could be a single string, list of strings, or map of string keys and values.",
                    "enum": [
                        "STRING",
                        "LIST",
                        "MAP"
                    ],
                    "position": 50,
                    "type": "string"
                }
            },
            "required": [
                "id",
                "type"
            ],
            "type": "object"
        },
        "ConfigTable": {
            "description": "A plugin configuration table populated with values.",
            "properties": {
                "inherited": {
                    "description": "Whether this table is inherited from its parent instance. If true, the rows become read-only. The default value is false.",
                    "position": 30,
                    "type": "boolean"
                },
                "name": {
                    "description": "The name of the table.",
                    "position": 10,
                    "type": "string"
                },
                "rows": {
                    "description": "List of table rows.",
                    "items": {
                        "$ref": "#/definitions/ConfigRow"
                    },
                    "position": 20,
                    "type": "array"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "ConfigurationEncryptionKey": {
            "description": "Configuration Encryption Key.",
            "properties": {
                "creationDate": {
                    "description": "The creation date of the key.",
                    "format": "date-time",
                    "position": 20,
                    "type": "string"
                },
                "keyId": {
                    "description": "The id of the key.",
                    "position": 10,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ConfigurationEncryptionKeys": {
            "description": "Configuration Encryption Keys.",
            "properties": {
                "items": {
                    "description": "The list of Configuration Encryption Keys.",
                    "items": {
                        "$ref": "#/definitions/ConfigurationEncryptionKey"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "Connection": {
            "description": "Settings shared by SP-side and IdP-side connections.",
            "discriminator": "type",
            "properties": {
                "active": {
                    "description": "Specifies whether the connection is active and ready to process incoming requests. The default value is false.",
                    "position": 40,
                    "type": "boolean"
                },
                "additionalAllowedEntitiesConfiguration": {
                    "$ref": "#/definitions/AdditionalAllowedEntitiesConfiguration",
                    "description": "Additional allowed entities or issuers configuration. Currently only used in OIDC IdP (RP) connection.",
                    "position": 120
                },
                "baseUrl": {
                    "description": "The fully-qualified hostname and port on which your partner's federation deployment runs.",
                    "position": 50,
                    "type": "string"
                },
                "contactInfo": {
                    "$ref": "#/definitions/ContactInfo",
                    "description": "The contact information for this partner.",
                    "position": 90
                },
                "credentials": {
                    "$ref": "#/definitions/ConnectionCredentials",
                    "description": "The certificates and settings for encryption, signing, and signature verification. It is required for  SAMLx.x and WS-Fed Connections.",
                    "position": 80
                },
                "defaultVirtualEntityId": {
                    "description": "The default alternate entity ID that identifies the local server to this partner. It is required when virtualEntityIds is not empty and must be included in that list.",
                    "position": 60,
                    "type": "string"
                },
                "entityId": {
                    "description": "The partner's entity ID (connection ID) or issuer value (for OIDC Connections).",
                    "position": 20,
                    "type": "string"
                },
                "extendedProperties": {
                    "additionalProperties": {
                        "$ref": "#/definitions/ParameterValues"
                    },
                    "description": "Extended Properties allows to store additional information for IdP/SP Connections. The names of these extended properties should be defined in /extendedProperties.",
                    "position": 130,
                    "type": "object"
                },
                "id": {
                    "description": "The persistent, unique ID for the connection. It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned if not specified.",
                    "position": 10,
                    "type": "string"
                },
                "licenseConnectionGroup": {
                    "description": "The license connection group. If your PingFederate license is based on connection groups, each connection must be assigned to a group before it can be used.",
                    "position": 100,
                    "type": "string"
                },
                "loggingMode": {
                    "description": "The level of transaction logging applicable for this connection. Default is STANDARD.",
                    "enum": [
                        "NONE",
                        "STANDARD",
                        "ENHANCED",
                        "FULL"
                    ],
                    "position": 110,
                    "type": "string"
                },
                "metadataReloadSettings": {
                    "$ref": "#/definitions/ConnectionMetadataUrl",
                    "description": "Connection metadata automatic reload settings.",
                    "position": 75
                },
                "name": {
                    "description": "The connection name.",
                    "position": 30,
                    "type": "string"
                },
                "type": {
                    "description": "The type of this connection. Default is 'IDP'.",
                    "enum": [
                        "IDP",
                        "SP"
                    ],
                    "position": 5,
                    "type": "string"
                },
                "virtualEntityIds": {
                    "description": "List of alternate entity IDs that identifies the local server to this partner.",
                    "items": {
                        "type": "string"
                    },
                    "position": 70,
                    "type": "array"
                }
            },
            "required": [
                "entityId",
                "name"
            ],
            "type": "object"
        },
        "ConnectionCert": {
            "description": "A certificate used for signature verification or XML encryption.",
            "properties": {
                "activeVerificationCert": {
                    "description": "Indicates whether this is an active signature verification certificate.",
                    "position": 25,
                    "type": "boolean"
                },
                "certView": {
                    "$ref": "#/definitions/CertView",
                    "description": "Certificate details. This property is read-only and is always ignored on a POST or PUT.",
                    "position": 10
                },
                "encryptionCert": {
                    "description": "Indicates whether to use this cert to encrypt outgoing assertions. Only one certificate in the collection can have this flag set.",
                    "position": 50,
                    "type": "boolean"
                },
                "primaryVerificationCert": {
                    "description": "Indicates whether this is the primary signature verification certificate. Only one certificate in the collection can have this flag set.",
                    "position": 30,
                    "type": "boolean"
                },
                "secondaryVerificationCert": {
                    "description": "Indicates whether this is the secondary signature verification certificate. Only one certificate in the collection can have this flag set.",
                    "position": 40,
                    "type": "boolean"
                },
                "x509File": {
                    "$ref": "#/definitions/X509File",
                    "description": "The certificate data. This property must always be supplied on a POST or PUT.",
                    "position": 20
                }
            },
            "required": [
                "x509File"
            ],
            "type": "object"
        },
        "ConnectionCerts": {
            "description": "The certificates used for signature verification and XML encryption.",
            "properties": {
                "items": {
                    "description": "The actual list of certificates.",
                    "items": {
                        "$ref": "#/definitions/ConnectionCert"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ConnectionCredentials": {
            "description": "The certificates and settings for encryption, signing, and signature verification.",
            "properties": {
                "blockEncryptionAlgorithm": {
                    "description": "The algorithm used to encrypt assertions sent to this partner. AES_128, AES_256, AES_128_GCM, AES_192_GCM, AES_256_GCM and Triple_DES are also supported. Default is AES_128",
                    "position": 21,
                    "type": "string"
                },
                "certs": {
                    "description": "The certificates used for signature verification and XML encryption.",
                    "items": {
                        "$ref": "#/definitions/ConnectionCert"
                    },
                    "position": 20,
                    "type": "array"
                },
                "decryptionKeyPairRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "The ID of the primary key pair used to decrypt message content received from this partner. The ID of the key pair is also known as the alias and can be found by viewing the corresponding certificate under 'Signing & Decryption Keys & Certificates' in the PingFederate Administrative Console.",
                    "position": 40
                },
                "inboundBackChannelAuth": {
                    "$ref": "#/definitions/InboundBackChannelAuth",
                    "description": "The SOAP authentication method(s) to use when you receive a message using SOAP back channel.",
                    "position": 60
                },
                "keyTransportAlgorithm": {
                    "description": "The algorithm used to transport keys to this partner. RSA_OAEP and RSA_v15 are supported. Default is RSA_OAEP",
                    "position": 22,
                    "type": "string"
                },
                "outboundBackChannelAuth": {
                    "$ref": "#/definitions/OutboundBackChannelAuth",
                    "description": "The SOAP authentication method(s) to use when you send a message using SOAP back channel.",
                    "position": 50
                },
                "secondaryDecryptionKeyPairRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "The ID of the secondary key pair used to decrypt message content received from this partner. ",
                    "position": 41
                },
                "signingSettings": {
                    "$ref": "#/definitions/SigningSettings",
                    "description": "Settings related to the manner in which messages sent to the partner are digitally signed. Required for SP Connections.",
                    "position": 30
                },
                "verificationIssuerDN": {
                    "description": "If a verification Subject DN is provided, you can optionally restrict the issuer to a specific trusted CA by specifying its DN in this field.",
                    "position": 15,
                    "type": "string"
                },
                "verificationSubjectDN": {
                    "description": "If this property is set, the verification trust model is Anchored. The verification certificate must be signed by a trusted CA and included in the incoming message, and the subject DN of the expected certificate is specified in this property. If this property is not set, then a primary verification certificate must be specified in the certs array.",
                    "position": 10,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ConnectionGroupLicenseView": {
            "description": "Connection group license information.",
            "properties": {
                "connectionCount": {
                    "description": "Maximum number of connections permitted under the group.",
                    "format": "int32",
                    "position": 20,
                    "type": "integer"
                },
                "endDate": {
                    "description": "End date for the group.",
                    "format": "date-time",
                    "position": 40,
                    "type": "string"
                },
                "name": {
                    "description": "Group name from the license file.",
                    "position": 10,
                    "type": "string"
                },
                "startDate": {
                    "description": "Start date for the group.",
                    "format": "date-time",
                    "position": 30,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ConnectionMetadataUrl": {
            "description": "Configuration settings to enable automatic reload of partner's metadata.",
            "properties": {
                "enableAutoMetadataUpdate": {
                    "description": "Specifies whether the metadata of the connection will be automatically reloaded. The default value is true.",
                    "position": 20,
                    "type": "boolean"
                },
                "metadataUrlRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "ID of the saved Metadata URL.",
                    "position": 10
                }
            },
            "required": [
                "metadataUrlRef"
            ],
            "type": "object"
        },
        "ContactInfo": {
            "description": "Contact information.",
            "properties": {
                "company": {
                    "description": "Company name.",
                    "position": 10,
                    "type": "string"
                },
                "email": {
                    "description": "Contact email address.",
                    "position": 20,
                    "type": "string"
                },
                "firstName": {
                    "description": "Contact first name.",
                    "position": 30,
                    "type": "string"
                },
                "lastName": {
                    "description": "Contact last name.",
                    "position": 40,
                    "type": "string"
                },
                "phone": {
                    "description": "Contact phone number.",
                    "position": 50,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ContinuePolicyAction": {
            "allOf": [
                {
                    "$ref": "#/definitions/PolicyAction"
                },
                {
                    "description": "The continue selection action.",
                    "properties": {},
                    "type": "object"
                }
            ]
        },
        "ConvertMetadataRequest": {
            "description": "A request for converting SAML connection metadata into a JSON connection.",
            "properties": {
                "connectionType": {
                    "description": "The expected connection type to convert.",
                    "enum": [
                        "IDP",
                        "SP"
                    ],
                    "position": 10,
                    "type": "string"
                },
                "expectedEntityId": {
                    "description": "The entity ID of the connection to be obtained from the input SAML Metadata. Required if the SAML Metadata has more than one connection defined.",
                    "position": 25,
                    "type": "string"
                },
                "expectedProtocol": {
                    "description": "The expected browser-based SSO protocol to convert. In this case the protocol is restricted to SAML.",
                    "enum": [
                        "SAML20",
                        "SAML11",
                        "SAML10"
                    ],
                    "position": 20,
                    "type": "string"
                },
                "samlMetadata": {
                    "description": "The base-64 encoded XML SAML metadata.",
                    "position": 30,
                    "type": "string"
                },
                "templateConnection": {
                    "$ref": "#/definitions/Connection",
                    "description": "The template connection to overlay the metadata on.",
                    "position": 50
                },
                "verificationCertificate": {
                    "description": "The certificate to validate the metadata signature against. The certificate can be in PEM format or base-64 encoded DER format.",
                    "position": 40,
                    "type": "string"
                }
            },
            "required": [
                "connectionType",
                "expectedProtocol",
                "samlMetadata"
            ],
            "type": "object"
        },
        "ConvertMetadataResponse": {
            "description": "A response from converting SAML connection metadata into a JSON connection. It includes the converted connection and the authenticity information of the metadata.",
            "properties": {
                "certExpiration": {
                    "description": "The metadata certificate's expiry date.",
                    "format": "date-time",
                    "position": 50,
                    "type": "string"
                },
                "certSerialNumber": {
                    "description": "The metadata certificate's serial number.",
                    "position": 40,
                    "type": "string"
                },
                "certSubjectDn": {
                    "description": "The metadata certificate's subject DN.",
                    "position": 30,
                    "type": "string"
                },
                "certTrustStatus": {
                    "description": "The metadata certificate's trust status, i.e. If the partner's certificate can be trusted or not.",
                    "enum": [
                        "TRUSTED",
                        "NOT_TRUSTED"
                    ],
                    "position": 20,
                    "type": "string"
                },
                "connection": {
                    "$ref": "#/definitions/Connection",
                    "description": "The converted API connection.",
                    "position": 60
                },
                "signatureStatus": {
                    "description": "The metadata's digital signature status.",
                    "enum": [
                        "SIGNED",
                        "UNSIGNED"
                    ],
                    "position": 10,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CrlSettings": {
            "description": "CRL settings.",
            "properties": {
                "nextRetryMinsWhenNextUpdateInPast": {
                    "description": "Next retry on next update expiration in minutes. This value defaults to \"60\".",
                    "format": "int32",
                    "position": 50,
                    "type": "integer"
                },
                "nextRetryMinsWhenResolveFailed": {
                    "description": "Next retry on resolution failure in minutes. This value defaults to \"1440\".",
                    "format": "int32",
                    "position": 40,
                    "type": "integer"
                },
                "treatNonRetrievableCrlAsRevoked": {
                    "description": "Treat non retrievable CRL as revoked. This setting defaults to disabled.",
                    "position": 20,
                    "type": "boolean"
                },
                "verifyCrlSignature": {
                    "description": "Verify CRL signature. This setting defaults to enabled.",
                    "position": 30,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "CustomAttributeSource": {
            "allOf": [
                {
                    "$ref": "#/definitions/AttributeSource"
                },
                {
                    "description": "The configured settings used to look up attributes from a custom data store.",
                    "properties": {
                        "filterFields": {
                            "description": "The list of fields that can be used to filter a request to the custom data store.",
                            "items": {
                                "$ref": "#/definitions/FieldEntry"
                            },
                            "position": 1000,
                            "type": "array"
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "CustomDataStore": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataStore"
                },
                {
                    "description": "A custom data store.",
                    "properties": {
                        "configuration": {
                            "$ref": "#/definitions/PluginConfiguration",
                            "description": "Plugin instance configuration.",
                            "position": 50
                        },
                        "id": {
                            "description": "The persistent, unique ID for the data store. It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned if not specified.",
                            "position": 6,
                            "type": "string"
                        },
                        "maskAttributeValues": {
                            "description": "Whether attribute values should be masked in the log.",
                            "position": 7,
                            "type": "boolean"
                        },
                        "name": {
                            "description": "The plugin instance name.",
                            "position": 8,
                            "type": "string"
                        },
                        "parentRef": {
                            "$ref": "#/definitions/ResourceLink",
                            "description": "The reference to this plugin's parent instance. The parent reference is only accepted if the plugin type supports parent instances.<br>Note: This parent reference is required if this plugin instance is used as an overriding plugin (e.g. connection adapter overrides)",
                            "position": 40
                        },
                        "pluginDescriptorRef": {
                            "$ref": "#/definitions/ResourceLink",
                            "description": "Reference to the plugin descriptor for this instance. The plugin descriptor cannot be modified once the instance is created.<br>Note: Ignored when specifying a connection's adapter override.",
                            "position": 30
                        },
                        "type": {
                            "description": "The data store type.",
                            "enum": [
                                "LDAP",
                                "PING_ONE_LDAP_GATEWAY",
                                "JDBC",
                                "CUSTOM"
                            ],
                            "position": 5,
                            "type": "string"
                        }
                    },
                    "required": [
                        "configuration",
                        "name",
                        "pluginDescriptorRef",
                        "type"
                    ],
                    "type": "object"
                }
            ]
        },
        "CustomDataStoreDescriptor": {
            "allOf": [
                {
                    "$ref": "#/definitions/PluginDescriptor"
                },
                {
                    "description": "A custom data store descriptor.",
                    "properties": {},
                    "type": "object"
                }
            ]
        },
        "CustomDataStoreDescriptors": {
            "description": "A collection of custom data store descriptors.",
            "properties": {
                "items": {
                    "description": "The list of custom data store descriptors.",
                    "items": {
                        "$ref": "#/definitions/CustomDataStoreDescriptor"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "DataStore": {
            "description": "The set of attributes used to configure a data store.",
            "discriminator": "type",
            "properties": {
                "id": {
                    "description": "The persistent, unique ID for the data store. It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned if not specified.",
                    "position": 20,
                    "type": "string"
                },
                "maskAttributeValues": {
                    "description": "Whether attribute values should be masked in the log.",
                    "position": 30,
                    "type": "boolean"
                },
                "type": {
                    "description": "The data store type.",
                    "enum": [
                        "LDAP",
                        "PING_ONE_LDAP_GATEWAY",
                        "JDBC",
                        "CUSTOM"
                    ],
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "DataStoreAttribute": {
            "description": "The data store attribute.",
            "discriminator": "type",
            "properties": {
                "metadata": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The data store attribute metadata.",
                    "position": 30,
                    "type": "object"
                },
                "name": {
                    "description": "The data store attribute name.",
                    "position": 20,
                    "type": "string"
                },
                "type": {
                    "description": "The data store attribute type.",
                    "enum": [
                        "LDAP",
                        "PING_ONE_LDAP_GATEWAY",
                        "JDBC",
                        "CUSTOM"
                    ],
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "name",
                "type"
            ],
            "type": "object"
        },
        "DataStoreConfig": {
            "description": "Local identity profile data store.",
            "discriminator": "type",
            "properties": {
                "dataStoreMapping": {
                    "additionalProperties": {
                        "$ref": "#/definitions/DataStoreAttribute"
                    },
                    "description": "The data store mapping.",
                    "position": 30,
                    "type": "object"
                },
                "dataStoreRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the associated data store.",
                    "position": 20
                },
                "type": {
                    "description": "The data store config type.",
                    "enum": [
                        "LDAP",
                        "PING_ONE_LDAP_GATEWAY",
                        "JDBC",
                        "CUSTOM"
                    ],
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "dataStoreRef",
                "type"
            ],
            "type": "object"
        },
        "DataStoreRepository": {
            "description": "Jit Provisioning user repository data store.",
            "discriminator": "type",
            "properties": {
                "dataStoreRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the associated data store.",
                    "position": 20
                },
                "jitRepositoryAttributeMapping": {
                    "additionalProperties": {
                        "$ref": "#/definitions/AttributeFulfillmentValue"
                    },
                    "description": "The user repository attribute mapping.",
                    "position": 30,
                    "type": "object"
                },
                "type": {
                    "description": "The data store repository type.",
                    "enum": [
                        "LDAP",
                        "JDBC"
                    ],
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "dataStoreRef",
                "jitRepositoryAttributeMapping",
                "type"
            ],
            "type": "object"
        },
        "DataStores": {
            "description": "A collection of data stores.",
            "properties": {
                "items": {
                    "description": "The actual list of data stores.",
                    "items": {
                        "$ref": "#/definitions/DataStore"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "DateLocalIdentityField": {
            "allOf": [
                {
                    "$ref": "#/definitions/BaseDefaultValueLocalIdentityField"
                },
                {
                    "description": "A date type field.",
                    "properties": {},
                    "type": "object"
                }
            ]
        },
        "DecryptionKeys": {
            "description": "Decryption keys used to decrypt message content received from the partner.",
            "properties": {
                "primaryKeyRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "The ID of the primary decryption key pair. It is also known as the alias and can be found by viewing the corresponding certificate under 'Signing & Decryption Keys & Certificates' in the PingFederate Administrative Console.",
                    "position": 10
                },
                "secondaryKeyPairRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "The ID of the secondary key pair used to decrypt message content received from the partner.",
                    "position": 20
                }
            },
            "type": "object"
        },
        "DecryptionPolicy": {
            "description": "Defines what to decrypt in the browser-based SSO profile.",
            "properties": {
                "assertionEncrypted": {
                    "description": "Specify whether the incoming SAML assertion is encrypted for an IdP connection.",
                    "position": 10,
                    "type": "boolean"
                },
                "attributesEncrypted": {
                    "description": "Specify whether one or more incoming SAML attributes are encrypted for an IdP connection.",
                    "position": 20,
                    "type": "boolean"
                },
                "sloEncryptSubjectNameID": {
                    "description": "Encrypt the Subject Name ID in SLO messages to the IdP.",
                    "position": 40,
                    "type": "boolean"
                },
                "sloSubjectNameIDEncrypted": {
                    "description": "Allow encrypted Subject Name ID in SLO messages from the IdP.",
                    "position": 50,
                    "type": "boolean"
                },
                "subjectNameIdEncrypted": {
                    "description": "Specify whether the incoming Subject Name ID is encrypted for an IdP connection.",
                    "position": 30,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DonePolicyAction": {
            "allOf": [
                {
                    "$ref": "#/definitions/PolicyAction"
                },
                {
                    "description": "The done selection action.",
                    "properties": {},
                    "type": "object"
                }
            ]
        },
        "DropDownLocalIdentityField": {
            "allOf": [
                {
                    "$ref": "#/definitions/BaseSelectionLocalIdentityField"
                },
                {
                    "description": "A dropdown selection type field.",
                    "properties": {
                        "defaultValue": {
                            "description": "The default value for this field.",
                            "position": 100,
                            "type": "string"
                        },
                        "options": {
                            "description": "The list of options for this selection field.",
                            "items": {
                                "type": "string"
                            },
                            "position": 110,
                            "type": "array"
                        }
                    },
                    "required": [
                        "options"
                    ],
                    "type": "object"
                }
            ]
        },
        "DynamicClientRegistration": {
            "description": "Dynamic client registration settings.",
            "properties": {
                "allowClientDelete": {
                    "description": "Allow client deletion from dynamic client management.",
                    "position": 340,
                    "type": "boolean"
                },
                "allowedExclusiveScopes": {
                    "description": "The exclusive scopes to allow.",
                    "items": {
                        "type": "string"
                    },
                    "position": 40,
                    "type": "array"
                },
                "bypassActivationCodeConfirmationOverride": {
                    "description": "Indicates if the Activation Code Confirmation page should be bypassed if 'verification_url_complete' is used by the end user to authorize a device.",
                    "position": 260,
                    "type": "boolean"
                },
                "cibaPollingInterval": {
                    "description": "The minimum amount of time in seconds that the Client must wait between polling requests to the token endpoint. The default is 3 seconds.",
                    "format": "int32",
                    "position": 280,
                    "type": "integer"
                },
                "cibaRequireSignedRequests": {
                    "description": "Determines whether CIBA signed requests are required for this client.",
                    "position": 290,
                    "type": "boolean"
                },
                "clientCertIssuerRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Client TLS Certificate Issuer DN.",
                    "position": 160
                },
                "clientCertIssuerType": {
                    "description": "Client TLS Certificate Issuer Type.",
                    "enum": [
                        "NONE",
                        "TRUST_ANY",
                        "CERTIFICATE"
                    ],
                    "position": 150,
                    "type": "string"
                },
                "clientSecretRetentionPeriodOverride": {
                    "description": "The length of time in minutes that client secrets will be retained as secondary secrets after secret change. The default value is 0, which will disable secondary client secret retention. This value will override the Client Secret Retention Period value on the Authorization Server Settings.",
                    "format": "int32",
                    "position": 390,
                    "type": "integer"
                },
                "clientSecretRetentionPeriodType": {
                    "description": "Use OVERRIDE_SERVER_DEFAULT to override the Client Secret Retention Period value on the Authorization Server Settings. SERVER_DEFAULT will default to the Client Secret Retention Period value on the Authorization Server Setting. Defaults to SERVER_DEFAULT.",
                    "position": 380,
                    "type": "string"
                },
                "defaultAccessTokenManagerRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "The default access token manager for this client.",
                    "position": 70
                },
                "deviceFlowSettingType": {
                    "description": "Allows an administrator to override the Device Authorization Settings set globally for the OAuth AS. Defaults to SERVER_DEFAULT.",
                    "enum": [
                        "SERVER_DEFAULT",
                        "OVERRIDE_SERVER_DEFAULT"
                    ],
                    "position": 220,
                    "type": "string"
                },
                "devicePollingIntervalOverride": {
                    "description": "The amount of time client should wait between polling requests, in seconds.",
                    "format": "int32",
                    "position": 250,
                    "type": "integer"
                },
                "disableRegistrationAccessTokens": {
                    "description": "Disable registration access tokens. Local standards may mandate different registration access token requirements. If applicable, implement custom validation and enforcement rules using the DynamicClientRegistrationPlugin interface from the PingFederate SDK, configure the client registration policies (policyRefs), and set this property (disableRegistrationAccessTokens) to true. CAUTION: When the disableRegistrationAccessTokens property is set to true, all clients, not just the ones created using the Dynamic Client Registration protocol, are vulnerable to unrestricted retrievals, updates (including modifications to the client authentication scheme and redirect URIs), and deletes at the /as/clients.oauth2 endpoint unless one or more client registration policies are in place to protect against unauthorized attempts.",
                    "position": 350,
                    "type": "boolean"
                },
                "enforceReplayPrevention": {
                    "description": "Enforce replay prevention.",
                    "position": 50,
                    "type": "boolean"
                },
                "initialAccessTokenScope": {
                    "description": "The initial access token to prevent unwanted client registrations.",
                    "position": 10,
                    "type": "string"
                },
                "oidcPolicy": {
                    "$ref": "#/definitions/ClientRegistrationOIDCPolicy",
                    "description": "Open ID Connect Policy settings.  This is included in the message only when OIDC is enabled.",
                    "position": 200
                },
                "pendingAuthorizationTimeoutOverride": {
                    "description": "The 'device_code' and 'user_code' timeout, in seconds.",
                    "format": "int32",
                    "position": 240,
                    "type": "integer"
                },
                "persistentGrantExpirationTime": {
                    "description": "The persistent grant expiration time.",
                    "format": "int64",
                    "position": 100,
                    "type": "integer"
                },
                "persistentGrantExpirationTimeUnit": {
                    "description": "The persistent grant expiration time unit.",
                    "enum": [
                        "MINUTES",
                        "DAYS",
                        "HOURS"
                    ],
                    "position": 110,
                    "type": "string"
                },
                "persistentGrantExpirationType": {
                    "description": "Allows an administrator to override the Persistent Grant Lifetime set globally for the OAuth AS. Defaults to SERVER_DEFAULT.",
                    "enum": [
                        "INDEFINITE_EXPIRY",
                        "SERVER_DEFAULT",
                        "OVERRIDE_SERVER_DEFAULT"
                    ],
                    "position": 90,
                    "type": "string"
                },
                "persistentGrantIdleTimeout": {
                    "description": "The persistent grant idle timeout.",
                    "format": "int64",
                    "position": 130,
                    "type": "integer"
                },
                "persistentGrantIdleTimeoutTimeUnit": {
                    "description": "The persistent grant idle timeout time unit.",
                    "enum": [
                        "MINUTES",
                        "DAYS",
                        "HOURS"
                    ],
                    "position": 140,
                    "type": "string"
                },
                "persistentGrantIdleTimeoutType": {
                    "description": "Allows an administrator to override the Persistent Grant Idle Timeout set globally for the OAuth AS. Defaults to SERVER_DEFAULT.",
                    "enum": [
                        "INDEFINITE_EXPIRY",
                        "SERVER_DEFAULT",
                        "OVERRIDE_SERVER_DEFAULT"
                    ],
                    "position": 120,
                    "type": "string"
                },
                "policyRefs": {
                    "description": "The client registration policies.",
                    "items": {
                        "$ref": "#/definitions/ResourceLink"
                    },
                    "position": 210,
                    "type": "array"
                },
                "refreshRolling": {
                    "description": "Use ROLL or DONT_ROLL to override the Roll Refresh Token Values setting on the Authorization Server Settings. SERVER_DEFAULT will default to the Roll Refresh Token Values setting on the Authorization Server Setting screen. Defaults to SERVER_DEFAULT.",
                    "enum": [
                        "SERVER_DEFAULT",
                        "DONT_ROLL",
                        "ROLL"
                    ],
                    "position": 170,
                    "type": "string"
                },
                "refreshTokenRollingGracePeriod": {
                    "description": "The grace period that a rolled refresh token remains valid in seconds.",
                    "format": "int32",
                    "position": 361,
                    "type": "integer"
                },
                "refreshTokenRollingGracePeriodType": {
                    "description": "When specified, it overrides the global Refresh Token Grace Period defined in the Authorization Server Settings. The default value is SERVER_DEFAULT",
                    "enum": [
                        "SERVER_DEFAULT",
                        "OVERRIDE_SERVER_DEFAULT"
                    ],
                    "position": 360,
                    "type": "string"
                },
                "refreshTokenRollingInterval": {
                    "description": "The minimum interval to roll refresh tokens, in hours. This value will override the Refresh Token Rolling Interval Value on the Authorization Server Settings.",
                    "format": "int64",
                    "position": 190,
                    "type": "integer"
                },
                "refreshTokenRollingIntervalType": {
                    "description": "Use OVERRIDE_SERVER_DEFAULT to override the Refresh Token Rolling Interval value on the Authorization Server Settings. SERVER_DEFAULT will default to the Refresh Token Rolling Interval value on the Authorization Server Setting. Defaults to SERVER_DEFAULT.",
                    "enum": [
                        "SERVER_DEFAULT",
                        "OVERRIDE_SERVER_DEFAULT"
                    ],
                    "position": 180,
                    "type": "string"
                },
                "requestPolicyRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "The CIBA request policy.",
                    "position": 300
                },
                "requireJwtSecuredAuthorizationResponseMode": {
                    "description": "Determines whether JWT Secured authorization response mode is required when initiating an authorization request. The default is false.",
                    "position": 400,
                    "type": "boolean"
                },
                "requireProofKeyForCodeExchange": {
                    "description": "Determines whether Proof Key for Code Exchange (PKCE) is required for the dynamically created client.",
                    "position": 270,
                    "type": "boolean"
                },
                "requireSignedRequests": {
                    "description": "Require signed requests.",
                    "position": 60,
                    "type": "boolean"
                },
                "restrictCommonScopes": {
                    "description": "Restrict common scopes.",
                    "position": 20,
                    "type": "boolean"
                },
                "restrictToDefaultAccessTokenManager": {
                    "description": "Determines whether the client is restricted to using only its default access token manager. The default is false.",
                    "position": 80,
                    "type": "boolean"
                },
                "restrictedCommonScopes": {
                    "description": "The common scopes to restrict.",
                    "items": {
                        "type": "string"
                    },
                    "position": 30,
                    "type": "array"
                },
                "retainClientSecret": {
                    "description": "Temporarily retain the old client secret on client secret change.",
                    "position": 370,
                    "type": "boolean"
                },
                "rotateClientSecret": {
                    "description": "Rotate registration access token on dynamic client management requests.",
                    "position": 320,
                    "type": "boolean"
                },
                "rotateRegistrationAccessToken": {
                    "description": "Rotate client secret on dynamic client management requests.",
                    "position": 330,
                    "type": "boolean"
                },
                "tokenExchangeProcessorPolicyRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "The Token Exchange Processor policy.",
                    "position": 310
                },
                "userAuthorizationUrlOverride": {
                    "description": "The URL is used as 'verification_url' and 'verification_url_complete' values in a Device Authorization request.",
                    "position": 230,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "EmailLocalIdentityField": {
            "allOf": [
                {
                    "$ref": "#/definitions/LocalIdentityField"
                },
                {
                    "description": "An email type field.",
                    "properties": {},
                    "type": "object"
                }
            ]
        },
        "EmailServerSettings": {
            "description": "Email server configuration settings.",
            "properties": {
                "emailServer": {
                    "description": "The IP address or hostname of your email server.",
                    "position": 20,
                    "type": "string"
                },
                "enableUtf8MessageHeaders": {
                    "description": "Only set this flag to true if the email server supports UTF-8 characters in message headers. Otherwise, this is defaulted to false.",
                    "position": 80,
                    "type": "boolean"
                },
                "encryptedPassword": {
                    "description": "For GET requests, this field contains the encrypted password, if one exists.  For POST and PUT requests, if you wish to reuse the existing password, this field should be passed back unchanged.",
                    "position": 110,
                    "type": "string"
                },
                "password": {
                    "description": "User password.  To update the password, specify the plaintext value in this field.  This field will not be populated for GET requests.",
                    "position": 100,
                    "type": "string"
                },
                "port": {
                    "description": "The SMTP port on your email server. Allowable values: 1 - 65535. The default value is 25.",
                    "format": "int32",
                    "position": 30,
                    "type": "integer"
                },
                "retryAttempts": {
                    "description": "The number of times PingFederate tries to resend an email upon unsuccessful delivery. The default value is 2.",
                    "format": "int32",
                    "position": 55,
                    "type": "integer"
                },
                "retryDelay": {
                    "description": "The number of minutes PingFederate waits before the next retry attempt. The default value is 2.",
                    "format": "int32",
                    "position": 56,
                    "type": "integer"
                },
                "sourceAddr": {
                    "description": "The email address that appears in the 'From' header line in email messages generated by PingFederate.  The address must be in valid format but need not be set up on your system.",
                    "position": 10,
                    "type": "string"
                },
                "sslPort": {
                    "description": "The secure SMTP port on your email server. This field is not active unless Use SSL is enabled. Allowable values: 1 - 65535. The default value is  465.",
                    "format": "int32",
                    "position": 40,
                    "type": "integer"
                },
                "timeout": {
                    "description": "The amount of time in seconds that PingFederate will wait before it times out connecting to the SMTP server. Allowable values: 0 - 3600. The default value is 30.",
                    "format": "int32",
                    "position": 50,
                    "type": "integer"
                },
                "useDebugging": {
                    "description": "Turns on detailed error messages for the PingFederate server log to help troubleshoot any problems.",
                    "position": 85,
                    "type": "boolean"
                },
                "useSSL": {
                    "description": "Requires the use of SSL/TLS on the port specified by 'sslPort'. If this option is enabled, it overrides the 'useTLS' option.",
                    "position": 60,
                    "type": "boolean"
                },
                "useTLS": {
                    "description": "Requires the use of the STARTTLS protocol on the port specified by 'port'.",
                    "position": 70,
                    "type": "boolean"
                },
                "username": {
                    "description": "Authorized email username. Required if the password is provided.",
                    "position": 90,
                    "type": "string"
                },
                "verifyHostname": {
                    "description": "If useSSL or useTLS is enabled, this flag determines whether the email server hostname is verified against the server's SMTPS certificate.",
                    "position": 75,
                    "type": "boolean"
                }
            },
            "required": [
                "emailServer",
                "port",
                "sourceAddr"
            ],
            "type": "object"
        },
        "EmailVerificationConfig": {
            "description": "A local identity email verification configuration.",
            "properties": {
                "allowedOtpCharacterSet": {
                    "description": "The allowed character set used to generate the OTP. The default is 23456789BCDFGHJKMNPQRSTVWXZbcdfghjkmnpqrstvwxz.<br>Note: Only applicable if EmailVerificationType is OTP.",
                    "position": 90,
                    "type": "string"
                },
                "emailVerificationEnabled": {
                    "description": "Whether the email ownership verification is enabled.",
                    "position": 10,
                    "type": "boolean"
                },
                "emailVerificationErrorTemplateName": {
                    "description": "The template name for email verification error.  The default is local.identity.email.verification.error.html.",
                    "position": 50,
                    "type": "string"
                },
                "emailVerificationOtpTemplateName": {
                    "description": "The template name for email verification OTP verification.  The default is local.identity.email.verification.otp.html.<br>Note: Only applicable if EmailVerificationType is OTP.",
                    "position": 110,
                    "type": "string"
                },
                "emailVerificationSentTemplateName": {
                    "description": "The template name for email verification sent. The default is local.identity.email.verification.sent.html.<br>Note:Only applicable if EmailVerificationType is OTL.",
                    "position": 30,
                    "type": "string"
                },
                "emailVerificationSuccessTemplateName": {
                    "description": "The template name for email verification success. The default is local.identity.email.verification.success.html.",
                    "position": 40,
                    "type": "string"
                },
                "emailVerificationType": {
                    "description": "Email Verification Type.",
                    "enum": [
                        "OTP",
                        "OTL"
                    ],
                    "position": 60,
                    "type": "string"
                },
                "fieldForEmailToVerify": {
                    "description": "Field used for email ownership verification.<br>Note: Not required when emailVerificationEnabled is set to false.",
                    "position": 130,
                    "type": "string"
                },
                "fieldStoringVerificationStatus": {
                    "description": "Field used for storing email verification status.<br>Note: Not required when emailVerificationEnabled is set to false.",
                    "position": 140,
                    "type": "string"
                },
                "notificationPublisherRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the associated notification publisher.",
                    "position": 150
                },
                "otlTimeToLive": {
                    "description": "Field used OTL time to live. The default is 1440.<br>Note: Only applicable if EmailVerificationType is OTL.",
                    "format": "int32",
                    "position": 120,
                    "type": "integer"
                },
                "otpLength": {
                    "description": "The OTP length generated for email verification. The default is 8.<br>Note: Only applicable if EmailVerificationType is OTP.",
                    "format": "int32",
                    "position": 70,
                    "type": "integer"
                },
                "otpRetryAttempts": {
                    "description": "The number of OTP retry attempts for email verification. The default is 3.<br>Note: Only applicable if EmailVerificationType is OTP.",
                    "format": "int32",
                    "position": 80,
                    "type": "integer"
                },
                "otpTimeToLive": {
                    "description": "Field used OTP time to live. The default is 15.<br>Note: Only applicable if EmailVerificationType is OTP.",
                    "format": "int32",
                    "position": 100,
                    "type": "integer"
                },
                "requireVerifiedEmail": {
                    "description": "Whether the user must verify their email address before they can complete a single sign-on transaction. The default is false.",
                    "position": 160,
                    "type": "boolean"
                },
                "requireVerifiedEmailTemplateName": {
                    "description": "The template to render when the user must verify their email address before they can complete a single sign-on transaction. The default is local.identity.email.verification.required.html.<br>Note:Only applicable if EmailVerificationType is OTL and requireVerifiedEmail is true.",
                    "position": 170,
                    "type": "string"
                },
                "verifyEmailTemplateName": {
                    "description": "The template name for verify email. The default is message-template-email-ownership-verification.html.",
                    "position": 20,
                    "type": "string"
                }
            },
            "required": [
                "fieldForEmailToVerify",
                "fieldStoringVerificationStatus"
            ],
            "type": "object"
        },
        "EncryptionPolicy": {
            "description": "Defines what to encrypt in the browser-based SSO profile.",
            "properties": {
                "encryptAssertion": {
                    "description": "Whether the outgoing SAML assertion will be encrypted.",
                    "position": 10,
                    "type": "boolean"
                },
                "encryptSloSubjectNameId": {
                    "description": "Encrypt the name-identifier attribute in outbound SLO messages.  This can be set if the name id is encrypted.",
                    "position": 30,
                    "type": "boolean"
                },
                "encryptedAttributes": {
                    "description": "The list of outgoing SAML assertion attributes that will be encrypted. The 'encryptAssertion' property takes precedence over this.",
                    "items": {
                        "type": "string"
                    },
                    "position": 20,
                    "type": "array"
                },
                "sloSubjectNameIDEncrypted": {
                    "description": "Allow the encryption of the name-identifier attribute for inbound SLO messages. This can be set if SP initiated SLO is enabled.",
                    "position": 40,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "Entity": {
            "properties": {
                "entityDescription": {
                    "description": "Entity description.",
                    "position": 100,
                    "type": "string"
                },
                "entityId": {
                    "description": "Unique entity identifier.",
                    "position": 50,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ExportMetadataRequest": {
            "description": "The request for exporting a SAML connection's metadata file for a partner.",
            "properties": {
                "connectionId": {
                    "description": "The ID of the connection to export.",
                    "position": 20,
                    "type": "string"
                },
                "connectionType": {
                    "description": "The type of connection to export.",
                    "enum": [
                        "IDP",
                        "SP"
                    ],
                    "position": 10,
                    "type": "string"
                },
                "signingSettings": {
                    "$ref": "#/definitions/BaseSigningSettings",
                    "description": "The signing settings to sign the metadata with. If null, the metadata will not be signed",
                    "position": 40
                },
                "useSecondaryPortForSoap": {
                    "description": "If PingFederate's secondary SSL port is configured and you want to use it for the SOAP channel, set to true. If client-certificate authentication is configured for the SOAP channel, the secondary port is required and this must be set to true.",
                    "position": 50,
                    "type": "boolean"
                },
                "virtualHostName": {
                    "description": "The virtual host name to be used as the base url.",
                    "position": 60,
                    "type": "string"
                },
                "virtualServerId": {
                    "description": "The virtual server ID to export the metadata with. If null, the connection's default will be used.",
                    "position": 30,
                    "type": "string"
                }
            },
            "required": [
                "connectionId",
                "connectionType"
            ],
            "type": "object"
        },
        "ExpressionIssuanceCriteriaEntry": {
            "description": "An issuance criterion that uses a Boolean return value from an OGNL expression to determine whether or not it passes.",
            "properties": {
                "errorResult": {
                    "description": "The error result to return if this issuance criterion fails. This error result will show up in the PingFederate server logs.",
                    "position": 50,
                    "type": "string"
                },
                "expression": {
                    "description": "The OGNL expression to evaluate.",
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "expression"
            ],
            "type": "object"
        },
        "ExtendedProperties": {
            "description": "A collection of Extended Properties definitions.",
            "properties": {
                "items": {
                    "description": "The actual list of Extended Property definitions.",
                    "items": {
                        "$ref": "#/definitions/ExtendedProperty"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ExtendedProperty": {
            "description": "Extended Property definition that allows to store additional information about IdP/SP Connections and OAuth Clients.",
            "properties": {
                "description": {
                    "description": "The property description.",
                    "position": 20,
                    "type": "string"
                },
                "multiValued": {
                    "description": "Indicates whether the property should allow multiple values.",
                    "position": 30,
                    "type": "boolean"
                },
                "name": {
                    "description": "The property name.",
                    "position": 10,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "FederationInfo": {
            "description": "Federation Info.",
            "properties": {
                "autoConnectEntityId": {
                    "description": "This property has been deprecated and no longer used",
                    "position": 30,
                    "type": "string"
                },
                "baseUrl": {
                    "description": "The fully qualified host name, port, and path (if applicable) on which the PingFederate server runs.",
                    "position": 10,
                    "type": "string"
                },
                "saml1xIssuerId": {
                    "description": "This ID identifies your federation server for SAML 1.x transactions. As with SAML 2.0, it is usually defined as an organization's URL or a DNS address. The SourceID used for artifact resolution is derived from this ID using SHA1.",
                    "position": 40,
                    "type": "string"
                },
                "saml1xSourceId": {
                    "description": "If supplied, the Source ID value entered here is used for SAML 1.x, instead of being derived from the SAML 1.x Issuer/Audience.",
                    "position": 50,
                    "type": "string"
                },
                "saml2EntityId": {
                    "description": "This ID defines your organization as the entity operating the server for SAML 2.0 transactions. It is usually defined as an organization's URL or a DNS address; for example: pingidentity.com. The SAML SourceID used for artifact resolution is derived from this ID using SHA1.",
                    "position": 20,
                    "type": "string"
                },
                "wsfedRealm": {
                    "description": "The URI of the realm associated with the PingFederate server. A realm represents a single unit of security administration or trust.",
                    "position": 60,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "FieldConfig": {
            "description": "A local identity profile field configuration.",
            "properties": {
                "fields": {
                    "description": "The field configuration for the local identity profile.",
                    "items": {
                        "$ref": "#/definitions/LocalIdentityField"
                    },
                    "position": 10,
                    "type": "array"
                },
                "stripSpaceFromUniqueField": {
                    "description": "Strip leading/trailing spaces from unique ID field. Default is true.",
                    "position": 20,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "FieldDescriptor": {
            "description": "Describes a plugin configuration field.",
            "discriminator": "type",
            "properties": {
                "advanced": {
                    "description": "Whether this is an advanced field or not.",
                    "position": 50,
                    "type": "boolean"
                },
                "defaultValue": {
                    "description": "Default value of the field.",
                    "position": 40,
                    "type": "string"
                },
                "description": {
                    "description": "Description of the field.",
                    "position": 30,
                    "type": "string"
                },
                "label": {
                    "description": "Label of the field to be displayed in the administrative console.",
                    "position": 70,
                    "type": "string"
                },
                "name": {
                    "description": "Name of the field.",
                    "position": 20,
                    "type": "string"
                },
                "required": {
                    "description": "Whether a value is required for this field or not.",
                    "position": 60,
                    "type": "boolean"
                },
                "type": {
                    "description": "The type of field descriptor.",
                    "enum": [
                        "RADIO_GROUP",
                        "SELECT",
                        "FILTERABLE_SELECT",
                        "CHECK_BOX",
                        "TEXT_AREA",
                        "TEXT",
                        "UPLOAD_FILE",
                        "HASHED_TEXT"
                    ],
                    "position": 10,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "FieldEntry": {
            "description": "A simple name value pair to represent a field entry.",
            "properties": {
                "name": {
                    "description": "The name of this field.",
                    "type": "string"
                },
                "value": {
                    "description": "The value of this field. Whether or not the value is required will be determined by plugin validation checks.",
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object",
            "xml": {
                "name": "FieldEntry"
            }
        },
        "FragmentPolicyAction": {
            "allOf": [
                {
                    "$ref": "#/definitions/PolicyAction"
                },
                {
                    "description": "A authentication policy fragment selection action.",
                    "properties": {
                        "attributeRules": {
                            "$ref": "#/definitions/AttributeRules",
                            "description": "The authentication policy rules."
                        },
                        "fragment": {
                            "$ref": "#/definitions/ResourceLink",
                            "description": "Reference to the associated authentication fragment.",
                            "position": 30
                        },
                        "fragmentMapping": {
                            "$ref": "#/definitions/AttributeMapping",
                            "description": "The fragment mapping for attributes to be passed into the authentication fragment.",
                            "position": 40
                        }
                    },
                    "required": [
                        "fragment"
                    ],
                    "type": "object"
                }
            ]
        },
        "GeneralSettings": {
            "description": "General settings.",
            "properties": {
                "datastoreValidationIntervalSecs": {
                    "description": "Determines how long (in seconds) the result of testing a datastore connection is cached. The default is 300.",
                    "format": "int32",
                    "position": 40,
                    "type": "integer"
                },
                "disableAutomaticConnectionValidation": {
                    "description": "Boolean that disables automatic connection validation when set to true. The default is false.",
                    "position": 10,
                    "type": "boolean"
                },
                "idpConnectionTransactionLoggingOverride": {
                    "description": "Determines the level of transaction logging for all identity provider connections. The default is DONT_OVERRIDE, in which case the logging level will be determined by each individual IdP connection",
                    "enum": [
                        "DONT_OVERRIDE",
                        "NONE",
                        "FULL",
                        "STANDARD",
                        "ENHANCED"
                    ],
                    "position": 20,
                    "type": "string"
                },
                "requestHeaderForCorrelationId": {
                    "description": "HTTP request header for retrieving correlation ID.",
                    "position": 50,
                    "type": "string"
                },
                "spConnectionTransactionLoggingOverride": {
                    "description": "Determines the level of transaction logging for all service provider connections. The default is DONT_OVERRIDE, in which case the logging level will be determined by each individual SP connection",
                    "enum": [
                        "DONT_OVERRIDE",
                        "NONE",
                        "FULL",
                        "STANDARD",
                        "ENHANCED"
                    ],
                    "position": 30,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GlobalAuthenticationSessionPolicy": {
            "description": "The global policy for authentication sessions.",
            "properties": {
                "enableSessions": {
                    "description": "Determines whether authentication sessions are enabled globally.",
                    "position": 10,
                    "type": "boolean"
                },
                "hashUniqueUserKeyAttribute": {
                    "description": "Determines whether to hash the value of the unique user key attribute.",
                    "position": 14,
                    "type": "boolean"
                },
                "idleTimeoutDisplayUnit": {
                    "description": "The display unit for the idle timeout period in the PingFederate administrative console. When the display unit is HOURS or DAYS, the timeout value in minutes must correspond to a whole number value for the specified unit.",
                    "enum": [
                        "MINUTES",
                        "HOURS",
                        "DAYS"
                    ],
                    "position": 25,
                    "type": "string"
                },
                "idleTimeoutMins": {
                    "description": "The idle timeout period, in minutes. If set to -1, the idle timeout will be set to the maximum timeout. The default is 60.",
                    "format": "int32",
                    "position": 20,
                    "type": "integer"
                },
                "maxTimeoutDisplayUnit": {
                    "description": "The display unit for the maximum timeout period in the PingFederate administrative console. When the display unit is HOURS or DAYS, the timeout value in minutes must correspond to a whole number value for the specified unit.",
                    "enum": [
                        "MINUTES",
                        "HOURS",
                        "DAYS"
                    ],
                    "position": 35,
                    "type": "string"
                },
                "maxTimeoutMins": {
                    "description": "The maximum timeout period, in minutes. If set to -1, sessions do not expire. The default is 480.",
                    "format": "int32",
                    "position": 30,
                    "type": "integer"
                },
                "persistentSessions": {
                    "description": "Determines whether authentication sessions are persistent by default. Persistent sessions are linked to a persistent cookie and stored in a data store. This field is ignored if enableSessions is false.",
                    "position": 12,
                    "type": "boolean"
                }
            },
            "required": [
                "enableSessions"
            ],
            "type": "object"
        },
        "GroupAttribute": {
            "description": "The definition of a group attribute in a group attribute contract.",
            "properties": {
                "name": {
                    "description": "The name of this attribute.",
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "GroupMembershipDetection": {
            "description": "Settings to detect group memberships.",
            "properties": {
                "groupMemberAttributeName": {
                    "description": "The name of the attribute that represents group members in a group, also known as group member attribute.",
                    "position": 20,
                    "type": "string"
                },
                "memberOfGroupAttributeName": {
                    "description": "The name of the attribute that indicates the entity is a member of a group, also known as member of attribute.",
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "groupMemberAttributeName"
            ],
            "type": "object"
        },
        "Groups": {
            "description": "Group creation and read configuration.",
            "properties": {
                "readGroups": {
                    "$ref": "#/definitions/ReadGroups",
                    "description": "Configuration to lookup group info within the user repository and respond to incoming SCIM requests.",
                    "position": 20
                },
                "writeGroups": {
                    "$ref": "#/definitions/WriteGroups",
                    "description": "Configuration to create a group within the user repository.",
                    "position": 10
                }
            },
            "required": [
                "readGroups",
                "writeGroups"
            ],
            "type": "object"
        },
        "HashedTextFieldDescriptor": {
            "allOf": [
                {
                    "$ref": "#/definitions/FieldDescriptor"
                },
                {
                    "description": "A text field that will contain a secure salted hash.",
                    "properties": {
                        "size": {
                            "description": "The size of the text field.",
                            "format": "int32",
                            "position": 100,
                            "type": "integer"
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "HiddenLocalIdentityField": {
            "allOf": [
                {
                    "$ref": "#/definitions/LocalIdentityField"
                },
                {
                    "description": "A hidden selection type field.",
                    "properties": {},
                    "type": "object"
                }
            ]
        },
        "IdentityHintAttribute": {
            "description": "An attribute for the ciba request policy's identity hint attribute contract.",
            "properties": {
                "name": {
                    "description": "The name of this attribute.",
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "IdentityHintContract": {
            "description": "A set of attributes exposed by request policy contract.",
            "properties": {
                "coreAttributes": {
                    "description": "A list of required identity hint contract attributes.",
                    "items": {
                        "$ref": "#/definitions/IdentityHintAttribute"
                    },
                    "position": 10,
                    "type": "array"
                },
                "extendedAttributes": {
                    "description": "A list of additional identity hint contract attributes.",
                    "items": {
                        "$ref": "#/definitions/IdentityHintAttribute"
                    },
                    "position": 20,
                    "type": "array"
                }
            },
            "required": [
                "coreAttributes"
            ],
            "type": "object"
        },
        "IdentityStoreInboundProvisioningUserRepository": {
            "allOf": [
                {
                    "$ref": "#/definitions/InboundProvisioningUserRepository"
                },
                {
                    "description": "Identity Store Provisioner data store user repository.",
                    "properties": {
                        "pluginDescriptorRef": {
                            "$ref": "#/definitions/ResourceLink",
                            "description": "Reference to the associated data store.",
                            "position": 20
                        }
                    },
                    "required": [
                        "pluginDescriptorRef"
                    ],
                    "type": "object"
                }
            ]
        },
        "IdentityStoreProvisioner": {
            "description": "An identity store provisioner instance.",
            "properties": {
                "attributeContract": {
                    "$ref": "#/definitions/IdentityStoreProvisionerAttributeContract",
                    "description": "The list of attributes that the identity store provisioner provides.",
                    "position": 100
                },
                "configuration": {
                    "$ref": "#/definitions/PluginConfiguration",
                    "description": "Plugin instance configuration.",
                    "position": 50
                },
                "groupAttributeContract": {
                    "$ref": "#/definitions/IdentityStoreProvisionerGroupAttributeContract",
                    "description": "The list of group attributes that the identity store provisioner provides.",
                    "position": 110
                },
                "id": {
                    "description": "The ID of the plugin instance. The ID cannot be modified once the instance is created.<br>Note: Ignored when specifying a connection's adapter override.",
                    "position": 10,
                    "type": "string"
                },
                "name": {
                    "description": "The plugin instance name. The name cannot be modified once the instance is created.<br>Note: Ignored when specifying a connection's adapter override.",
                    "position": 20,
                    "type": "string"
                },
                "parentRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "The reference to this plugin's parent instance. The parent reference is only accepted if the plugin type supports parent instances.<br>Note: This parent reference is required if this plugin instance is used as an overriding plugin (e.g. connection adapter overrides)",
                    "position": 40
                },
                "pluginDescriptorRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the plugin descriptor for this instance. The plugin descriptor cannot be modified once the instance is created.<br>Note: Ignored when specifying a connection's adapter override.",
                    "position": 30
                }
            },
            "required": [
                "configuration",
                "id",
                "name",
                "pluginDescriptorRef"
            ],
            "type": "object"
        },
        "IdentityStoreProvisionerAttributeContract": {
            "description": "A set of attributes exposed by an identity store provisioner.",
            "properties": {
                "coreAttributes": {
                    "description": "A list of identity store provisioner attributes that correspond to the attributes exposed by the identity store provisioner type.",
                    "items": {
                        "$ref": "#/definitions/Attribute"
                    },
                    "position": 10,
                    "type": "array"
                },
                "extendedAttributes": {
                    "description": "A list of additional attributes that can be returned by the identity store provisioner. The extended attributes are only used if the provisioner supports them.",
                    "items": {
                        "$ref": "#/definitions/Attribute"
                    },
                    "position": 20,
                    "type": "array"
                },
                "inherited": {
                    "description": "Whether this attribute contract is inherited from its parent instance. If true, the rest of the properties in this model become read-only. The default value is false.",
                    "position": 30,
                    "type": "boolean"
                }
            },
            "required": [
                "coreAttributes"
            ],
            "type": "object"
        },
        "IdentityStoreProvisionerDescriptor": {
            "description": "An identity store provisioner descriptor",
            "properties": {
                "attributeContract": {
                    "description": "The attribute contract for this plugin.",
                    "items": {
                        "type": "string"
                    },
                    "position": 40,
                    "type": "array"
                },
                "className": {
                    "description": "Full class name of the class that implements this plugin.",
                    "position": 30,
                    "type": "string"
                },
                "configDescriptor": {
                    "$ref": "#/definitions/PluginConfigDescriptor",
                    "description": "The descriptor which defines the configuration fields available for this plugin.",
                    "position": 60
                },
                "groupAttributeContract": {
                    "description": "The group attribute contract for this identity store provisioner",
                    "items": {
                        "type": "string"
                    },
                    "position": 45,
                    "type": "array"
                },
                "id": {
                    "description": "Unique ID of the plugin.",
                    "position": 10,
                    "type": "string"
                },
                "name": {
                    "description": "Friendly name for the plugin.",
                    "position": 20,
                    "type": "string"
                },
                "supportsExtendedContract": {
                    "description": "Determines whether this plugin supports extending the attribute contract.",
                    "position": 50,
                    "type": "boolean"
                },
                "supportsGroupExtendedContract": {
                    "description": "Determines whether this plugin supports extending the group attribute contract",
                    "position": 55,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "IdentityStoreProvisionerDescriptors": {
            "description": "A collection of identity store provisioner descriptors.",
            "properties": {
                "items": {
                    "description": "The list of identity store provisioner descriptors.",
                    "items": {
                        "$ref": "#/definitions/IdentityStoreProvisionerDescriptor"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "IdentityStoreProvisionerGroupAttributeContract": {
            "description": "A set of group attributes exposed by an identity store provisioner.",
            "properties": {
                "coreAttributes": {
                    "description": "A list of identity store provisioner group attributes that correspond to the group attributes exposed by the identity store provisioner type.",
                    "items": {
                        "$ref": "#/definitions/GroupAttribute"
                    },
                    "position": 10,
                    "type": "array"
                },
                "extendedAttributes": {
                    "description": "A list of additional group attributes that can be returned by the identity store provisioner. The extended group attributes are only used if the provisioner supports them.",
                    "items": {
                        "$ref": "#/definitions/GroupAttribute"
                    },
                    "position": 20,
                    "type": "array"
                },
                "inherited": {
                    "description": "Whether this group attribute contract is inherited from its parent instance. If true, the rest of the properties in this model become read-only. The default value is false.",
                    "position": 30,
                    "type": "boolean"
                }
            },
            "required": [
                "coreAttributes"
            ],
            "type": "object"
        },
        "IdentityStoreProvisioners": {
            "description": "A collection of identity store provisioners.",
            "properties": {
                "items": {
                    "description": "The actual list of identity store provisioners.",
                    "items": {
                        "$ref": "#/definitions/IdentityStoreProvisioner"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "IdpAdapter": {
            "allOf": [
                {
                    "$ref": "#/definitions/PluginInstance"
                },
                {
                    "description": "An IdP adapter instance.",
                    "properties": {
                        "attributeContract": {
                            "$ref": "#/definitions/IdpAdapterAttributeContract",
                            "description": "The list of attributes that the IdP adapter provides.",
                            "position": 1000
                        },
                        "attributeMapping": {
                            "$ref": "#/definitions/IdpAdapterContractMapping",
                            "description": "The attributes mapping from attribute sources to attribute targets.",
                            "position": 110
                        },
                        "authnCtxClassRef": {
                            "description": "The fixed value that indicates how the user was authenticated.",
                            "position": 100,
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "IdpAdapterAssertionMapping": {
            "description": "The IdP Adapter Assertion Mapping.",
            "properties": {
                "abortSsoTransactionAsFailSafe": {
                    "description": "If set to true, SSO transaction will be aborted as a fail-safe when the data-store's attribute mappings fail to complete the attribute contract. Otherwise, the attribute contract with default values is used. By default, this value is false.",
                    "position": 9,
                    "type": "boolean"
                },
                "adapterOverrideSettings": {
                    "$ref": "#/definitions/IdpAdapter",
                    "description": "Connection specific configuration overrides for the mapped adapter instance.",
                    "position": 8
                },
                "attributeContractFulfillment": {
                    "additionalProperties": {
                        "$ref": "#/definitions/AttributeFulfillmentValue"
                    },
                    "description": "A list of mappings from attribute names to their fulfillment values.",
                    "position": 20,
                    "type": "object"
                },
                "attributeSources": {
                    "description": "A list of configured data stores to look up attributes from.",
                    "items": {
                        "$ref": "#/definitions/AttributeSource"
                    },
                    "position": 10,
                    "type": "array"
                },
                "idpAdapterRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the associated IdP adapter.<br>Note: This is ignored if adapter overrides for this mapping exists. In this case, the override's parent adapter reference is used.",
                    "position": 5
                },
                "issuanceCriteria": {
                    "$ref": "#/definitions/IssuanceCriteria",
                    "description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
                    "position": 30
                },
                "restrictVirtualEntityIds": {
                    "description": "Restricts this mapping to specific virtual entity IDs.",
                    "position": 6,
                    "type": "boolean"
                },
                "restrictedVirtualEntityIds": {
                    "description": "The list of virtual server IDs that this mapping is restricted to.",
                    "items": {
                        "type": "string"
                    },
                    "position": 7,
                    "type": "array"
                }
            },
            "required": [
                "attributeContractFulfillment",
                "idpAdapterRef"
            ],
            "type": "object"
        },
        "IdpAdapterAttribute": {
            "description": "An attribute for the IdP adapter attribute contract.",
            "properties": {
                "masked": {
                    "description": "Specifies whether this attribute is masked in PingFederate logs. Defaults to false.",
                    "position": 1000,
                    "type": "boolean"
                },
                "name": {
                    "description": "The name of this attribute.",
                    "position": 10,
                    "type": "string"
                },
                "pseudonym": {
                    "description": "Specifies whether this attribute is used to construct a pseudonym for the SP. Defaults to false.",
                    "position": 900,
                    "type": "boolean"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "IdpAdapterAttributeContract": {
            "description": "A set of attributes exposed by an IdP adapter.",
            "properties": {
                "coreAttributes": {
                    "description": "A list of IdP adapter attributes that correspond to the attributes exposed by the IdP adapter type.",
                    "items": {
                        "$ref": "#/definitions/IdpAdapterAttribute"
                    },
                    "position": 10,
                    "type": "array"
                },
                "extendedAttributes": {
                    "description": "A list of additional attributes that can be returned by the IdP adapter. The extended attributes are only used if the adapter supports them.",
                    "items": {
                        "$ref": "#/definitions/IdpAdapterAttribute"
                    },
                    "position": 20,
                    "type": "array"
                },
                "inherited": {
                    "description": "Whether this attribute contract is inherited from its parent instance. If true, the rest of the properties in this model become read-only. The default value is false.",
                    "position": 50,
                    "type": "boolean"
                },
                "maskOgnlValues": {
                    "description": "Whether or not all OGNL expressions used to fulfill an outgoing assertion contract should be masked in the logs. Defaults to false.",
                    "position": 40,
                    "type": "boolean"
                },
                "uniqueUserKeyAttribute": {
                    "description": "The attribute to use for uniquely identify a user's authentication sessions.",
                    "position": 30,
                    "type": "string"
                }
            },
            "required": [
                "coreAttributes"
            ],
            "type": "object"
        },
        "IdpAdapterContractMapping": {
            "description": "An IdP Adapter Contract Mapping.",
            "properties": {
                "attributeContractFulfillment": {
                    "additionalProperties": {
                        "$ref": "#/definitions/AttributeFulfillmentValue"
                    },
                    "description": "A list of mappings from attribute names to their fulfillment values.",
                    "position": 20,
                    "type": "object"
                },
                "attributeSources": {
                    "description": "A list of configured data stores to look up attributes from.",
                    "items": {
                        "$ref": "#/definitions/AttributeSource"
                    },
                    "position": 10,
                    "type": "array"
                },
                "inherited": {
                    "description": "Whether this attribute mapping is inherited from its parent instance. If true, the rest of the properties in this model become read-only. The default value is false.",
                    "position": 40,
                    "type": "boolean"
                },
                "issuanceCriteria": {
                    "$ref": "#/definitions/IssuanceCriteria",
                    "description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
                    "position": 30
                }
            },
            "required": [
                "attributeContractFulfillment"
            ],
            "type": "object"
        },
        "IdpAdapterDescriptor": {
            "allOf": [
                {
                    "$ref": "#/definitions/PluginDescriptor"
                },
                {
                    "description": "An IdP adapter descriptor.",
                    "properties": {},
                    "type": "object"
                }
            ]
        },
        "IdpAdapterDescriptors": {
            "description": "A collection of IdP adapter descriptors.",
            "properties": {
                "items": {
                    "description": "The list of IdP adapter descriptors.",
                    "items": {
                        "$ref": "#/definitions/IdpAdapterDescriptor"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "IdpAdapterMapping": {
            "description": "The OAuth IdP Adapter Mapping.",
            "properties": {
                "attributeContractFulfillment": {
                    "additionalProperties": {
                        "$ref": "#/definitions/AttributeFulfillmentValue"
                    },
                    "description": "A list of mappings from attribute names to their fulfillment values.",
                    "position": 20,
                    "type": "object"
                },
                "attributeSources": {
                    "description": "A list of configured data stores to look up attributes from.",
                    "items": {
                        "$ref": "#/definitions/AttributeSource"
                    },
                    "position": 10,
                    "type": "array"
                },
                "id": {
                    "description": "The ID of the adapter mapping.",
                    "position": 1,
                    "type": "string"
                },
                "idpAdapterRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Read only reference to the associated IdP adapter.",
                    "position": 2
                },
                "issuanceCriteria": {
                    "$ref": "#/definitions/IssuanceCriteria",
                    "description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
                    "position": 30
                }
            },
            "required": [
                "attributeContractFulfillment",
                "id"
            ],
            "type": "object"
        },
        "IdpAdapterMappings": {
            "description": "A collection of OAuth IdP adapter mapping items.",
            "properties": {
                "items": {
                    "description": "The actual list of OAuth IdP adapter mappings.",
                    "items": {
                        "$ref": "#/definitions/IdpAdapterMapping"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "IdpAdapters": {
            "description": "A collection of IdP adapters.",
            "properties": {
                "items": {
                    "description": "The actual list of IdP adapters.",
                    "items": {
                        "$ref": "#/definitions/IdpAdapter"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "IdpAttributeQuery": {
            "description": "The attribute query profile supports local applications in requesting user attributes from an attribute authority.",
            "properties": {
                "nameMappings": {
                    "description": "The attribute name mappings between the SP and the IdP.",
                    "items": {
                        "$ref": "#/definitions/AttributeQueryNameMapping"
                    },
                    "position": 20,
                    "type": "array"
                },
                "policy": {
                    "$ref": "#/definitions/IdpAttributeQueryPolicy",
                    "description": "The attribute query profile's security policy.",
                    "position": 30
                },
                "url": {
                    "description": "The URL at your IdP partner's site where attribute queries are to be sent.",
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "url"
            ],
            "type": "object"
        },
        "IdpAttributeQueryPolicy": {
            "description": "The attribute query profile's security policy.",
            "properties": {
                "encryptNameId": {
                    "description": "Encrypt the name identifier.",
                    "position": 50,
                    "type": "boolean"
                },
                "maskAttributeValues": {
                    "description": "Mask attributes in log files.",
                    "position": 60,
                    "type": "boolean"
                },
                "requireEncryptedAssertion": {
                    "description": "Require encrypted assertion.",
                    "position": 30,
                    "type": "boolean"
                },
                "requireSignedAssertion": {
                    "description": "Require signed assertion.",
                    "position": 20,
                    "type": "boolean"
                },
                "requireSignedResponse": {
                    "description": "Require signed response.",
                    "position": 10,
                    "type": "boolean"
                },
                "signAttributeQuery": {
                    "description": "Sign the attribute query.",
                    "position": 40,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "IdpBrowserSso": {
            "description": "The settings used to enable secure browser-based SSO to resources at your site.",
            "properties": {
                "adapterMappings": {
                    "description": "A list of adapters that map to incoming assertions.",
                    "items": {
                        "$ref": "#/definitions/SpAdapterMapping"
                    },
                    "position": 1070,
                    "type": "array"
                },
                "alwaysSignArtifactResponse": {
                    "description": "Specify to always sign the SAML ArtifactResponse.",
                    "position": 90,
                    "type": "boolean"
                },
                "artifact": {
                    "$ref": "#/definitions/ArtifactSettings",
                    "description": "The settings for an artifact binding.",
                    "position": 60
                },
                "assertionsSigned": {
                    "description": "Specify whether the incoming SAML assertions are signed rather than the entire SAML response being signed.",
                    "position": 1020,
                    "type": "boolean"
                },
                "attributeContract": {
                    "$ref": "#/definitions/IdpBrowserSsoAttributeContract",
                    "description": "The list of attributes that the IdP sends in the assertion.",
                    "position": 1060
                },
                "authenticationPolicyContractMappings": {
                    "description": "A list of Authentication Policy Contracts that map to incoming assertions.",
                    "items": {
                        "$ref": "#/definitions/AuthenticationPolicyContractMapping"
                    },
                    "position": 1080,
                    "type": "array"
                },
                "authnContextMappings": {
                    "description": "A list of authentication context mappings between local and remote values. Applicable for SAML 2.0 and OIDC protocol connections.",
                    "items": {
                        "$ref": "#/definitions/AuthnContextMapping"
                    },
                    "position": 1015,
                    "type": "array"
                },
                "decryptionPolicy": {
                    "$ref": "#/definitions/DecryptionPolicy",
                    "description": "The SAML 2.0 decryption policy for browser-based SSO.",
                    "position": 1040
                },
                "defaultTargetUrl": {
                    "description": "The default target URL for this connection. If defined, this overrides the default URL.",
                    "position": 1010,
                    "type": "string"
                },
                "enabledProfiles": {
                    "description": "The profiles that are enabled for browser-based SSO. SAML 2.0 supports all profiles whereas SAML 1.x IdP connections support both IdP and SP (non-standard) initiated SSO. This is required for SAMLx.x Connections. ",
                    "items": {
                        "enum": [
                            "IDP_INITIATED_SSO",
                            "SP_INITIATED_SSO",
                            "IDP_INITIATED_SLO",
                            "SP_INITIATED_SLO"
                        ],
                        "type": "string"
                    },
                    "position": 20,
                    "type": "array",
                    "uniqueItems": true
                },
                "idpIdentityMapping": {
                    "description": "Defines the process in which users authenticated by the IdP are associated with user accounts local to the SP.",
                    "enum": [
                        "ACCOUNT_MAPPING",
                        "ACCOUNT_LINKING",
                        "NONE"
                    ],
                    "position": 1050,
                    "type": "string"
                },
                "incomingBindings": {
                    "description": "The SAML bindings that are enabled for browser-based SSO. This is required for SAML 2.0 connections when the enabled profiles contain the SP-initiated SSO profile or either SLO profile. For SAML 1.x based connections, it is not used for SP Connections and it is optional for IdP Connections.",
                    "items": {
                        "enum": [
                            "ARTIFACT",
                            "POST",
                            "REDIRECT",
                            "SOAP"
                        ],
                        "type": "string"
                    },
                    "position": 30,
                    "type": "array",
                    "uniqueItems": true
                },
                "jitProvisioning": {
                    "$ref": "#/definitions/JitProvisioning",
                    "description": "JIT Provisioning of user accounts.",
                    "position": 1110
                },
                "messageCustomizations": {
                    "description": "The message customizations for browser-based SSO. Depending on server settings, connection type, and protocol this may or may not be supported.",
                    "items": {
                        "$ref": "#/definitions/ProtocolMessageCustomization"
                    },
                    "position": 40,
                    "type": "array"
                },
                "oauthAuthenticationPolicyContractRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "The Authentication policy contract to map into for OAuth. The policy contract can subsequently be mapped into the OAuth persistent grant.",
                    "position": 1100
                },
                "oidcProviderSettings": {
                    "$ref": "#/definitions/OIDCProviderSettings",
                    "description": "The OpenID Provider configuration settings. Required for an OIDC connection.",
                    "position": 15
                },
                "protocol": {
                    "description": "The browser-based SSO protocol to use.",
                    "enum": [
                        "SAML20",
                        "WSFED",
                        "SAML11",
                        "SAML10",
                        "OIDC"
                    ],
                    "position": 10,
                    "type": "string"
                },
                "signAuthnRequests": {
                    "description": "Determines whether SAML authentication requests should be signed.",
                    "position": 1030,
                    "type": "boolean"
                },
                "sloServiceEndpoints": {
                    "description": "A list of possible endpoints to send SLO requests and responses.",
                    "items": {
                        "$ref": "#/definitions/SloServiceEndpoint"
                    },
                    "position": 70,
                    "type": "array"
                },
                "ssoOAuthMapping": {
                    "$ref": "#/definitions/SsoOAuthMapping",
                    "description": "Direct mapping from the IdP connection to the OAuth persistent grant.",
                    "position": 1090
                },
                "ssoServiceEndpoints": {
                    "description": "The IdP SSO endpoints that define where to send your authentication requests. Only required for SP initiated SSO. This is required for SAML x.x and WS-FED Connections.",
                    "items": {
                        "$ref": "#/definitions/IdpSsoServiceEndpoint"
                    },
                    "position": 1000,
                    "type": "array"
                },
                "urlWhitelistEntries": {
                    "description": "For WS-Federation connections, a whitelist of additional allowed domains and paths used to validate wreply for SLO, if enabled.",
                    "items": {
                        "$ref": "#/definitions/UrlWhitelistEntry"
                    },
                    "position": 50,
                    "type": "array"
                }
            },
            "required": [
                "idpIdentityMapping",
                "protocol"
            ],
            "type": "object"
        },
        "IdpBrowserSsoAttribute": {
            "description": "An attribute for the IdP Browser SSO attribute contract.",
            "properties": {
                "masked": {
                    "description": "Specifies whether this attribute is masked in PingFederate logs. Defaults to false.",
                    "position": 1000,
                    "type": "boolean"
                },
                "name": {
                    "description": "The name of this attribute.",
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "IdpBrowserSsoAttributeContract": {
            "description": "A set of user attributes that the IdP sends in the SAML assertion.",
            "properties": {
                "coreAttributes": {
                    "description": "A list of read-only assertion attributes that are automatically populated by PingFederate.",
                    "items": {
                        "$ref": "#/definitions/IdpBrowserSsoAttribute"
                    },
                    "position": 10,
                    "type": "array"
                },
                "extendedAttributes": {
                    "description": "A list of additional attributes that are present in the incoming assertion.",
                    "items": {
                        "$ref": "#/definitions/IdpBrowserSsoAttribute"
                    },
                    "position": 20,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "IdpConnection": {
            "allOf": [
                {
                    "$ref": "#/definitions/Connection"
                },
                {
                    "description": "The set of attributes used to configure an IdP connection.",
                    "properties": {
                        "attributeQuery": {
                            "$ref": "#/definitions/IdpAttributeQuery",
                            "description": "The attribute query settings for requesting user attributes from an attribute authority.",
                            "position": 66
                        },
                        "errorPageMsgId": {
                            "description": "Identifier that specifies the message displayed on a user-facing error page.",
                            "position": 1000,
                            "type": "string"
                        },
                        "idpBrowserSso": {
                            "$ref": "#/definitions/IdpBrowserSso",
                            "description": "The browser-based SSO settings used to communicate with your IdP.",
                            "position": 65
                        },
                        "idpOAuthGrantAttributeMapping": {
                            "$ref": "#/definitions/IdpOAuthGrantAttributeMapping",
                            "description": "The OAuth Assertion Grant settings used to map from your IdP.",
                            "position": 67
                        },
                        "inboundProvisioning": {
                            "$ref": "#/definitions/IdpInboundProvisioning",
                            "description": "The Inbound Provisioning settings used to provision user accounts and groups.",
                            "position": 80
                        },
                        "oidcClientCredentials": {
                            "$ref": "#/definitions/OIDCClientCredentials",
                            "description": "The OIDC client credentials. This is required for an OIDC connection.",
                            "position": 63
                        },
                        "wsTrust": {
                            "$ref": "#/definitions/IdpWsTrust",
                            "description": "The Ws-Trust settings.",
                            "position": 70
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "IdpConnections": {
            "description": "A collection of IdP connections.",
            "properties": {
                "items": {
                    "description": "The actual list of connections.",
                    "items": {
                        "$ref": "#/definitions/IdpConnection"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "IdpDefaultUrl": {
            "description": "IDP Default URL settings.",
            "properties": {
                "confirmIdpSlo": {
                    "description": "Prompt user to confirm Single Logout (SLO).",
                    "position": 10,
                    "type": "boolean"
                },
                "idpErrorMsg": {
                    "description": "Provide the error text displayed in a user's browser when an SSO operation fails.",
                    "position": 30,
                    "type": "string"
                },
                "idpSloSuccessUrl": {
                    "description": "Provide the default URL you would like to send the user to when Single Logout has succeeded.",
                    "position": 20,
                    "type": "string"
                }
            },
            "required": [
                "idpErrorMsg"
            ],
            "type": "object"
        },
        "IdpInboundProvisioning": {
            "description": "SCIM Inbound Provisioning specifies how and when to provision user accounts and groups.",
            "properties": {
                "actionOnDelete": {
                    "description": "Specify behavior of how SCIM DELETE requests are handled.",
                    "enum": [
                        "DISABLE_USER",
                        "PERMANENTLY_DELETE_USER"
                    ],
                    "position": 60,
                    "type": "string"
                },
                "customSchema": {
                    "$ref": "#/definitions/Schema",
                    "description": "The Custom SCIM Attributes configuration.",
                    "position": 30
                },
                "groupSupport": {
                    "description": "Specify support for provisioning of groups.",
                    "position": 10,
                    "type": "boolean"
                },
                "groups": {
                    "$ref": "#/definitions/Groups",
                    "description": "Group creation and read configuration.",
                    "position": 50
                },
                "userRepository": {
                    "$ref": "#/definitions/InboundProvisioningUserRepository",
                    "description": "The local repository for user accounts and groups requiring provisioning.",
                    "position": 20
                },
                "users": {
                    "$ref": "#/definitions/Users",
                    "description": "User creation and read configuration.",
                    "position": 40
                }
            },
            "required": [
                "customSchema",
                "groupSupport",
                "groups",
                "userRepository",
                "users"
            ],
            "type": "object"
        },
        "IdpInboundProvisioningAttribute": {
            "description": "An attribute for the IdP Inbound Provisioning attribute contract.",
            "properties": {
                "masked": {
                    "description": "Specifies whether this attribute is masked in PingFederate logs. Defaults to false.",
                    "position": 1000,
                    "type": "boolean"
                },
                "name": {
                    "description": "The name of this attribute.",
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "IdpInboundProvisioningAttributeContract": {
            "description": "A set of user attributes that the IdP sends in the SCIM response.",
            "properties": {
                "coreAttributes": {
                    "description": "A list of read-only assertion attributes that are automatically populated by PingFederate.",
                    "items": {
                        "$ref": "#/definitions/IdpInboundProvisioningAttribute"
                    },
                    "position": 10,
                    "type": "array"
                },
                "extendedAttributes": {
                    "description": "A list of additional attributes that are added to the SCIM response.",
                    "items": {
                        "$ref": "#/definitions/IdpInboundProvisioningAttribute"
                    },
                    "position": 20,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "IdpOAuthAttributeContract": {
            "description": "A set of user attributes that the IdP sends in the OAuth Assertion Grant.",
            "properties": {
                "coreAttributes": {
                    "description": "A list of read-only assertion attributes that are automatically populated by PingFederate.",
                    "items": {
                        "$ref": "#/definitions/IdpBrowserSsoAttribute"
                    },
                    "position": 10,
                    "type": "array"
                },
                "extendedAttributes": {
                    "description": "A list of additional attributes that are present in the incoming assertion.",
                    "items": {
                        "$ref": "#/definitions/IdpBrowserSsoAttribute"
                    },
                    "position": 20,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "IdpOAuthGrantAttributeMapping": {
            "description": "The OAuth Assertion Grant settings used to map from your IdP.",
            "properties": {
                "accessTokenManagerMappings": {
                    "description": "A mapping in a connection that defines how access tokens are created.",
                    "items": {
                        "$ref": "#/definitions/AccessTokenManagerMapping"
                    },
                    "position": 10,
                    "type": "array"
                },
                "idpOAuthAttributeContract": {
                    "$ref": "#/definitions/IdpOAuthAttributeContract",
                    "description": "A set of user attributes that the IdP sends in the OAuth Assertion Grant.",
                    "position": 20
                }
            },
            "type": "object"
        },
        "IdpRole": {
            "allOf": [
                {
                    "$ref": "#/definitions/BaseProviderRole"
                },
                {
                    "description": "This property has been deprecated and is no longer used. All Roles and protocols are always enabled.",
                    "properties": {
                        "enable": {
                            "description": "Enable Identity Provider Role.",
                            "position": 10,
                            "type": "boolean"
                        },
                        "enableOutboundProvisioning": {
                            "description": "Enable Outbound Provisioning.",
                            "position": 30,
                            "type": "boolean"
                        },
                        "saml20Profile": {
                            "$ref": "#/definitions/SAML20Profile",
                            "description": "SAML 2.0 Profile settings.",
                            "position": 20
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "IdpSsoServiceEndpoint": {
            "description": "The settings that define an endpoint to an IdP SSO service.",
            "properties": {
                "binding": {
                    "description": "The binding of this endpoint, if applicable - usually only required for SAML 2.0 endpoints.",
                    "enum": [
                        "ARTIFACT",
                        "POST",
                        "REDIRECT",
                        "SOAP"
                    ],
                    "position": 10,
                    "type": "string"
                },
                "url": {
                    "description": "The absolute or relative URL of the endpoint. A relative URL can be specified if a base URL for the connection has been defined.",
                    "position": 20,
                    "type": "string"
                }
            },
            "required": [
                "binding",
                "url"
            ],
            "type": "object"
        },
        "IdpToSpAdapterMapping": {
            "description": "The IdP-to-SP Adapter Mapping.",
            "properties": {
                "applicationIconUrl": {
                    "description": "The application icon URL.",
                    "position": 100,
                    "type": "string"
                },
                "applicationName": {
                    "description": "The application name.",
                    "position": 90,
                    "type": "string"
                },
                "attributeContractFulfillment": {
                    "additionalProperties": {
                        "$ref": "#/definitions/AttributeFulfillmentValue"
                    },
                    "description": "A list of mappings from attribute names to their fulfillment values.",
                    "position": 20,
                    "type": "object"
                },
                "attributeSources": {
                    "description": "A list of configured data stores to look up attributes from.",
                    "items": {
                        "$ref": "#/definitions/AttributeSource"
                    },
                    "position": 10,
                    "type": "array"
                },
                "defaultTargetResource": {
                    "description": "Default target URL for this adapter-to-adapter mapping configuration.",
                    "position": 70,
                    "type": "string"
                },
                "id": {
                    "description": "The id of the IdP-to-SP Adapter mapping. This field is read-only and is ignored when passed in with the payload.",
                    "position": 60,
                    "type": "string"
                },
                "issuanceCriteria": {
                    "$ref": "#/definitions/IssuanceCriteria",
                    "description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
                    "position": 30
                },
                "licenseConnectionGroupAssignment": {
                    "description": "The license connection group.",
                    "position": 80,
                    "type": "string"
                },
                "sourceId": {
                    "description": "The id of the IdP Adapter.",
                    "position": 40,
                    "type": "string"
                },
                "targetId": {
                    "description": "The id of the SP Adapter.",
                    "position": 50,
                    "type": "string"
                }
            },
            "required": [
                "attributeContractFulfillment",
                "sourceId",
                "targetId"
            ],
            "type": "object"
        },
        "IdpToSpAdapterMappings": {
            "description": "A collection of IdP-to-SP Adapter Mappings.",
            "properties": {
                "items": {
                    "description": "The actual list of connections.",
                    "items": {
                        "$ref": "#/definitions/IdpToSpAdapterMapping"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "IdpTokenProcessorMapping": {
            "description": "The IdP Token Processor Mapping.",
            "properties": {
                "attributeContractFulfillment": {
                    "additionalProperties": {
                        "$ref": "#/definitions/AttributeFulfillmentValue"
                    },
                    "description": "A list of mappings from attribute names to their fulfillment values.",
                    "position": 20,
                    "type": "object"
                },
                "attributeSources": {
                    "description": "A list of configured data stores to look up attributes from.",
                    "items": {
                        "$ref": "#/definitions/AttributeSource"
                    },
                    "position": 10,
                    "type": "array"
                },
                "idpTokenProcessorRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the associated token processor.",
                    "position": 5
                },
                "issuanceCriteria": {
                    "$ref": "#/definitions/IssuanceCriteria",
                    "description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
                    "position": 30
                },
                "restrictedVirtualEntityIds": {
                    "description": "The list of virtual server IDs that this mapping is restricted to.",
                    "items": {
                        "type": "string"
                    },
                    "position": 6,
                    "type": "array"
                }
            },
            "required": [
                "attributeContractFulfillment",
                "idpTokenProcessorRef"
            ],
            "type": "object"
        },
        "IdpWsTrust": {
            "description": "Ws-Trust STS provides validation of incoming tokens which enable SSO access to Web Services. It also allows generation of local tokens for Web Services.",
            "properties": {
                "attributeContract": {
                    "$ref": "#/definitions/IdpWsTrustAttributeContract",
                    "description": "A set of user attributes that the SP receives in the incoming token.",
                    "position": 10
                },
                "generateLocalToken": {
                    "description": "Indicates whether a local token needs to be generated. The default value is false.",
                    "position": 20,
                    "type": "boolean"
                },
                "tokenGeneratorMappings": {
                    "description": "A list of token generators to generate local tokens. Required if a local token needs to be generated.",
                    "items": {
                        "$ref": "#/definitions/SpTokenGeneratorMapping"
                    },
                    "position": 30,
                    "type": "array"
                }
            },
            "required": [
                "attributeContract",
                "generateLocalToken"
            ],
            "type": "object"
        },
        "IdpWsTrustAttribute": {
            "description": "An attribute for the Ws-Trust attribute contract.",
            "properties": {
                "masked": {
                    "description": "Specifies whether this attribute is masked in PingFederate logs. Defaults to false.",
                    "position": 1000,
                    "type": "boolean"
                },
                "name": {
                    "description": "The name of this attribute.",
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "IdpWsTrustAttributeContract": {
            "description": "A set of user attributes that this server will receive in the token.",
            "properties": {
                "coreAttributes": {
                    "description": "A list of read-only assertion attributes that are automatically populated by PingFederate.",
                    "items": {
                        "$ref": "#/definitions/IdpWsTrustAttribute"
                    },
                    "position": 10,
                    "type": "array"
                },
                "extendedAttributes": {
                    "description": "A list of additional attributes that are receive in the incoming assertion.",
                    "items": {
                        "$ref": "#/definitions/IdpWsTrustAttribute"
                    },
                    "position": 20,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "InboundBackChannelAuth": {
            "allOf": [
                {
                    "$ref": "#/definitions/BackChannelAuth"
                },
                {
                    "properties": {
                        "certs": {
                            "description": "The certificate used for signature verification and XML encryption.",
                            "items": {
                                "$ref": "#/definitions/ConnectionCert"
                            },
                            "position": 60,
                            "type": "array"
                        },
                        "requireSsl": {
                            "description": "Incoming HTTP transmissions must use a secure channel.",
                            "position": 70,
                            "type": "boolean"
                        },
                        "verificationIssuerDN": {
                            "description": "If a verification Subject DN is provided, you can optionally restrict the issuer to a specific trusted CA by specifying its DN in this field.",
                            "position": 50,
                            "type": "string"
                        },
                        "verificationSubjectDN": {
                            "description": "If this property is set, the verification trust model is Anchored. The verification certificate must be signed by a trusted CA and included in the incoming message, and the subject DN of the expected certificate is specified in this property. If this property is not set, then a primary verification certificate must be specified in the certs array.",
                            "position": 40,
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "InboundProvisioningUserRepository": {
            "description": "SCIM Inbound Provisioning user repository.",
            "discriminator": "type",
            "properties": {
                "type": {
                    "description": "The user repository type.",
                    "enum": [
                        "LDAP",
                        "IDENTITY_STORE"
                    ],
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "IncomingProxySettings": {
            "description": "Incoming Proxy Settings.",
            "properties": {
                "clientCertChainSSLHeaderName": {
                    "description": "While the proxy server is configured to pass client certificates as HTTP request headers, specify the chain header name here.",
                    "position": 60,
                    "type": "string"
                },
                "clientCertSSLHeaderName": {
                    "description": "While the proxy server is configured to pass client certificates as HTTP request headers, specify the header name here.",
                    "position": 50,
                    "type": "string"
                },
                "forwardedHostHeaderIndex": {
                    "description": "PingFederate combines multiple comma-separated header values into the same order that they are received. Define which hostname you want to use. Default is to use the last hostname.",
                    "enum": [
                        "FIRST",
                        "LAST"
                    ],
                    "position": 40,
                    "type": "string"
                },
                "forwardedHostHeaderName": {
                    "description": "Globally specify the header name (for example, X-Forwarded-Host) where PingFederate should attempt to retrieve the hostname and port in all HTTP requests.",
                    "position": 30,
                    "type": "string"
                },
                "forwardedIpAddressHeaderIndex": {
                    "description": "PingFederate combines multiple comma-separated header values into the same order that they are received. Define which IP address you want to use. Default is to use the last address.",
                    "enum": [
                        "FIRST",
                        "LAST"
                    ],
                    "position": 20,
                    "type": "string"
                },
                "forwardedIpAddressHeaderName": {
                    "description": "Globally specify the header name (for example, X-Forwarded-For) where PingFederate should attempt to retrieve the client IP address in all HTTP requests.",
                    "position": 10,
                    "type": "string"
                },
                "proxyTerminatesHttpsConns": {
                    "description": "Allows you to globally specify that connections to the reverse proxy are made over HTTPS even when HTTP is used between the reverse proxy and PingFederate.",
                    "position": 70,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "IssuanceCriteria": {
            "description": "A list of criteria that determines whether a transaction (usually a SSO transaction) is continued. All criteria must pass in order for the transaction to continue.",
            "properties": {
                "conditionalCriteria": {
                    "description": "A list of conditional issuance criteria where existing attributes must satisfy their conditions against expected values in order for the transaction to continue.",
                    "items": {
                        "$ref": "#/definitions/ConditionalIssuanceCriteriaEntry"
                    },
                    "position": 10,
                    "type": "array"
                },
                "expressionCriteria": {
                    "description": "A list of expression issuance criteria where the OGNL expressions must evaluate to true in order for the transaction to continue.",
                    "items": {
                        "$ref": "#/definitions/ExpressionIssuanceCriteriaEntry"
                    },
                    "position": 20,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "Issuer": {
            "description": "The set of attributes used to configure a virtual issuer.",
            "properties": {
                "description": {
                    "description": "The description of this virtual issuer.",
                    "position": 30,
                    "type": "string"
                },
                "host": {
                    "description": "The hostname of this virtual issuer.",
                    "position": 40,
                    "type": "string"
                },
                "id": {
                    "description": "The persistent, unique ID for the virtual issuer. It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned if not specified.",
                    "position": 10,
                    "type": "string"
                },
                "name": {
                    "description": "The name of this virtual issuer with a unique value.",
                    "position": 20,
                    "type": "string"
                },
                "path": {
                    "description": "The path of this virtual issuer.",
                    "position": 50,
                    "type": "string"
                }
            },
            "required": [
                "host",
                "name"
            ],
            "type": "object"
        },
        "IssuerCert": {
            "description": "A certificate used to validate certificates for access to the WS-Trust STS endpoints.",
            "properties": {
                "active": {
                    "description": "Indicates whether this an active certificate or not.",
                    "position": 30,
                    "type": "boolean"
                },
                "certView": {
                    "$ref": "#/definitions/CertView",
                    "description": "Certificate details. This property is read-only and is always ignored on a POST or PUT.",
                    "position": 10
                },
                "x509File": {
                    "$ref": "#/definitions/X509File",
                    "description": "The certificate data. This property must always be supplied on a POST or PUT.",
                    "position": 20
                }
            },
            "required": [
                "x509File"
            ],
            "type": "object"
        },
        "IssuerCerts": {
            "description": "The certificates used to validate certificates for access to the WS-Trust STS endpoints.",
            "properties": {
                "items": {
                    "description": "The actual list of certificates.",
                    "items": {
                        "$ref": "#/definitions/IssuerCert"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "Issuers": {
            "description": "A collection of virtual issuers.",
            "properties": {
                "items": {
                    "description": "The list of the virtual issuers.",
                    "items": {
                        "$ref": "#/definitions/Issuer"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "JdbcAttributeSource": {
            "allOf": [
                {
                    "$ref": "#/definitions/AttributeSource"
                },
                {
                    "description": "The configured settings used to look up attributes from a JDBC data store.",
                    "properties": {
                        "columnNames": {
                            "description": "A list of column names used to construct the SQL query to retrieve data from the specified table in the datastore.",
                            "items": {
                                "type": "string"
                            },
                            "position": 50,
                            "type": "array"
                        },
                        "filter": {
                            "description": "The JDBC WHERE clause used to query your data store to locate a user record.",
                            "position": 60,
                            "type": "string"
                        },
                        "schema": {
                            "description": "Lists the table structure that stores information within a database. Some databases, such as Oracle, require a schema for a JDBC query. Other databases, such as MySQL, do not require a schema.",
                            "position": 30,
                            "type": "string"
                        },
                        "table": {
                            "description": "The name of the database table. The name is used to construct the SQL query to retrieve data from the data store.",
                            "position": 40,
                            "type": "string"
                        }
                    },
                    "required": [
                        "filter",
                        "table"
                    ],
                    "type": "object"
                }
            ]
        },
        "JdbcDataStore": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataStore"
                },
                {
                    "description": "A JDBC data store.",
                    "properties": {
                        "allowMultiValueAttributes": {
                            "description": "Indicates that this data store can select more than one record from a column and return the results as a multi-value attribute.",
                            "position": 100,
                            "type": "boolean"
                        },
                        "blockingTimeout": {
                            "description": "The amount of time in milliseconds a request waits to get a connection from the connection pool before it fails. Omitting this attribute will set the value to the connection pool default.",
                            "format": "int32",
                            "position": 130,
                            "type": "integer"
                        },
                        "connectionUrl": {
                            "description": "The default location of the JDBC database. This field is required if no mapping for JDBC database location and tags are specified.",
                            "position": 42,
                            "type": "string"
                        },
                        "connectionUrlTags": {
                            "description": "The set of connection URLs and associated tags for this JDBC data store.",
                            "items": {
                                "$ref": "#/definitions/JdbcTagConfig"
                            },
                            "position": 40,
                            "type": "array"
                        },
                        "driverClass": {
                            "description": "The name of the driver class used to communicate with the source database.",
                            "position": 50,
                            "type": "string"
                        },
                        "encryptedPassword": {
                            "description": "The encrypted password needed to access the database. If you do not want to update the stored value, this attribute should be passed back unchanged. Secret Reference may be provided in this field with format 'OBF:MGR:{secretManagerId}:{secretId}'.",
                            "position": 80,
                            "type": "string"
                        },
                        "idleTimeout": {
                            "description": "The length of time in minutes the connection can be idle in the pool before it is closed. Omitting this attribute will set the value to the connection pool default.",
                            "format": "int32",
                            "position": 140,
                            "type": "integer"
                        },
                        "maxPoolSize": {
                            "description": "The largest number of database connections in the connection pool for the given data store. Omitting this attribute will set the value to the connection pool default.",
                            "format": "int32",
                            "position": 120,
                            "type": "integer"
                        },
                        "minPoolSize": {
                            "description": "The smallest number of database connections in the connection pool for the given data store. Omitting this attribute will set the value to the connection pool default.",
                            "format": "int32",
                            "position": 110,
                            "type": "integer"
                        },
                        "name": {
                            "description": "The data store name with a unique value across all data sources. Omitting this attribute will set the value to a combination of the connection url and the username.",
                            "position": 45,
                            "type": "string"
                        },
                        "password": {
                            "description": "The password needed to access the database. GETs will not return this attribute. To update this field, specify the new value in this attribute.",
                            "position": 70,
                            "type": "string"
                        },
                        "userName": {
                            "description": "The name that identifies the user when connecting to the database.",
                            "position": 60,
                            "type": "string"
                        },
                        "validateConnectionSql": {
                            "description": "A simple SQL statement used by PingFederate at runtime to verify that the database connection is still active and to reconnect if needed.",
                            "position": 90,
                            "type": "string"
                        }
                    },
                    "required": [
                        "driverClass",
                        "userName"
                    ],
                    "type": "object"
                }
            ]
        },
        "JdbcDataStoreRepository": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataStoreRepository"
                },
                {
                    "description": "JDBC data store user repository.",
                    "properties": {
                        "jitRepositoryAttributeMapping": {
                            "additionalProperties": {
                                "$ref": "#/definitions/AttributeFulfillmentValue"
                            },
                            "description": "A list of user repository mappings from attribute names to their fulfillment values.",
                            "position": 40,
                            "type": "object"
                        },
                        "sqlMethod": {
                            "$ref": "#/definitions/SqlMethod",
                            "description": "The method to map attributes from the assertion directly to database table columns or to stored-procedure parameters.",
                            "position": 30
                        }
                    },
                    "required": [
                        "jitRepositoryAttributeMapping",
                        "sqlMethod"
                    ],
                    "type": "object"
                }
            ]
        },
        "JdbcTagConfig": {
            "description": "A JDBC data store's connection URLs and tags configuration. This is required if no default JDBC database location is specified.",
            "properties": {
                "connectionUrl": {
                    "description": "The location of the JDBC database. ",
                    "position": 10,
                    "type": "string"
                },
                "defaultSource": {
                    "description": "Whether this is the default connection. Defaults to false if not specified.",
                    "position": 60,
                    "readOnly": true,
                    "type": "boolean"
                },
                "tags": {
                    "description": "Tags associated with this data source.",
                    "position": 50,
                    "readOnly": true,
                    "type": "string"
                }
            },
            "required": [
                "connectionUrl"
            ],
            "type": "object"
        },
        "JitProvisioning": {
            "description": "The settings used to specify how and when to provision user accounts.",
            "properties": {
                "errorHandling": {
                    "description": "Specify behavior when provisioning request fails. The default is 'CONTINUE_SSO'.",
                    "enum": [
                        "CONTINUE_SSO",
                        "ABORT_SSO"
                    ],
                    "position": 40,
                    "type": "string"
                },
                "eventTrigger": {
                    "description": "Specify when provisioning occurs during assertion processing. The default is 'NEW_USER_ONLY'.",
                    "enum": [
                        "NEW_USER_ONLY",
                        "ALL_SAML_ASSERTIONS"
                    ],
                    "position": 30,
                    "type": "string"
                },
                "userAttributes": {
                    "$ref": "#/definitions/JitProvisioningUserAttributes",
                    "description": "Attributes from the SAML Assertion.",
                    "position": 10
                },
                "userRepository": {
                    "$ref": "#/definitions/DataStoreRepository",
                    "description": "The data store used as the local repository for user provisioning.",
                    "position": 20
                }
            },
            "required": [
                "userAttributes",
                "userRepository"
            ],
            "type": "object"
        },
        "JitProvisioningUserAttributes": {
            "properties": {
                "attributeContract": {
                    "description": "A list of user attributes that the IdP sends in the SAML assertion.",
                    "items": {
                        "$ref": "#/definitions/IdpBrowserSsoAttribute"
                    },
                    "position": 10,
                    "type": "array"
                },
                "doAttributeQuery": {
                    "description": "Specify whether to use only attributes from the SAML Assertion or retrieve additional attributes from the IdP. The default is false.",
                    "position": 20,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "JwksSettings": {
            "description": "JSON Web Key Set Settings.",
            "properties": {
                "jwks": {
                    "description": "JSON Web Key Set (JWKS) document of the OAuth client. Either 'jwks' or 'jwksUrl' must be provided if private key JWT client authentication or signed requests is enabled.  If the client signs its JWTs using an RSASSA-PSS signing algorithm, PingFederate must either use Java 11 or be integrated with a hardware security module (HSM) to process the digital signatures.",
                    "position": 20,
                    "type": "string"
                },
                "jwksUrl": {
                    "description": "JSON Web Key Set (JWKS) URL of the OAuth client. Either 'jwks' or 'jwksUrl' must be provided if private key JWT client authentication or signed requests is enabled.  If the client signs its JWTs using an RSASSA-PSS signing algorithm, PingFederate must either use Java 11 or be integrated with a hardware security module (HSM) to process the digital signatures.",
                    "position": 10,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "KerberosKeySet": {
            "description": "Represents a set of Kerberos encryption keys.",
            "properties": {
                "deactivatedAt": {
                    "description": "Time at which the key set was deactivated due to password change. This field is not populated if the key set is active.",
                    "format": "date-time",
                    "position": 20,
                    "type": "string"
                },
                "encryptedKeySet": {
                    "description": "The encrypted key set.",
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "encryptedKeySet"
            ],
            "type": "object"
        },
        "KerberosRealm": {
            "properties": {
                "connectionType": {
                    "description": "Controls how PingFederate connects to the Active Directory/Kerberos Realm. The default is: \"DIRECT\".",
                    "enum": [
                        "DIRECT",
                        "LDAP_GATEWAY"
                    ],
                    "position": 25,
                    "type": "string"
                },
                "id": {
                    "description": "The persistent, unique ID for the Kerberos Realm. It can be any combination of [a-z0-9._-]. This property is system-assigned if not specified.",
                    "position": 10,
                    "type": "string"
                },
                "kerberosEncryptedPassword": {
                    "description": "For GET requests, this field contains the encrypted Domain/Realm password, if one exists. For POST and PUT requests, if you wish to reuse the existing password, this field should be passed back unchanged. Only applicable when 'connectionType' is \"DIRECT\".",
                    "position": 60,
                    "type": "string"
                },
                "kerberosPassword": {
                    "description": "The Domain/Realm password. GETs will not return this attribute. To update this field, specify the new value in this attribute. Only applicable when 'connectionType' is \"DIRECT\".",
                    "position": 50,
                    "type": "string"
                },
                "kerberosRealmName": {
                    "description": "The Domain/Realm name used for display in UI screens.",
                    "position": 20,
                    "type": "string"
                },
                "kerberosUsername": {
                    "description": "The Domain/Realm username. Only required when 'connectionType' is \"DIRECT\".",
                    "position": 40,
                    "type": "string"
                },
                "keyDistributionCenters": {
                    "description": "The Domain Controller/Key Distribution Center Host Action Names. Only applicable when 'connectionType' is \"DIRECT\".",
                    "items": {
                        "type": "string"
                    },
                    "position": 30,
                    "type": "array"
                },
                "keySets": {
                    "description": "A list of key sets for validating Kerberos tickets. On POST or PUT, if 'retainPreviousKeysOnPasswordChange' is true, PingFederate automatically adds the key set for the current password to this list and removes expired key sets. If 'retainPreviousKeysOnPasswordChange' is false, this list is cleared. Only applicable when 'connectionType' is \"DIRECT\".",
                    "items": {
                        "$ref": "#/definitions/KerberosKeySet"
                    },
                    "position": 70,
                    "type": "array"
                },
                "ldapGatewayDataStoreRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "The LDAP gateway used by PingFederate to communicate with the Active Directory. Only required when 'connectionType' is \"LDAP_GATEWAY\".",
                    "position": 100
                },
                "retainPreviousKeysOnPasswordChange": {
                    "description": "Determines whether the previous encryption keys are retained when the password is updated. Retaining the previous keys allows existing Kerberos tickets to continue to be validated. The default is false. Only applicable when 'connectionType' is \"DIRECT\".",
                    "position": 80,
                    "type": "boolean"
                },
                "suppressDomainNameConcatenation": {
                    "description": "Controls whether the KDC hostnames and the realm name are concatenated in the auto-generated krb5.conf file. Default is false. Only applicable when 'connectionType' is \"DIRECT\".",
                    "position": 90,
                    "type": "boolean"
                }
            },
            "required": [
                "kerberosRealmName"
            ],
            "type": "object"
        },
        "KerberosRealms": {
            "description": "A collection of Kerberos Realms.",
            "properties": {
                "items": {
                    "description": "The actual list of kerberos realms.",
                    "items": {
                        "$ref": "#/definitions/KerberosRealm"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "KerberosRealmsSettings": {
            "description": "Settings for all of the Kerberos Realms.",
            "properties": {
                "debugLogOutput": {
                    "description": "Reference to the default logging.",
                    "position": 30,
                    "type": "boolean"
                },
                "forceTcp": {
                    "description": "Reference to the default security.",
                    "position": 10,
                    "type": "boolean"
                },
                "kdcRetries": {
                    "description": "Reference to the default Key Distribution Center Retries.",
                    "position": 20,
                    "type": "string"
                },
                "kdcTimeout": {
                    "description": "Reference to the default Key Distribution Center Timeout (in seconds).",
                    "position": 40,
                    "type": "string"
                },
                "keySetRetentionPeriodMins": {
                    "description": "The key set retention period in minutes. When 'retainPreviousKeysOnPasswordChange' is set to true for a realm, this setting determines how long keys will be retained after a password change occurs. If this field is omitted in a PUT request, the default of 610 minutes is applied.",
                    "format": "int32",
                    "position": 50,
                    "type": "integer"
                }
            },
            "required": [
                "kdcRetries",
                "kdcTimeout"
            ],
            "type": "object"
        },
        "KeyAlgorithm": {
            "description": "Details for a key algorithm.",
            "properties": {
                "defaultKeySize": {
                    "description": "Default key size for this algorithm.",
                    "format": "int32",
                    "position": 30,
                    "type": "integer"
                },
                "defaultSignatureAlgorithm": {
                    "description": "Default signature algorithm for this key algorithm.",
                    "position": 50,
                    "type": "string"
                },
                "keySizes": {
                    "description": "Possible key sizes for this algorithm, in bits.",
                    "items": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "position": 20,
                    "type": "array"
                },
                "name": {
                    "description": "Name of the key algorithm.",
                    "position": 10,
                    "type": "string"
                },
                "signatureAlgorithms": {
                    "description": "Possible signature algorithms for this key algorithm.",
                    "items": {
                        "type": "string"
                    },
                    "position": 40,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "KeyAlgorithms": {
            "description": "A collection of key algorithms.",
            "properties": {
                "items": {
                    "description": "The actual list of key algorithms.",
                    "items": {
                        "$ref": "#/definitions/KeyAlgorithm"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "KeyPairExportSettings": {
            "description": "Settings for exporting a key pair file from the system.",
            "properties": {
                "password": {
                    "description": "The password for the key pair file that is created.",
                    "type": "string"
                }
            },
            "required": [
                "password"
            ],
            "type": "object"
        },
        "KeyPairFile": {
            "description": "Represents the contents of a PKCS12 or PEM file.",
            "properties": {
                "cryptoProvider": {
                    "description": "Cryptographic Provider. This is only applicable if Hybrid HSM mode is true.",
                    "enum": [
                        "LOCAL",
                        "HSM"
                    ],
                    "position": 60,
                    "type": "string"
                },
                "encryptedPassword": {
                    "description": "Encrypted password for the file. Only applicable for bulk export/import operations. For bulk import operation, either password or encrypted password must be set.",
                    "position": 50,
                    "type": "string"
                },
                "fileData": {
                    "description": "Base-64 encoded PKCS12 or PEM file data. In the case of PEM, the raw (non-base-64) data is also accepted. In BCFIPS mode, only PEM with PBES2 and AES or Triple DES encryption is accepted and 128-bit salt is required.",
                    "position": 20,
                    "type": "string"
                },
                "format": {
                    "description": "Key pair file format. If specified, this field will control what file format is expected, otherwise the format will be auto-detected. In BCFIPS mode, only PEM is supported.",
                    "enum": [
                        "PKCS12",
                        "PEM"
                    ],
                    "position": 30,
                    "type": "string"
                },
                "id": {
                    "description": "The persistent, unique ID for the certificate. It can be any combination of [a-z0-9._-]. This property is system-assigned if not specified.",
                    "position": 10,
                    "type": "string"
                },
                "password": {
                    "description": "Password for the file. In BCFIPS mode, the password must be at least 14 characters.",
                    "position": 40,
                    "type": "string"
                }
            },
            "required": [
                "fileData",
                "password"
            ],
            "type": "object"
        },
        "KeyPairRotationSettings": {
            "description": "Key Pair Rotation Details",
            "properties": {
                "activationBufferDays": {
                    "description": "Buffer days before key pair expiration for activation of the new key pair.",
                    "format": "int32",
                    "position": 30,
                    "type": "integer"
                },
                "creationBufferDays": {
                    "description": "Buffer days before key pair expiration for creation of a new key pair.",
                    "format": "int32",
                    "position": 20,
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "keyAlgorithm": {
                    "description": "Key algorithm to be used while creating a new key pair. If this property is unset, the key algorithm of the original key pair will be used. Supported algorithms are available through the /keyPairs/keyAlgorithms endpoint.",
                    "position": 50,
                    "type": "string"
                },
                "keySize": {
                    "description": "Key size, in bits. If this property is unset, the key size of the original key pair will be used. Supported key sizes are available through the /keyPairs/keyAlgorithms endpoint.",
                    "format": "int32",
                    "position": 60,
                    "type": "integer"
                },
                "signatureAlgorithm": {
                    "description": "Required if the original key pair used SHA1 algorithm. If this property is unset, the default signature algorithm of the original key pair will be used. Supported signature algorithms are available through the /keyPairs/keyAlgorithms endpoint.",
                    "position": 70,
                    "type": "string"
                },
                "validDays": {
                    "description": "Valid days for the new key pair to be created. If this property is unset, the validity days of the original key pair will be used.",
                    "format": "int32",
                    "position": 40,
                    "type": "integer"
                }
            },
            "required": [
                "activationBufferDays",
                "creationBufferDays"
            ],
            "type": "object"
        },
        "KeyPairView": {
            "description": "Key pair details.",
            "properties": {
                "cryptoProvider": {
                    "description": "Cryptographic Provider. This is only applicable if Hybrid HSM mode is true.",
                    "enum": [
                        "LOCAL",
                        "HSM"
                    ],
                    "position": 120,
                    "type": "string"
                },
                "expires": {
                    "description": "The end date up until which the item is valid, in ISO 8601 format (UTC).",
                    "format": "date-time",
                    "position": 50,
                    "type": "string"
                },
                "id": {
                    "description": "The persistent, unique ID for the certificate.",
                    "position": 5,
                    "type": "string"
                },
                "issuerDN": {
                    "description": "The issuer's distinguished name.",
                    "position": 30,
                    "type": "string"
                },
                "keyAlgorithm": {
                    "description": "The public key algorithm.",
                    "position": 60,
                    "type": "string"
                },
                "keySize": {
                    "description": "The public key size.",
                    "format": "int32",
                    "position": 70,
                    "type": "integer"
                },
                "rotationSettings": {
                    "$ref": "#/definitions/KeyPairRotationSettings",
                    "description": "Key pair rotation settings. Only applicable to self-signed signing key pairs. Automatic key rotation is not currently available for SSL client or SSL server key pairs.",
                    "position": 140
                },
                "serialNumber": {
                    "description": "The serial number assigned by the CA.",
                    "position": 10,
                    "type": "string"
                },
                "sha1Fingerprint": {
                    "description": "SHA-1 fingerprint in Hex encoding.",
                    "position": 100,
                    "type": "string"
                },
                "sha256Fingerprint": {
                    "description": "SHA-256 fingerprint in Hex encoding.",
                    "position": 102,
                    "type": "string"
                },
                "signatureAlgorithm": {
                    "description": "The signature algorithm.",
                    "position": 80,
                    "type": "string"
                },
                "status": {
                    "description": "Status of the item.",
                    "enum": [
                        "VALID",
                        "EXPIRED",
                        "NOT_YET_VALID",
                        "REVOKED"
                    ],
                    "position": 110,
                    "type": "string"
                },
                "subjectAlternativeNames": {
                    "description": "The subject alternative names (SAN).",
                    "items": {
                        "type": "string"
                    },
                    "position": 25,
                    "type": "array"
                },
                "subjectDN": {
                    "description": "The subject's distinguished name.",
                    "position": 20,
                    "type": "string"
                },
                "validFrom": {
                    "description": "The start date from which the item is valid, in ISO 8601 format (UTC).",
                    "format": "date-time",
                    "position": 40,
                    "type": "string"
                },
                "version": {
                    "description": "The X.509 version to which the item conforms.",
                    "format": "int32",
                    "position": 90,
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "KeyPairViews": {
            "description": "A collection of KeyPairView items.",
            "properties": {
                "items": {
                    "description": "The actual list of KeyPairView instances.",
                    "items": {
                        "$ref": "#/definitions/KeyPairView"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "LdapAttributeSource": {
            "allOf": [
                {
                    "$ref": "#/definitions/AttributeSource"
                },
                {
                    "description": "The configured settings used to look up attributes from a LDAP data store.",
                    "properties": {
                        "baseDn": {
                            "description": "The base DN to search from. If not specified, the search will start at the LDAP's root.",
                            "position": 30,
                            "type": "string"
                        },
                        "binaryAttributeSettings": {
                            "additionalProperties": {
                                "$ref": "#/definitions/BinaryLdapAttributeSettings"
                            },
                            "description": "The advanced settings for binary LDAP attributes.",
                            "position": 60,
                            "type": "object"
                        },
                        "memberOfNestedGroup": {
                            "description": "Set this to true to return transitive group memberships for the 'memberOf' attribute.  This only applies for Active Directory data sources.  All other data sources will be set to false.",
                            "position": 70,
                            "type": "boolean"
                        },
                        "searchAttributes": {
                            "description": "A list of LDAP attributes returned from search and available for mapping.",
                            "items": {
                                "type": "string"
                            },
                            "position": 55,
                            "type": "array"
                        },
                        "searchFilter": {
                            "description": "The LDAP filter that will be used to lookup the objects from the directory.",
                            "position": 50,
                            "type": "string"
                        },
                        "searchScope": {
                            "description": "Determines the node depth of the query.",
                            "enum": [
                                "OBJECT",
                                "ONE_LEVEL",
                                "SUBTREE"
                            ],
                            "position": 40,
                            "type": "string"
                        }
                    },
                    "required": [
                        "searchFilter",
                        "searchScope"
                    ],
                    "type": "object"
                }
            ]
        },
        "LdapDataStore": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataStore"
                },
                {
                    "description": "A LDAP data store.",
                    "properties": {
                        "binaryAttributes": {
                            "description": "The list of LDAP attributes to be handled as binary data.",
                            "items": {
                                "type": "string"
                            },
                            "position": 200,
                            "type": "array"
                        },
                        "bindAnonymously": {
                            "description": "Whether username and password are required. The default value is false.",
                            "position": 60,
                            "type": "boolean"
                        },
                        "connectionTimeout": {
                            "description": "The maximum number of milliseconds that a connection attempt should be allowed to continue before returning an error. A value of -1 causes the pool to wait indefinitely. Omitting this attribute will set the value to the default value.",
                            "format": "int32",
                            "position": 190,
                            "type": "integer"
                        },
                        "createIfNecessary": {
                            "description": "Indicates whether temporary connections can be created when the Maximum Connections threshold is reached.",
                            "position": 130,
                            "type": "boolean"
                        },
                        "dnsTtl": {
                            "description": "The maximum time in milliseconds that DNS information are cached. Omitting this attribute will set the value to the default value.",
                            "format": "int32",
                            "position": 191,
                            "type": "integer"
                        },
                        "encryptedPassword": {
                            "description": "The encrypted password credential required to access the data store.  If you do not want to update the stored value, this attribute should be passed back unchanged. Secret Reference may be provided in this field with format 'OBF:MGR:{secretManagerId}:{secretId}'.",
                            "position": 90,
                            "type": "string"
                        },
                        "followLDAPReferrals": {
                            "description": "Follow LDAP Referrals in the domain tree. The default value is false. This property does not apply to PingDirectory as this functionality is configured in PingDirectory.",
                            "position": 102,
                            "type": "boolean"
                        },
                        "hostnames": {
                            "description": "The default LDAP host names. This field is required if no mapping for host names and tags are specified.",
                            "items": {
                                "type": "string"
                            },
                            "position": 42,
                            "type": "array"
                        },
                        "hostnamesTags": {
                            "description": "The set of host names and associated tags for this LDAP data store.",
                            "items": {
                                "$ref": "#/definitions/LdapTagConfig"
                            },
                            "position": 40,
                            "type": "array"
                        },
                        "ldapDnsSrvPrefix": {
                            "description": "The prefix value used to discover LDAP DNS SRV record. Omitting this attribute will set the value to the default value.",
                            "position": 192,
                            "type": "string"
                        },
                        "ldapType": {
                            "description": "A type that allows PingFederate to configure many provisioning settings automatically. The 'UNBOUNDID_DS' type has been deprecated, please use the 'PING_DIRECTORY' type instead.",
                            "enum": [
                                "ACTIVE_DIRECTORY",
                                "ORACLE_DIRECTORY_SERVER",
                                "ORACLE_UNIFIED_DIRECTORY",
                                "UNBOUNDID_DS",
                                "PING_DIRECTORY",
                                "GENERIC"
                            ],
                            "position": 50,
                            "type": "string"
                        },
                        "ldapsDnsSrvPrefix": {
                            "description": "The prefix value used to discover LDAPs DNS SRV record. Omitting this attribute will set the value to the default value.",
                            "position": 193,
                            "type": "string"
                        },
                        "maxConnections": {
                            "description": "The largest number of active connections that can remain in each pool without releasing extra ones. Omitting this attribute will set the value to the default value.",
                            "format": "int32",
                            "position": 150,
                            "type": "integer"
                        },
                        "maxWait": {
                            "description": "The maximum number of milliseconds the pool waits for a connection to become available when trying to obtain a connection from the pool. Omitting this attribute or setting a value of -1 causes the pool not to wait at all and to either create a new connection or produce an error (when no connections are available).",
                            "format": "int32",
                            "position": 160,
                            "type": "integer"
                        },
                        "minConnections": {
                            "description": "The smallest number of connections that can remain in each pool, without creating extra ones. Omitting this attribute will set the value to the default value.",
                            "format": "int32",
                            "position": 140,
                            "type": "integer"
                        },
                        "name": {
                            "description": "The data store name with a unique value across all data sources. Omitting this attribute will set the value to a combination of the hostname(s) and the principal.",
                            "position": 45,
                            "type": "string"
                        },
                        "password": {
                            "description": "The password credential required to access the data store. GETs will not return this attribute. To update this field, specify the new value in this attribute.",
                            "position": 80,
                            "type": "string"
                        },
                        "readTimeout": {
                            "description": "The maximum number of milliseconds a connection waits for a response to be returned before producing an error. A value of -1 causes the connection to wait indefinitely. Omitting this attribute will set the value to the default value.",
                            "format": "int32",
                            "position": 180,
                            "type": "integer"
                        },
                        "testOnBorrow": {
                            "description": "Indicates whether objects are validated before being borrowed from the pool.",
                            "position": 110,
                            "type": "boolean"
                        },
                        "testOnReturn": {
                            "description": "Indicates whether objects are validated before being returned to the pool.",
                            "position": 120,
                            "type": "boolean"
                        },
                        "timeBetweenEvictions": {
                            "description": "The frequency, in milliseconds, that the evictor cleans up the connections in the pool. A value of -1 disables the evictor. Omitting this attribute will set the value to the default value.",
                            "format": "int32",
                            "position": 170,
                            "type": "integer"
                        },
                        "useDnsSrvRecords": {
                            "description": "Use DNS SRV Records to discover LDAP server information. The default value is false.",
                            "position": 101,
                            "type": "boolean"
                        },
                        "useSsl": {
                            "description": "Connects to the LDAP data store using secure SSL/TLS encryption (LDAPS). The default value is false.",
                            "position": 100,
                            "type": "boolean"
                        },
                        "userDN": {
                            "description": "The username credential required to access the data store.",
                            "position": 70,
                            "type": "string"
                        },
                        "verifyHost": {
                            "description": "Verifies that the presented server certificate includes the address to which the client intended to establish a connection. Omitting this attribute will set the value to true.",
                            "position": 131,
                            "type": "boolean"
                        }
                    },
                    "required": [
                        "ldapType"
                    ],
                    "type": "object"
                }
            ]
        },
        "LdapDataStoreAttribute": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataStoreAttribute"
                },
                {
                    "description": "LDAP data store attribute.",
                    "properties": {},
                    "type": "object"
                }
            ]
        },
        "LdapDataStoreConfig": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataStoreConfig"
                },
                {
                    "description": "LDAP data store configuration.",
                    "properties": {
                        "auxiliaryObjectClasses": {
                            "description": "The Auxiliary Object Classes used by the new objects stored in the LDAP data store.",
                            "items": {
                                "type": "string"
                            },
                            "position": 70,
                            "type": "array"
                        },
                        "baseDn": {
                            "description": "The base DN to search from. If not specified, the search will start at the LDAP's root.",
                            "position": 30,
                            "type": "string"
                        },
                        "createPattern": {
                            "description": "The Relative DN Pattern that will be used to create objects in the directory.",
                            "position": 50,
                            "type": "string"
                        },
                        "dataStoreMapping": {
                            "additionalProperties": {
                                "$ref": "#/definitions/DataStoreAttribute"
                            },
                            "description": "The data store mapping.",
                            "position": 100,
                            "type": "object"
                        },
                        "objectClass": {
                            "description": "The Object Class used by the new objects stored in the LDAP data store.",
                            "position": 60,
                            "type": "string"
                        }
                    },
                    "required": [
                        "baseDn",
                        "createPattern",
                        "dataStoreMapping",
                        "objectClass"
                    ],
                    "type": "object"
                }
            ]
        },
        "LdapDataStoreRepository": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataStoreRepository"
                },
                {
                    "description": "LDAP data store user repository.",
                    "properties": {
                        "baseDn": {
                            "description": "The base DN to search from. If not specified, the search will start at the LDAP's root.",
                            "position": 30,
                            "type": "string"
                        },
                        "jitRepositoryAttributeMapping": {
                            "additionalProperties": {
                                "$ref": "#/definitions/AttributeFulfillmentValue"
                            },
                            "description": "A list of user repository mappings from attribute names to their fulfillment values.",
                            "position": 50,
                            "type": "object"
                        },
                        "uniqueUserIdFilter": {
                            "description": "The expression that results in a unique user identifier, when combined with the Base DN.",
                            "position": 40,
                            "type": "string"
                        }
                    },
                    "required": [
                        "jitRepositoryAttributeMapping",
                        "uniqueUserIdFilter"
                    ],
                    "type": "object"
                }
            ]
        },
        "LdapInboundProvisioningUserRepository": {
            "allOf": [
                {
                    "$ref": "#/definitions/InboundProvisioningUserRepository"
                },
                {
                    "description": "LDAP Active Directory data store user repository",
                    "properties": {
                        "baseDn": {
                            "description": "The base DN to search from. If not specified, the search will start at the LDAP's root.",
                            "position": 30,
                            "type": "string"
                        },
                        "dataStoreRef": {
                            "$ref": "#/definitions/ResourceLink",
                            "description": "Reference to the associated data store.",
                            "position": 20
                        },
                        "uniqueGroupIdFilter": {
                            "description": "The expression that results in a unique group identifier, when combined with the Base DN.",
                            "position": 50,
                            "type": "string"
                        },
                        "uniqueUserIdFilter": {
                            "description": "The expression that results in a unique user identifier, when combined with the Base DN.",
                            "position": 40,
                            "type": "string"
                        }
                    },
                    "required": [
                        "dataStoreRef",
                        "uniqueGroupIdFilter",
                        "uniqueUserIdFilter"
                    ],
                    "type": "object"
                }
            ]
        },
        "LdapTagConfig": {
            "description": "An LDAP data store's hostnames and tags configuration. This is required if no default hostname is specified.",
            "properties": {
                "defaultSource": {
                    "description": "Whether this is the default connection. Defaults to false if not specified.",
                    "position": 60,
                    "readOnly": true,
                    "type": "boolean"
                },
                "hostnames": {
                    "description": "The LDAP host names.",
                    "items": {
                        "type": "string"
                    },
                    "position": 10,
                    "type": "array"
                },
                "tags": {
                    "description": "Tags associated with this data source.",
                    "position": 50,
                    "readOnly": true,
                    "type": "string"
                }
            },
            "required": [
                "hostnames"
            ],
            "type": "object"
        },
        "LicenseAgreementInfo": {
            "description": "PingFederate License Agreement information.",
            "properties": {
                "accepted": {
                    "description": "Indicates whether license agreement has been accepted. The default value is false.",
                    "position": 10,
                    "type": "boolean"
                },
                "licenseAgreementUrl": {
                    "description": "URL to license agreement.",
                    "position": 5,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "LicenseEventNotificationSettings": {
            "description": "Notification settings for licensing events.",
            "properties": {
                "emailAddress": {
                    "description": "The email address where notifications are sent.",
                    "position": 10,
                    "type": "string"
                },
                "notificationPublisherRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the associated notification publisher.",
                    "position": 20
                }
            },
            "required": [
                "emailAddress"
            ],
            "type": "object"
        },
        "LicenseFeatureView": {
            "description": "PingFederate license feature details.",
            "properties": {
                "name": {
                    "description": "The name of the license feature.",
                    "position": 10,
                    "type": "string"
                },
                "value": {
                    "description": "The value of the license feature.",
                    "position": 20,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "LicenseFile": {
            "description": "License to import.",
            "properties": {
                "fileData": {
                    "description": "The base64-encoded license file.",
                    "type": "string"
                }
            },
            "required": [
                "fileData"
            ],
            "type": "object"
        },
        "LicenseView": {
            "description": "PingFederate License details.",
            "properties": {
                "bridgeMode": {
                    "description": "Indicates whether this license is a bridge license or not.",
                    "position": 90,
                    "type": "boolean"
                },
                "enforcementType": {
                    "description": "The enforcement type is a 3-bit binary value, expressed as a decimal digit. The bits from left to right are: <br>1: Shutdown on expire <br>2: Notify on expire <br>4: Enforce minor version <br>if all three enforcements are active, the enforcement type will be 7 (1 + 2 + 4); if only the first two are active, you have an enforcement type of 3 (1 + 2). ",
                    "position": 35,
                    "type": "string"
                },
                "expirationDate": {
                    "description": "The expiration date value from the license file (if applicable).",
                    "format": "date-time",
                    "position": 30,
                    "type": "string"
                },
                "features": {
                    "description": "Other licence features, if applicable.",
                    "items": {
                        "$ref": "#/definitions/LicenseFeatureView"
                    },
                    "position": 100,
                    "type": "array"
                },
                "gracePeriod": {
                    "description": "Number of days provided as grace period, past the expiration date (if applicable).",
                    "format": "int64",
                    "position": 55,
                    "type": "integer"
                },
                "id": {
                    "description": "Unique identifier of a license.",
                    "position": 10,
                    "type": "string"
                },
                "issueDate": {
                    "description": "The issue date value from the license file.",
                    "format": "date-time",
                    "position": 25,
                    "type": "string"
                },
                "licenseGroups": {
                    "description": "License connection groups, if applicable.",
                    "items": {
                        "$ref": "#/definitions/ConnectionGroupLicenseView"
                    },
                    "position": 65,
                    "type": "array"
                },
                "maxConnections": {
                    "description": "Maximum number of connections that can be created under this license (if applicable).",
                    "format": "int32",
                    "position": 15,
                    "type": "integer"
                },
                "name": {
                    "description": "Name of the person the license was issued to.",
                    "position": 5,
                    "type": "string"
                },
                "nodeLimit": {
                    "description": "Maximum number of clustered nodes allowed under this license (if applicable).",
                    "format": "int32",
                    "position": 60,
                    "type": "integer"
                },
                "oauthEnabled": {
                    "description": "Indicates whether OAuth role is enabled for this license.",
                    "position": 70,
                    "type": "boolean"
                },
                "organization": {
                    "description": "The organization value from the license file.",
                    "position": 50,
                    "type": "string"
                },
                "product": {
                    "description": "The Ping Identity product value from the license file.",
                    "position": 45,
                    "type": "string"
                },
                "provisioningEnabled": {
                    "description": "Indicates whether Provisioning role is enabled for this license.",
                    "position": 80,
                    "type": "boolean"
                },
                "tier": {
                    "description": "The tier value from the license file. The possible values are FREE, PERPETUAL or SUBSCRIPTION.",
                    "position": 20,
                    "type": "string"
                },
                "usedConnections": {
                    "description": "Number of used connections under this license.",
                    "format": "int32",
                    "position": 16,
                    "type": "integer"
                },
                "version": {
                    "description": "The Ping Identity product version from the license file.",
                    "position": 40,
                    "type": "string"
                },
                "wsTrustEnabled": {
                    "description": "Indicates whether WS-Trust role is enabled for this license.",
                    "position": 75,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "LocalIdentityAuthSource": {
            "description": "An authentication source name.",
            "properties": {
                "id": {
                    "description": "The persistent, unique ID for the local identity authentication source. It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned if not specified.",
                    "position": 10,
                    "type": "string"
                },
                "source": {
                    "description": "The local identity authentication source. Source is unique.",
                    "position": 20,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "LocalIdentityAuthSourceUpdatePolicy": {
            "description": "Settings to determine whether to store attributes that came from third-party authentication sources.",
            "properties": {
                "retainAttributes": {
                    "description": "Whether or not to keep attributes after user disconnects.",
                    "position": 20,
                    "type": "boolean"
                },
                "storeAttributes": {
                    "description": "Whether or not to store attributes that came from authentication sources.",
                    "position": 10,
                    "type": "boolean"
                },
                "updateAttributes": {
                    "description": "Whether or not to update attributes when users authenticate.",
                    "position": 30,
                    "type": "boolean"
                },
                "updateInterval": {
                    "description": "The minimum number of days between updates.",
                    "format": "double",
                    "position": 40,
                    "type": "number"
                }
            },
            "type": "object"
        },
        "LocalIdentityField": {
            "description": "Local identity profile fields.",
            "discriminator": "type",
            "properties": {
                "attributes": {
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Attributes of the local identity field.",
                    "position": 70,
                    "type": "object"
                },
                "id": {
                    "description": "Id of the local identity field.",
                    "position": 20,
                    "type": "string"
                },
                "label": {
                    "description": "Label of the local identity field.",
                    "position": 40,
                    "type": "string"
                },
                "profilePageField": {
                    "description": "Whether this is a profile page field or not.",
                    "position": 60,
                    "type": "boolean"
                },
                "registrationPageField": {
                    "description": "Whether this is a registration page field or not.",
                    "position": 50,
                    "type": "boolean"
                },
                "type": {
                    "description": "The type of the local identity field.",
                    "enum": [
                        "CHECKBOX",
                        "CHECKBOX_GROUP",
                        "DATE",
                        "DROP_DOWN",
                        "EMAIL",
                        "PHONE",
                        "TEXT",
                        "HIDDEN"
                    ],
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "id",
                "label",
                "type"
            ],
            "type": "object"
        },
        "LocalIdentityMappingPolicyAction": {
            "allOf": [
                {
                    "$ref": "#/definitions/PolicyAction"
                },
                {
                    "description": "A local identity profile selection action.",
                    "properties": {
                        "inboundMapping": {
                            "$ref": "#/definitions/AttributeMapping",
                            "description": "Inbound mappings into the local identity profile fields.",
                            "position": 40
                        },
                        "localIdentityRef": {
                            "$ref": "#/definitions/ResourceLink",
                            "description": "Reference to the associated local identity profile.",
                            "position": 30
                        },
                        "outboundAttributeMapping": {
                            "$ref": "#/definitions/AttributeMapping",
                            "description": "Authentication policy contract mappings associated with this local Identity profile.",
                            "position": 50
                        }
                    },
                    "required": [
                        "localIdentityRef",
                        "outboundAttributeMapping"
                    ],
                    "type": "object"
                }
            ]
        },
        "LocalIdentityProfile": {
            "description": "A local identity profile.",
            "properties": {
                "apcId": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "The reference to the authentication policy contract to use for this local identity profile.",
                    "position": 30
                },
                "authSourceUpdatePolicy": {
                    "$ref": "#/definitions/LocalIdentityAuthSourceUpdatePolicy",
                    "description": "The attribute update policy for authentication sources.",
                    "position": 45
                },
                "authSources": {
                    "description": "The local identity authentication sources. Sources are unique.",
                    "items": {
                        "$ref": "#/definitions/LocalIdentityAuthSource"
                    },
                    "position": 40,
                    "type": "array"
                },
                "dataStoreConfig": {
                    "$ref": "#/definitions/DataStoreConfig",
                    "description": "The local identity profile data store configuration.",
                    "position": 100
                },
                "emailVerificationConfig": {
                    "$ref": "#/definitions/EmailVerificationConfig",
                    "description": "The local identity email verification configuration.",
                    "position": 90
                },
                "fieldConfig": {
                    "$ref": "#/definitions/FieldConfig",
                    "description": "The local identity profile field configuration.",
                    "position": 80
                },
                "id": {
                    "description": "The persistent, unique ID for the local identity profile. It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned if not specified.",
                    "position": 10,
                    "type": "string"
                },
                "name": {
                    "description": "The local identity profile name. Name is unique.",
                    "position": 20,
                    "type": "string"
                },
                "profileConfig": {
                    "$ref": "#/definitions/ProfileConfig",
                    "description": "The local identity profile management configuration.",
                    "position": 70
                },
                "profileEnabled": {
                    "description": "Whether the profile configuration is enabled or not.",
                    "position": 110,
                    "type": "boolean"
                },
                "registrationConfig": {
                    "$ref": "#/definitions/RegistrationConfig",
                    "description": "The local identity profile registration configuration.",
                    "position": 60
                },
                "registrationEnabled": {
                    "description": "Whether the registration configuration is enabled or not.",
                    "position": 50,
                    "type": "boolean"
                }
            },
            "required": [
                "apcId",
                "name"
            ],
            "type": "object"
        },
        "LocalIdentityProfiles": {
            "description": "A collection of local identity profiles.",
            "properties": {
                "items": {
                    "description": "The actual list of local identity profiles.",
                    "items": {
                        "$ref": "#/definitions/LocalIdentityProfile"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "MetadataEventNotificationSettings": {
            "description": "Notification settings for metadata update events.",
            "properties": {
                "emailAddress": {
                    "description": "The email address where metadata update notifications are sent.",
                    "position": 10,
                    "type": "string"
                },
                "notificationPublisherRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the associated notification publisher.",
                    "position": 20
                }
            },
            "required": [
                "emailAddress"
            ],
            "type": "object"
        },
        "MetadataLifetimeSettings": {
            "description": "Metadata lifetime settings.",
            "properties": {
                "cacheDuration": {
                    "description": "This field adjusts the validity of your metadata in minutes. The default value is 1440 (1 day).",
                    "format": "int32",
                    "position": 10,
                    "type": "integer"
                },
                "reloadDelay": {
                    "description": "This field adjusts the frequency of automatic reloading of SAML metadata in minutes. The default value is 1440 (1 day).",
                    "format": "int64",
                    "position": 20,
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "MetadataSigningSettings": {
            "description": "Metadata signing settings. If metadata is not signed, this model will be empty.",
            "properties": {
                "signatureAlgorithm": {
                    "description": "Signature algorithm. If this property is unset, the default signature algorithm for the key algorithm will be used. Supported signature algorithms are available through the /keyPairs/keyAlgorithms endpoint.",
                    "position": 20,
                    "type": "string"
                },
                "signingKeyRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the key used for metadata signing. Refer to /keyPair/signing to get the list of available signing key pairs.",
                    "position": 10
                }
            },
            "type": "object"
        },
        "MetadataUrl": {
            "description": "Metadata URL and corresponding Signature Verification Certificate.",
            "properties": {
                "certView": {
                    "$ref": "#/definitions/CertView",
                    "description": "The Signature Verification Certificate details. This property is read-only and is always ignored on a POST or PUT.",
                    "position": 40
                },
                "id": {
                    "description": "The persistent, unique ID for the Metadata Url. It can be any combination of [a-z0-9._-]. This property is system-assigned if not specified.",
                    "position": 10,
                    "type": "string"
                },
                "name": {
                    "description": "The name for the Metadata URL.",
                    "position": 20,
                    "type": "string"
                },
                "url": {
                    "description": "The Metadata URL.",
                    "position": 30,
                    "type": "string"
                },
                "validateSignature": {
                    "description": "Perform Metadata Signature Validation. The default value is TRUE.",
                    "position": 60,
                    "type": "boolean"
                },
                "x509File": {
                    "$ref": "#/definitions/X509File",
                    "description": "Data of the Signature Verification Certificate for the Metadata URL.",
                    "position": 50
                }
            },
            "required": [
                "name",
                "url"
            ],
            "type": "object"
        },
        "MetadataUrls": {
            "properties": {
                "items": {
                    "description": "The list of Metadata URL items.",
                    "items": {
                        "$ref": "#/definitions/MetadataUrl"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "MoveItemRequest": {
            "description": "Metadata from a request about where to move a resource",
            "properties": {
                "location": {
                    "description": "Enumeration for where to move the item.",
                    "enum": [
                        "START",
                        "END",
                        "BEFORE",
                        "AFTER"
                    ],
                    "position": 10,
                    "type": "string"
                },
                "moveToId": {
                    "description": "When moving an item relative to another, this value indicates the target move-to ID.",
                    "position": 20,
                    "type": "string"
                }
            },
            "required": [
                "location"
            ],
            "type": "object"
        },
        "NewKeyPairSettings": {
            "description": "Settings for creating a new key pair.",
            "properties": {
                "city": {
                    "description": "City.",
                    "position": 40,
                    "type": "string"
                },
                "commonName": {
                    "description": "Common name for key pair subject.",
                    "position": 10,
                    "type": "string"
                },
                "country": {
                    "description": "Country.",
                    "position": 60,
                    "type": "string"
                },
                "cryptoProvider": {
                    "description": "Cryptographic Provider.  This is only applicable if Hybrid HSM mode is true.",
                    "enum": [
                        "LOCAL",
                        "HSM"
                    ],
                    "position": 110,
                    "type": "string"
                },
                "id": {
                    "description": "The persistent, unique ID for the certificate. It can be any combination of [a-z0-9._-]. This property is system-assigned if not specified.",
                    "position": 5,
                    "type": "string"
                },
                "keyAlgorithm": {
                    "description": "Key generation algorithm. Supported algorithms are available through the /keyPairs/keyAlgorithms endpoint.",
                    "position": 80,
                    "type": "string"
                },
                "keySize": {
                    "description": "Key size, in bits. If this property is unset, the default size for the key algorithm will be used. Supported key sizes are available through the /keyPairs/keyAlgorithms endpoint.",
                    "format": "int32",
                    "position": 90,
                    "type": "integer"
                },
                "organization": {
                    "description": "Organization.",
                    "position": 20,
                    "type": "string"
                },
                "organizationUnit": {
                    "description": "Organization unit.",
                    "position": 30,
                    "type": "string"
                },
                "signatureAlgorithm": {
                    "description": "Signature algorithm. If this property is unset, the default signature algorithm for the key algorithm will be used. Supported signature algorithms are available through the /keyPairs/keyAlgorithms endpoint.",
                    "position": 100,
                    "type": "string"
                },
                "state": {
                    "description": "State.",
                    "position": 50,
                    "type": "string"
                },
                "subjectAlternativeNames": {
                    "description": "The subject alternative names (SAN).",
                    "items": {
                        "type": "string"
                    },
                    "position": 15,
                    "type": "array"
                },
                "validDays": {
                    "description": "Number of days the key pair will be valid for.",
                    "format": "int32",
                    "position": 70,
                    "type": "integer"
                }
            },
            "required": [
                "commonName",
                "country",
                "keyAlgorithm",
                "organization",
                "validDays"
            ],
            "type": "object"
        },
        "NotificationPublisher": {
            "allOf": [
                {
                    "$ref": "#/definitions/PluginInstance"
                },
                {
                    "description": "A notification publisher plugin instance.",
                    "properties": {},
                    "type": "object"
                }
            ]
        },
        "NotificationPublisherDescriptor": {
            "allOf": [
                {
                    "$ref": "#/definitions/PluginDescriptor"
                },
                {
                    "description": "A notification publisher plugin descriptor.",
                    "properties": {},
                    "type": "object"
                }
            ]
        },
        "NotificationPublisherDescriptors": {
            "description": "A collection of notification publisher plugin descriptors.",
            "properties": {
                "items": {
                    "description": "The list of notification publisher plugin descriptors.",
                    "items": {
                        "$ref": "#/definitions/NotificationPublisherDescriptor"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NotificationPublishers": {
            "description": "A collection of notification publisher plugin instances.",
            "properties": {
                "items": {
                    "description": "The list of notification publisher plugin instances.",
                    "items": {
                        "$ref": "#/definitions/NotificationPublisher"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "NotificationPublishersSettings": {
            "description": "General notification publisher settings.",
            "properties": {
                "defaultNotificationPublisherRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the default notification publisher, if one is defined.",
                    "position": 10
                }
            },
            "type": "object"
        },
        "NotificationSettings": {
            "description": "Settings for notifications relating to licensing and certificate expiration.",
            "properties": {
                "accountChangesNotificationPublisherRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the associated notification publisher for admin user account changes.",
                    "position": 40
                },
                "certificateExpirations": {
                    "$ref": "#/definitions/CertificateExpirationNotificationSettings",
                    "description": "Settings for certificate expiration notifications.",
                    "position": 20
                },
                "licenseEvents": {
                    "$ref": "#/definitions/LicenseEventNotificationSettings",
                    "description": "Settings for license event notifications.",
                    "position": 10
                },
                "metadataNotificationSettings": {
                    "$ref": "#/definitions/MetadataEventNotificationSettings",
                    "description": "Settings for metadata update event notifications.",
                    "position": 50
                },
                "notifyAdminUserPasswordChanges": {
                    "description": "Determines whether admin users are notified through email when their account is changed.",
                    "position": 30,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "OAuthOidcKeysSettings": {
            "description": "Setting for OAuth/OpenID Connect signing and decryption key settings.",
            "properties": {
                "p256ActiveCertRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the P-256 key currently active.",
                    "position": 15
                },
                "p256DecryptionActiveCertRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the P-256 decryption key currently active.",
                    "position": 75
                },
                "p256DecryptionPreviousCertRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the P-256 decryption key previously active.",
                    "position": 80
                },
                "p256DecryptionPublishX5cParameter": {
                    "description": "Enable publishing of the P-256 certificate chain associated with the active key.",
                    "position": 85,
                    "type": "boolean"
                },
                "p256PreviousCertRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the P-256 key previously active.",
                    "position": 20
                },
                "p256PublishX5cParameter": {
                    "description": "Enable publishing of the P-256 certificate chain associated with the active key.",
                    "position": 25,
                    "type": "boolean"
                },
                "p384ActiveCertRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the P-384 key currently active.",
                    "position": 30
                },
                "p384DecryptionActiveCertRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the P-384 decryption key currently active.",
                    "position": 90
                },
                "p384DecryptionPreviousCertRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the P-384 decryption key previously active.",
                    "position": 95
                },
                "p384DecryptionPublishX5cParameter": {
                    "description": "Enable publishing of the P-384 certificate chain associated with the active key.",
                    "position": 100,
                    "type": "boolean"
                },
                "p384PreviousCertRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the P-384 key previously active.",
                    "position": 35
                },
                "p384PublishX5cParameter": {
                    "description": "Enable publishing of the P-384 certificate chain associated with the active key.",
                    "position": 40,
                    "type": "boolean"
                },
                "p521ActiveCertRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the P-521 key currently active.",
                    "position": 45
                },
                "p521DecryptionActiveCertRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the P-521 decryption key currently active.",
                    "position": 105
                },
                "p521DecryptionPreviousCertRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the P-521 decryption key previously active.",
                    "position": 110
                },
                "p521DecryptionPublishX5cParameter": {
                    "description": "Enable publishing of the P-521 certificate chain associated with the active key.",
                    "position": 115,
                    "type": "boolean"
                },
                "p521PreviousCertRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the P-521 key previously active.",
                    "position": 50
                },
                "p521PublishX5cParameter": {
                    "description": "Enable publishing of the P-521 certificate chain associated with the active key.",
                    "position": 55,
                    "type": "boolean"
                },
                "rsaActiveCertRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the RSA key currently active.",
                    "position": 60
                },
                "rsaDecryptionActiveCertRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the RSA decryption key currently active.",
                    "position": 120
                },
                "rsaDecryptionPreviousCertRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the RSA decryption key previously active.",
                    "position": 125
                },
                "rsaDecryptionPublishX5cParameter": {
                    "description": "Enable publishing of the RSA certificate chain associated with the active key.",
                    "position": 130,
                    "type": "boolean"
                },
                "rsaPreviousCertRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the RSA key previously active.",
                    "position": 65
                },
                "rsaPublishX5cParameter": {
                    "description": "Enable publishing of the RSA certificate chain associated with the active key.",
                    "position": 70,
                    "type": "boolean"
                },
                "staticJwksEnabled": {
                    "description": "Enable static keys.",
                    "position": 10,
                    "type": "boolean"
                }
            },
            "required": [
                "staticJwksEnabled"
            ],
            "type": "object"
        },
        "OAuthRole": {
            "description": "This property has been deprecated and is no longer used. OAuth and OpenID Connect are always enabled.",
            "properties": {
                "enableOauth": {
                    "description": "Enable OAuth 2.0 Authorization Server (AS) Role.",
                    "position": 10,
                    "type": "boolean"
                },
                "enableOpenIdConnect": {
                    "description": "Enable Open ID Connect.",
                    "position": 20,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "OIDCClientCredentials": {
            "description": "The OpenID Connect Client Credentials settings. This is required for an OIDC Connection.",
            "properties": {
                "clientId": {
                    "description": "The OpenID Connect client identitification.",
                    "position": 10,
                    "type": "string"
                },
                "clientSecret": {
                    "description": "The OpenID Connect client secret. To update the client secret, specify the plaintext value in this field.  This field will not be populated for GET requests.",
                    "position": 20,
                    "type": "string"
                },
                "encryptedSecret": {
                    "description": "For GET requests, this field contains the encrypted client secret, if one exists.  For POST and PUT requests, if you wish to reuse the existing secret, this field should be passed back unchanged.",
                    "position": 30,
                    "type": "string"
                }
            },
            "required": [
                "clientId"
            ],
            "type": "object"
        },
        "OIDCProviderSettings": {
            "description": "The OpenID Provider settings.",
            "properties": {
                "authenticationScheme": {
                    "description": "The OpenID Connect Authentication Scheme. This is required for Authentication using Code Flow. ",
                    "enum": [
                        "BASIC",
                        "POST",
                        "PRIVATE_KEY_JWT"
                    ],
                    "position": 130,
                    "type": "string"
                },
                "authenticationSigningAlgorithm": {
                    "description": "The authentication signing algorithm for token endpoint PRIVATE_KEY_JWT authentication. Only asymmetric algorithms are allowed. For RSASSA-PSS signing algorithm, PingFederate must be integrated with a hardware security module (HSM) or Java 11.",
                    "enum": [
                        "NONE",
                        "HS256",
                        "HS384",
                        "HS512",
                        "RS256",
                        "RS384",
                        "RS512",
                        "ES256",
                        "ES384",
                        "ES512",
                        "PS256",
                        "PS384",
                        "PS512"
                    ],
                    "position": 140,
                    "type": "string"
                },
                "authorizationEndpoint": {
                    "description": "URL of the OpenID Provider's OAuth 2.0 Authorization Endpoint.",
                    "position": 110,
                    "type": "string"
                },
                "enablePKCE": {
                    "description": "Enable Proof Key for Code Exchange (PKCE). When enabled, the client sends an SHA-256 code challenge and corresponding code verifier to the OpenID Provider during the authorization code flow.",
                    "position": 155,
                    "type": "boolean"
                },
                "jwksURL": {
                    "description": "URL of the OpenID Provider's JSON Web Key Set [JWK] document.",
                    "position": 180,
                    "type": "string"
                },
                "loginType": {
                    "description": "The OpenID Connect login type. These values maps to: <br>  CODE: Authentication using Code Flow <br> POST: Authentication using Form Post <br> POST_AT: Authentication using Form Post with Access Token",
                    "enum": [
                        "CODE",
                        "POST",
                        "POST_AT"
                    ],
                    "position": 120,
                    "type": "string"
                },
                "requestParameters": {
                    "description": "A list of request parameters. Request parameters with same name but different attribute values are treated as a multi-valued request parameter.",
                    "items": {
                        "$ref": "#/definitions/OIDCRequestParameter"
                    },
                    "position": 190,
                    "type": "array"
                },
                "requestSigningAlgorithm": {
                    "description": "The request signing algorithm. Required only if you wish to use signed requests. Only asymmetric algorithms are allowed. For RSASSA-PSS signing algorithm, PingFederate must be integrated with a hardware security module (HSM) or Java 11.",
                    "enum": [
                        "NONE",
                        "HS256",
                        "HS384",
                        "HS512",
                        "RS256",
                        "RS384",
                        "RS512",
                        "ES256",
                        "ES384",
                        "ES512",
                        "PS256",
                        "PS384",
                        "PS512"
                    ],
                    "position": 150,
                    "type": "string"
                },
                "scopes": {
                    "description": "Space separated scope values that the OpenID Provider supports.",
                    "position": 100,
                    "type": "string"
                },
                "tokenEndpoint": {
                    "description": "URL of the OpenID Provider's OAuth 2.0 Token Endpoint.",
                    "position": 160,
                    "type": "string"
                },
                "userInfoEndpoint": {
                    "description": "URL of the OpenID Provider's UserInfo Endpoint.",
                    "position": 170,
                    "type": "string"
                }
            },
            "required": [
                "authorizationEndpoint",
                "jwksURL",
                "loginType",
                "scopes"
            ],
            "type": "object"
        },
        "OIDCRequestParameter": {
            "description": "An OIDC custom request parameter.",
            "properties": {
                "applicationEndpointOverride": {
                    "description": "Indicates whether the parameter value can be overridden by an Application Endpoint parameter",
                    "position": 40,
                    "type": "boolean"
                },
                "attributeValue": {
                    "$ref": "#/definitions/AttributeFulfillmentValue",
                    "description": "A request parameter attribute value with source type.",
                    "position": 20
                },
                "name": {
                    "description": "Request parameter name.",
                    "position": 10,
                    "type": "string"
                },
                "value": {
                    "description": "A request parameter value. A parameter can have either a value or a attribute value but not both. Value set here will be converted to an attribute value of source type TEXT. An empty value will be converted to attribute value of source type NO_MAPPING.",
                    "position": 30,
                    "type": "string"
                }
            },
            "required": [
                "applicationEndpointOverride",
                "attributeValue",
                "name"
            ],
            "type": "object"
        },
        "OIDCSessionSettings": {
            "description": "Settings relating to OpenID Connect session management.",
            "properties": {
                "revokeUserSessionOnLogout": {
                    "description": "Determines whether the user's session is revoked on logout. This property is now available under /session/settings and should be accessed through that resource.",
                    "position": 20,
                    "type": "boolean"
                },
                "sessionRevocationLifetime": {
                    "description": "How long a session revocation is tracked and stored, in minutes. This property is now available under /session/settings and should be accessed through that resource.",
                    "format": "int32",
                    "position": 30,
                    "type": "integer"
                },
                "trackUserSessionsForLogout": {
                    "description": "Determines whether user sessions are tracked for logout. This property is now available under /oauth/authServerSettings and should be accessed through that resource.",
                    "position": 10,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "OcspSettings": {
            "description": "OCSP settings.",
            "properties": {
                "actionOnResponderUnavailable": {
                    "description": "Action on responder unavailable. This value defaults to  \"CONTINUE\".",
                    "position": 90,
                    "type": "string"
                },
                "actionOnStatusUnknown": {
                    "description": "Action on status unknown. This value defaults to  \"FAIL\".",
                    "position": 100,
                    "type": "string"
                },
                "actionOnUnsuccessfulResponse": {
                    "description": "Action on unsuccessful response. This value defaults to  \"FAIL\".",
                    "position": 110,
                    "type": "string"
                },
                "currentUpdateGracePeriod": {
                    "description": "Current update grace period in minutes. This value defaults to \"5\".",
                    "format": "int32",
                    "position": 50,
                    "type": "integer"
                },
                "nextUpdateGracePeriod": {
                    "description": "Next update grace period in minutes. This value defaults to \"5\".",
                    "format": "int32",
                    "position": 60,
                    "type": "integer"
                },
                "requesterAddNonce": {
                    "description": "Do not allow responder to use cached responses. This setting defaults to disabled.",
                    "position": 20,
                    "type": "boolean"
                },
                "responderCertReference": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Resource link to OCSP responder signature verification certificate. A previously selected certificate will be deselected if this attribute is not defined.",
                    "position": 40
                },
                "responderTimeout": {
                    "description": "Responder connection timeout in seconds. This value defaults to \"5\".",
                    "format": "int32",
                    "position": 80,
                    "type": "integer"
                },
                "responderUrl": {
                    "description": "Default responder URL. This URL is used if the certificate being checked does not specify an OCSP responder URL.",
                    "position": 30,
                    "type": "string"
                },
                "responseCachePeriod": {
                    "description": "Response cache period in hours. This value defaults to \"48\".",
                    "format": "int32",
                    "position": 70,
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "OpenIdConnectAttribute": {
            "description": "An attribute for the OpenID Connect returned to OAuth clients.",
            "properties": {
                "includeInIdToken": {
                    "description": "Attribute is included in the ID Token.",
                    "position": 20,
                    "type": "boolean"
                },
                "includeInUserInfo": {
                    "description": "Attribute is included in the User Info.",
                    "position": 30,
                    "type": "boolean"
                },
                "multiValued": {
                    "description": "Indicates whether attribute value is always returned as an array.",
                    "position": 40,
                    "type": "boolean"
                },
                "name": {
                    "description": "The name of this attribute.",
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "OpenIdConnectAttributeContract": {
            "description": "A set of attributes that will be returned to OAuth clients in response to requests received at the PingFederate UserInfo endpoint.",
            "properties": {
                "coreAttributes": {
                    "description": "A list of read-only attributes (for example, sub) that are automatically populated by PingFederate.",
                    "items": {
                        "$ref": "#/definitions/OpenIdConnectAttribute"
                    },
                    "position": 10,
                    "type": "array"
                },
                "extendedAttributes": {
                    "description": "A list of additional attributes.",
                    "items": {
                        "$ref": "#/definitions/OpenIdConnectAttribute"
                    },
                    "position": 20,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "OpenIdConnectPolicies": {
            "description": "A collection of OpenID Connect policies.",
            "properties": {
                "items": {
                    "description": "The actual list of policies.",
                    "items": {
                        "$ref": "#/definitions/OpenIdConnectPolicy"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "OpenIdConnectPolicy": {
            "description": "The set of attributes used to configure an OpenID Connect policy.",
            "properties": {
                "accessTokenManagerRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "The access token manager associated with this Open ID Connect policy.",
                    "position": 30
                },
                "attributeContract": {
                    "$ref": "#/definitions/OpenIdConnectAttributeContract",
                    "description": "The list of attributes that will be returned to OAuth clients in response to requests received at the PingFederate UserInfo endpoint.",
                    "position": 100
                },
                "attributeMapping": {
                    "$ref": "#/definitions/AttributeMapping",
                    "description": "The attributes mapping from attribute sources to attribute targets.",
                    "position": 110
                },
                "id": {
                    "description": "The policy ID used internally.",
                    "position": 10,
                    "type": "string"
                },
                "idTokenLifetime": {
                    "description": "The ID Token Lifetime, in minutes. The default value is 5.",
                    "format": "int32",
                    "position": 40,
                    "type": "integer"
                },
                "includeSHashInIdToken": {
                    "description": "Determines whether the State Hash should be included in the ID token.",
                    "position": 70,
                    "type": "boolean"
                },
                "includeSriInIdToken": {
                    "description": "Determines whether a Session Reference Identifier is included in the ID token.",
                    "position": 50,
                    "type": "boolean"
                },
                "includeUserInfoInIdToken": {
                    "description": "Determines whether the User Info is always included in the ID token.",
                    "position": 60,
                    "type": "boolean"
                },
                "name": {
                    "description": "The name used for display in UI screens.",
                    "position": 20,
                    "type": "string"
                },
                "reissueIdTokenInHybridFlow": {
                    "description": "Determines whether a new ID Token should be returned during token request of the hybrid flow.",
                    "position": 90,
                    "type": "boolean"
                },
                "returnIdTokenOnRefreshGrant": {
                    "description": "Determines whether an ID Token should be returned when refresh grant is requested or not.",
                    "position": 80,
                    "type": "boolean"
                },
                "scopeAttributeMappings": {
                    "additionalProperties": {
                        "$ref": "#/definitions/ParameterValues"
                    },
                    "description": "The attribute scope mappings from scopes to attribute names.",
                    "position": 120,
                    "type": "object"
                }
            },
            "required": [
                "accessTokenManagerRef",
                "attributeContract",
                "attributeMapping",
                "id",
                "name"
            ],
            "type": "object"
        },
        "OpenIdConnectSettings": {
            "description": "Settings for the OpenID Connect configuration.",
            "properties": {
                "defaultPolicyRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the default policy.",
                    "position": 10
                },
                "sessionSettings": {
                    "$ref": "#/definitions/OIDCSessionSettings",
                    "description": "Settings relating to OpenID Connect session management.",
                    "position": 20
                }
            },
            "type": "object"
        },
        "OptionValue": {
            "description": "An option name and value associated with a selection field.",
            "properties": {
                "name": {
                    "description": "The name of the option.",
                    "position": 10,
                    "type": "string"
                },
                "value": {
                    "description": "The value associated with this option.",
                    "position": 20,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "OutOfBandAuthAttribute": {
            "description": "An attribute for the out of band authenticator plugin instance attribute contract.",
            "properties": {
                "name": {
                    "description": "The name of this attribute.",
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "OutOfBandAuthAttributeContract": {
            "description": "A set of attributes exposed by an out of band authenticator plugin instance.",
            "properties": {
                "coreAttributes": {
                    "description": "A list of out of band authenticator attributes.",
                    "items": {
                        "$ref": "#/definitions/OutOfBandAuthAttribute"
                    },
                    "position": 10,
                    "type": "array"
                },
                "extendedAttributes": {
                    "description": "A list of additional attributes that can be returned by the out of band authenticator plugin instance. The extended attributes are only used if the plugin supports them.",
                    "items": {
                        "$ref": "#/definitions/OutOfBandAuthAttribute"
                    },
                    "position": 20,
                    "type": "array"
                }
            },
            "required": [
                "coreAttributes"
            ],
            "type": "object"
        },
        "OutOfBandAuthPluginDescriptor": {
            "allOf": [
                {
                    "$ref": "#/definitions/PluginDescriptor"
                },
                {
                    "description": "An out of band authenticator plugin descriptor.",
                    "properties": {},
                    "type": "object"
                }
            ]
        },
        "OutOfBandAuthPluginDescriptors": {
            "properties": {
                "items": {
                    "description": "The list of out of band authenticator plugin descriptors.",
                    "items": {
                        "$ref": "#/definitions/OutOfBandAuthPluginDescriptor"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "OutOfBandAuthenticator": {
            "allOf": [
                {
                    "$ref": "#/definitions/PluginInstance"
                },
                {
                    "description": "An out of band authenticator plugin instance.",
                    "properties": {
                        "attributeContract": {
                            "$ref": "#/definitions/OutOfBandAuthAttributeContract",
                            "description": "The list of attributes that the out of band authenticator plugin provides.",
                            "position": 5
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "OutOfBandAuthenticators": {
            "description": "A collection of out of band authenticator plugin instances.",
            "properties": {
                "items": {
                    "description": "The list of out of band authenticator plugin instances.",
                    "items": {
                        "$ref": "#/definitions/OutOfBandAuthenticator"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "OutboundBackChannelAuth": {
            "allOf": [
                {
                    "$ref": "#/definitions/BackChannelAuth"
                },
                {
                    "properties": {
                        "sslAuthKeyPairRef": {
                            "$ref": "#/definitions/ResourceLink",
                            "description": "The ID of the key pair used to authenticate with your partner's SOAP endpoint. The ID of the key pair is also known as the alias and can be found by viewing the corresponding certificate under 'SSL Server Certificates' in the PingFederate Administrative Console.",
                            "position": 40
                        },
                        "validatePartnerCert": {
                            "description": "Validate the partner server certificate. Default is true.",
                            "position": 50,
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "OutboundProvision": {
            "description": "Outbound Provisioning allows an IdP to create and maintain user accounts at standards-based partner sites using SCIM as well as select-proprietary provisioning partner sites that are protocol-enabled.",
            "properties": {
                "channels": {
                    "description": "Includes settings of a source data store, managing provisioning threads and mapping of attributes.",
                    "items": {
                        "$ref": "#/definitions/Channel"
                    },
                    "position": 50,
                    "type": "array"
                },
                "customSchema": {
                    "$ref": "#/definitions/Schema",
                    "description": "Custom SCIM attribute configuration.",
                    "position": 40
                },
                "targetSettings": {
                    "description": "Configuration fields that includes credentials to target SaaS application.",
                    "items": {
                        "$ref": "#/definitions/ConfigField"
                    },
                    "position": 30,
                    "type": "array"
                },
                "type": {
                    "description": "The SaaS plugin type.",
                    "position": 20,
                    "type": "string"
                }
            },
            "required": [
                "channels",
                "targetSettings",
                "type"
            ],
            "type": "object"
        },
        "OutboundProvisionDatabase": {
            "description": "The settings for database used internally to facilitate outbound provisioning. The database stores state of synchronization between the source data store and the target data store.",
            "properties": {
                "dataStoreRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the associated data store.",
                    "position": 10
                },
                "synchronizationFrequency": {
                    "description": "The synchronization frequency in seconds. The default value is 60.",
                    "format": "int32",
                    "position": 20,
                    "type": "integer"
                }
            },
            "required": [
                "dataStoreRef"
            ],
            "type": "object"
        },
        "P14EKeyPairView": {
            "description": "PingOne for Enterprise connection key pair details.",
            "properties": {
                "creationTime": {
                    "description": "The creation time of the key.",
                    "format": "date-time",
                    "position": 40,
                    "type": "string"
                },
                "currentAuthenticationKey": {
                    "description": "Indicates whether this is the current key used to authenticate with PingOne.",
                    "position": 10,
                    "type": "boolean"
                },
                "keyPairView": {
                    "$ref": "#/definitions/CertView",
                    "description": "The PingOne for Enterprise key pair details.",
                    "position": 30
                },
                "previousAuthenticationKey": {
                    "description": "Indicates whether this is the previous key used to authenticate with PingOne.",
                    "position": 20,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "P14EKeysView": {
            "description": "The collection of PingOne for Enterprise connection key pair details.",
            "properties": {
                "keyPairs": {
                    "description": "The key pairs used to authenticate to PingOne for Enterprise",
                    "items": {
                        "$ref": "#/definitions/P14EKeyPairView"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ParameterValues": {
            "description": "Parameter Values.",
            "properties": {
                "values": {
                    "description": "A List of values",
                    "items": {
                        "type": "string"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PasswordCredentialValidator": {
            "allOf": [
                {
                    "$ref": "#/definitions/PluginInstance"
                },
                {
                    "description": "The set of attributes used to configure a password credential validator",
                    "properties": {
                        "attributeContract": {
                            "$ref": "#/definitions/PasswordCredentialValidatorAttributeContract",
                            "description": "The list of attributes that the password credential validator provides.",
                            "position": 1000
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "PasswordCredentialValidatorAttribute": {
            "description": "An attribute for the password credential validator attribute contract.",
            "properties": {
                "name": {
                    "description": "The name of this attribute.",
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "PasswordCredentialValidatorAttributeContract": {
            "properties": {
                "coreAttributes": {
                    "description": "A list of read-only attributes that are automatically populated by the password credential validator descriptor.",
                    "items": {
                        "$ref": "#/definitions/PasswordCredentialValidatorAttribute"
                    },
                    "position": 10,
                    "type": "array"
                },
                "extendedAttributes": {
                    "description": "A list of additional attributes that can be returned by the password credential validator. The extended attributes are only used if the adapter supports them.",
                    "items": {
                        "$ref": "#/definitions/PasswordCredentialValidatorAttribute"
                    },
                    "position": 20,
                    "type": "array"
                },
                "inherited": {
                    "description": "Whether this attribute contract is inherited from its parent instance. If true, the rest of the properties in this model become read-only. The default value is false.",
                    "position": 40,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "PasswordCredentialValidatorDescriptor": {
            "allOf": [
                {
                    "$ref": "#/definitions/PluginDescriptor"
                },
                {
                    "description": "A password credential validator descriptor.",
                    "properties": {},
                    "type": "object"
                }
            ]
        },
        "PasswordCredentialValidatorDescriptors": {
            "description": "A collection of password credential validator descriptors.",
            "properties": {
                "items": {
                    "description": "The list of password credential validator descriptors.",
                    "items": {
                        "$ref": "#/definitions/PasswordCredentialValidatorDescriptor"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PasswordCredentialValidators": {
            "description": "A collection of password credential validators.",
            "properties": {
                "items": {
                    "description": "The actual list of password credential validators.",
                    "items": {
                        "$ref": "#/definitions/PasswordCredentialValidator"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PersistentGrantAttribute": {
            "description": "A persistent grant contract attribute.",
            "properties": {
                "name": {
                    "description": "The name of this attribute.",
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "PersistentGrantContract": {
            "properties": {
                "coreAttributes": {
                    "description": "This is a read-only list of persistent grant attributes and includes USER_KEY and USER_NAME. Changes to this field will be ignored.",
                    "items": {
                        "$ref": "#/definitions/PersistentGrantAttribute"
                    },
                    "position": 10,
                    "type": "array"
                },
                "extendedAttributes": {
                    "description": "A list of additional attributes for the persistent grant contract.",
                    "items": {
                        "$ref": "#/definitions/PersistentGrantAttribute"
                    },
                    "position": 20,
                    "type": "array"
                }
            },
            "required": [
                "coreAttributes"
            ],
            "type": "object"
        },
        "PhoneLocalIdentityField": {
            "allOf": [
                {
                    "$ref": "#/definitions/LocalIdentityField"
                },
                {
                    "description": "A phone type field.",
                    "properties": {},
                    "type": "object"
                }
            ]
        },
        "PingOneConnection": {
            "description": "PingOne connection.",
            "properties": {
                "active": {
                    "description": "Whether or not this connection is active. Defaults to true.",
                    "position": 40,
                    "type": "boolean"
                },
                "creationDate": {
                    "description": "The creation date of the PingOne connection. This field is read only.",
                    "format": "date-time",
                    "position": 100,
                    "type": "string"
                },
                "credential": {
                    "description": "The credential for the PingOne connection. To update the credential, specify the plaintext value of the credential in this field. This field will not be populated for GET requests.",
                    "position": 50,
                    "type": "string"
                },
                "credentialId": {
                    "description": "The ID of the PingOne credential. This field is read only.",
                    "position": 70,
                    "type": "string"
                },
                "description": {
                    "description": "A description for the PingOne connection.",
                    "position": 30,
                    "type": "string"
                },
                "encryptedCredential": {
                    "description": "The encrypted credential for the PingOne connection. For POST and PUT requests, if you wish to keep the existing credential, this field should be passed back unchanged.",
                    "position": 60,
                    "type": "string"
                },
                "environmentId": {
                    "description": "The ID of the environment of the PingOne credential. This field is read only.",
                    "position": 90,
                    "type": "string"
                },
                "id": {
                    "description": "The persistent, unique ID of the connection. This property is system-assigned if not specified.",
                    "position": 10,
                    "type": "string"
                },
                "name": {
                    "description": "The name of the PingOne connection.",
                    "position": 20,
                    "type": "string"
                },
                "organizationName": {
                    "description": "The name of the organization associated with this PingOne connection. This field is read only.",
                    "position": 110,
                    "type": "string"
                },
                "pingOneAuthenticationApiEndpoint": {
                    "description": "The PingOne authentication API endpoint. This field is read only.",
                    "position": 140,
                    "type": "string"
                },
                "pingOneConnectionId": {
                    "description": "The ID of the PingOne connection. This field is read only.",
                    "position": 80,
                    "type": "string"
                },
                "pingOneManagementApiEndpoint": {
                    "description": "The PingOne management API endpoint. This field is read only.",
                    "position": 130,
                    "type": "string"
                },
                "region": {
                    "description": "The region of the PingOne connection. This field is read only.",
                    "position": 120,
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "PingOneConnections": {
            "description": "A collection of PingOne connections.",
            "properties": {
                "items": {
                    "description": "The list of PingOne connections.",
                    "items": {
                        "$ref": "#/definitions/PingOneConnection"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PingOneCredentialStatus": {
            "description": "PingOne credential Status",
            "properties": {
                "pingOneCredentialStatus": {
                    "description": "The status of the PingOne connection credential.",
                    "enum": [
                        "VALID",
                        "INVALID",
                        "UNKNOWN"
                    ],
                    "position": 10,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PingOneEnvironment": {
            "properties": {
                "id": {
                    "description": "The ID of the environment",
                    "position": 20,
                    "type": "string"
                },
                "name": {
                    "description": "The name of the environment",
                    "position": 10,
                    "type": "string"
                },
                "type": {
                    "description": "The type of the environment",
                    "position": 30,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PingOneEnvironments": {
            "description": "A collection of PingOne Environments.",
            "properties": {
                "items": {
                    "description": "The list of PingOne environments.",
                    "items": {
                        "$ref": "#/definitions/PingOneEnvironment"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PingOneForEnterpriseSettings": {
            "description": "PingOne for Enterprise Settings",
            "properties": {
                "companyName": {
                    "description": "A read only field indicating the company name.",
                    "position": 30,
                    "type": "string"
                },
                "connectedToPingOneForEnterprise": {
                    "description": "A read only field indicating whether PingFederate is connected to PingOne for Enterprise.",
                    "position": 10,
                    "type": "boolean"
                },
                "currentAuthnKeyCreationTime": {
                    "description": "A read only field indicating the creation time of the current authentication key.",
                    "format": "date-time",
                    "position": 60,
                    "type": "string"
                },
                "enableAdminConsoleSso": {
                    "description": "Indicates whether single sign on from PingOne for Enterprise to the PingFederate admin console is enabled. The default is false.",
                    "position": 40,
                    "type": "boolean"
                },
                "enableMonitoring": {
                    "description": "Indicates whether monitoring of PingFederate from PingOne for Enterprise is enabled. The default is true.",
                    "position": 50,
                    "type": "boolean"
                },
                "identityRepositoryUpdateRequired": {
                    "description": "A read-only field indicating whether changes were made in the current PingFederate configuration that might affect your connection with PingOne for Enterprise. For example, if you modified the attribute contract of your SSO configuration. Update the identity repository to keep your PingFederate and PingOne for Enterprise settings synchronized. ",
                    "position": 80,
                    "type": "boolean"
                },
                "pingOneSsoConnection": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "A read only reference to the SP connection configured for PingOne SSO.",
                    "position": 20
                },
                "previousAuthnKeyCreationTime": {
                    "description": "A read only field indicating the creation time of the previous authentication key.",
                    "format": "date-time",
                    "position": 70,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PingOneLdapGatewayDataStore": {
            "allOf": [
                {
                    "$ref": "#/definitions/DataStore"
                },
                {
                    "description": "A LDAP gateway data store.",
                    "properties": {
                        "binaryAttributes": {
                            "description": "The list of LDAP attributes to be handled as binary data.",
                            "items": {
                                "type": "string"
                            },
                            "position": 200,
                            "type": "array"
                        },
                        "ldapType": {
                            "description": "A type that allows PingFederate to configure many provisioning settings automatically. The value is validated against the LDAP gateway configuration in PingOne unless the header 'X-BypassExternalValidation' is set to true.",
                            "enum": [
                                "ACTIVE_DIRECTORY",
                                "ORACLE_DIRECTORY_SERVER",
                                "ORACLE_UNIFIED_DIRECTORY",
                                "UNBOUNDID_DS",
                                "PING_DIRECTORY",
                                "GENERIC"
                            ],
                            "position": 50,
                            "type": "string"
                        },
                        "name": {
                            "description": "The data store name with a unique value across all data sources. Omitting this attribute will set the value to a combination of the hostname(s) and the principal.",
                            "position": 40,
                            "type": "string"
                        },
                        "pingOneConnectionRef": {
                            "$ref": "#/definitions/ResourceLink",
                            "description": "Reference to the PingOne connection this gateway uses.",
                            "position": 60
                        },
                        "pingOneEnvironmentId": {
                            "description": "The environment ID that the gateway belongs to.",
                            "position": 70,
                            "type": "string"
                        },
                        "pingOneLdapGatewayId": {
                            "description": "The ID of the PingOne LDAP Gateway this data store uses.",
                            "position": 80,
                            "type": "string"
                        },
                        "useSsl": {
                            "description": "Connects to the LDAP data store using secure SSL/TLS encryption (LDAPS). The default value is false. The value is validated against the LDAP gateway configuration in PingOne unless the header 'X-BypassExternalValidation' is set to true.",
                            "position": 100,
                            "type": "boolean"
                        }
                    },
                    "required": [
                        "ldapType",
                        "pingOneConnectionRef",
                        "pingOneEnvironmentId",
                        "pingOneLdapGatewayId"
                    ],
                    "type": "object"
                }
            ]
        },
        "PluginConfigDescriptor": {
            "description": "Defines the configuration fields available for a plugin.",
            "properties": {
                "actionDescriptors": {
                    "description": "The available actions for this plugin.",
                    "items": {
                        "$ref": "#/definitions/ActionDescriptor"
                    },
                    "position": 50,
                    "type": "array"
                },
                "description": {
                    "description": "The description of this plugin.",
                    "position": 10,
                    "type": "string"
                },
                "fields": {
                    "description": "The configuration fields available for this plugin.",
                    "items": {
                        "$ref": "#/definitions/FieldDescriptor"
                    },
                    "position": 20,
                    "type": "array"
                },
                "tables": {
                    "description": "Configuration tables available for this plugin.",
                    "items": {
                        "$ref": "#/definitions/TableDescriptor"
                    },
                    "position": 40,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PluginConfiguration": {
            "description": "Configuration settings for a plugin instance.",
            "properties": {
                "fields": {
                    "description": "List of configuration fields.",
                    "items": {
                        "$ref": "#/definitions/ConfigField"
                    },
                    "position": 20,
                    "type": "array"
                },
                "tables": {
                    "description": "List of configuration tables.",
                    "items": {
                        "$ref": "#/definitions/ConfigTable"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PluginDescriptor": {
            "description": "Defines a plugin type, including available configuration parameters.",
            "properties": {
                "attributeContract": {
                    "description": "The attribute contract for this plugin.",
                    "items": {
                        "type": "string"
                    },
                    "position": 40,
                    "type": "array"
                },
                "className": {
                    "description": "Full class name of the class that implements this plugin.",
                    "position": 30,
                    "type": "string"
                },
                "configDescriptor": {
                    "$ref": "#/definitions/PluginConfigDescriptor",
                    "description": "The descriptor which defines the configuration fields available for this plugin.",
                    "position": 60
                },
                "id": {
                    "description": "Unique ID of the plugin.",
                    "position": 10,
                    "type": "string"
                },
                "name": {
                    "description": "Friendly name for the plugin.",
                    "position": 20,
                    "type": "string"
                },
                "supportsExtendedContract": {
                    "description": "Determines whether this plugin supports extending the attribute contract.",
                    "position": 50,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "PluginInstance": {
            "description": "A plugin instance.",
            "properties": {
                "configuration": {
                    "$ref": "#/definitions/PluginConfiguration",
                    "description": "Plugin instance configuration.",
                    "position": 50
                },
                "id": {
                    "description": "The ID of the plugin instance. The ID cannot be modified once the instance is created.<br>Note: Ignored when specifying a connection's adapter override.",
                    "position": 10,
                    "type": "string"
                },
                "name": {
                    "description": "The plugin instance name. The name cannot be modified once the instance is created.<br>Note: Ignored when specifying a connection's adapter override.",
                    "position": 20,
                    "type": "string"
                },
                "parentRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "The reference to this plugin's parent instance. The parent reference is only accepted if the plugin type supports parent instances.<br>Note: This parent reference is required if this plugin instance is used as an overriding plugin (e.g. connection adapter overrides)",
                    "position": 40
                },
                "pluginDescriptorRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the plugin descriptor for this instance. The plugin descriptor cannot be modified once the instance is created.<br>Note: Ignored when specifying a connection's adapter override.",
                    "position": 30
                }
            },
            "required": [
                "configuration",
                "id",
                "name",
                "pluginDescriptorRef"
            ],
            "type": "object"
        },
        "PolicyAction": {
            "description": "An authentication policy selection action.",
            "discriminator": "type",
            "properties": {
                "context": {
                    "description": "The result context.",
                    "position": 30,
                    "type": "string"
                },
                "type": {
                    "description": "The authentication selection type.",
                    "enum": [
                        "APC_MAPPING",
                        "LOCAL_IDENTITY_MAPPING",
                        "AUTHN_SELECTOR",
                        "AUTHN_SOURCE",
                        "DONE",
                        "CONTINUE",
                        "RESTART",
                        "FRAGMENT"
                    ],
                    "position": 20,
                    "type": "string"
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "ProcessorPolicyToGeneratorMapping": {
            "description": "A Token Exchange Processor policy to Token Generator Mapping.",
            "properties": {
                "attributeContractFulfillment": {
                    "additionalProperties": {
                        "$ref": "#/definitions/AttributeFulfillmentValue"
                    },
                    "description": "A list of mappings from attribute names to their fulfillment values.",
                    "position": 20,
                    "type": "object"
                },
                "attributeSources": {
                    "description": "A list of configured data stores to look up attributes from.",
                    "items": {
                        "$ref": "#/definitions/AttributeSource"
                    },
                    "position": 10,
                    "type": "array"
                },
                "id": {
                    "description": "The id of the Token Exchange Processor policy to Token Generator mapping. This field is read-only and is ignored when passed in with the payload.",
                    "position": 40,
                    "type": "string"
                },
                "issuanceCriteria": {
                    "$ref": "#/definitions/IssuanceCriteria",
                    "description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
                    "position": 30
                },
                "licenseConnectionGroupAssignment": {
                    "description": "The license connection group.",
                    "position": 70,
                    "type": "string"
                },
                "sourceId": {
                    "description": "The id of the Token Exchange Processor policy.",
                    "position": 50,
                    "type": "string"
                },
                "targetId": {
                    "description": "The id of the Token Generator.",
                    "position": 60,
                    "type": "string"
                }
            },
            "required": [
                "attributeContractFulfillment",
                "sourceId",
                "targetId"
            ],
            "type": "object"
        },
        "ProcessorPolicyToGeneratorMappings": {
            "properties": {
                "items": {
                    "description": "The list of Token Exchange Processor policy to Token Generator mappings.",
                    "items": {
                        "$ref": "#/definitions/ProcessorPolicyToGeneratorMapping"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ProfileConfig": {
            "description": "A local identity profile management configuration.",
            "properties": {
                "deleteIdentityEnabled": {
                    "description": "Whether the end user is allowed to use delete functionality.",
                    "position": 10,
                    "type": "boolean"
                },
                "templateName": {
                    "description": "The template name for end-user profile management.",
                    "position": 20,
                    "type": "string"
                }
            },
            "required": [
                "templateName"
            ],
            "type": "object"
        },
        "ProtocolMessageCustomization": {
            "description": "The message customization that will be executed on outgoing PingFederate messages.",
            "properties": {
                "contextName": {
                    "description": "The context in which the customization will be applied. Depending on the connection type and protocol, this can either be 'assertion', 'authn-response' or 'authn-request'.",
                    "position": 10,
                    "type": "string"
                },
                "messageExpression": {
                    "description": "The OGNL expression that will be executed. Refer to the Admin Manual for a list of variables provided by PingFederate.",
                    "position": 20,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ProxySettings": {
            "description": "Proxy settings.",
            "properties": {
                "host": {
                    "description": "Host name.",
                    "position": 10,
                    "type": "string"
                },
                "port": {
                    "description": "Port number.",
                    "format": "int32",
                    "position": 20,
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "RadioGroupFieldDescriptor": {
            "allOf": [
                {
                    "$ref": "#/definitions/BaseSelectionFieldDescriptor"
                },
                {
                    "description": "A selection-type field intended to be rendered as a group of radio buttons in a UI.",
                    "properties": {},
                    "type": "object"
                }
            ]
        },
        "ReadGroups": {
            "description": "Group info lookup and respond to incoming SCIM requests configuration.",
            "properties": {
                "attributeContract": {
                    "$ref": "#/definitions/IdpInboundProvisioningAttributeContract",
                    "description": "A list of attributes that the IdP sends in the SCIM response.",
                    "position": 10
                },
                "attributeFulfillment": {
                    "additionalProperties": {
                        "$ref": "#/definitions/AttributeFulfillmentValue"
                    },
                    "description": "A list of user repository mappings from attribute names to their fulfillment values.",
                    "position": 30,
                    "type": "object"
                },
                "attributes": {
                    "description": "A list of LDAP data store attributes to populate a response to a user-provisioning request.",
                    "items": {
                        "$ref": "#/definitions/Attribute"
                    },
                    "position": 20,
                    "type": "array"
                }
            },
            "required": [
                "attributeContract",
                "attributeFulfillment",
                "attributes"
            ],
            "type": "object"
        },
        "ReadUsers": {
            "description": "User info lookup and respond to incoming SCIM requests configuration.",
            "properties": {
                "attributeContract": {
                    "$ref": "#/definitions/IdpInboundProvisioningAttributeContract",
                    "description": "A list of attributes that the IdP sends in the SCIM response.",
                    "position": 10
                },
                "attributeFulfillment": {
                    "additionalProperties": {
                        "$ref": "#/definitions/AttributeFulfillmentValue"
                    },
                    "description": "A list of user repository mappings from attribute names to their fulfillment values.",
                    "position": 30,
                    "type": "object"
                },
                "attributes": {
                    "description": "A list of LDAP data store attributes to populate a response to a user-provisioning request.",
                    "items": {
                        "$ref": "#/definitions/Attribute"
                    },
                    "position": 20,
                    "type": "array"
                }
            },
            "required": [
                "attributeContract",
                "attributeFulfillment",
                "attributes"
            ],
            "type": "object"
        },
        "RedirectValidationLocalSettings": {
            "description": "Settings for local redirect validation.",
            "properties": {
                "enableInErrorResourceValidation": {
                    "description": "Enable validation for error resource.",
                    "position": 40,
                    "type": "boolean"
                },
                "enableTargetResourceValidationForIdpDiscovery": {
                    "description": "Enable target resource validation for IdP discovery.",
                    "position": 30,
                    "type": "boolean"
                },
                "enableTargetResourceValidationForSLO": {
                    "description": "Enable target resource validation for SLO.",
                    "position": 20,
                    "type": "boolean"
                },
                "enableTargetResourceValidationForSSO": {
                    "description": "Enable target resource validation for SSO.",
                    "position": 10,
                    "type": "boolean"
                },
                "whiteList": {
                    "description": "List of URLs that are designated as valid target resources.",
                    "items": {
                        "$ref": "#/definitions/RedirectValidationSettingsWhitelistEntry"
                    },
                    "position": 50,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "RedirectValidationPartnerSettings": {
            "description": "Settings for redirection at a partner site.",
            "properties": {
                "enableWreplyValidationSLO": {
                    "description": "Enable wreply validation for SLO.",
                    "position": 10,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "RedirectValidationSettings": {
            "description": "Settings for redirect validation for SSO, SLO and IdP discovery.",
            "properties": {
                "redirectValidationLocalSettings": {
                    "$ref": "#/definitions/RedirectValidationLocalSettings",
                    "description": "Settings for local redirect validation.",
                    "position": 10
                },
                "redirectValidationPartnerSettings": {
                    "$ref": "#/definitions/RedirectValidationPartnerSettings",
                    "description": "Settings for redirection at a partner site.",
                    "position": 20
                }
            },
            "type": "object"
        },
        "RedirectValidationSettingsWhitelistEntry": {
            "description": "Whitelist entry for valid target resource.",
            "properties": {
                "allowQueryAndFragment": {
                    "description": "Allow any query parameters and fragment in the resource.",
                    "position": 70,
                    "type": "boolean"
                },
                "idpDiscovery": {
                    "description": "Enable this target resource for IdP discovery validation.",
                    "position": 40,
                    "type": "boolean"
                },
                "inErrorResource": {
                    "description": "Enable this target resource for in error resource validation.",
                    "position": 30,
                    "type": "boolean"
                },
                "requireHttps": {
                    "description": "Require HTTPS for accessing this resource.",
                    "position": 80,
                    "type": "boolean"
                },
                "targetResourceSLO": {
                    "description": "Enable this target resource for SLO redirect validation.",
                    "position": 20,
                    "type": "boolean"
                },
                "targetResourceSSO": {
                    "description": "Enable this target resource for SSO redirect validation.",
                    "position": 10,
                    "type": "boolean"
                },
                "validDomain": {
                    "description": "Domain of a valid resource.",
                    "position": 50,
                    "type": "string"
                },
                "validPath": {
                    "description": "Path of a valid resource.",
                    "position": 60,
                    "type": "string"
                }
            },
            "required": [
                "validDomain"
            ],
            "type": "object"
        },
        "RegistrationConfig": {
            "description": "A local identity profile registration configuration.",
            "properties": {
                "captchaEnabled": {
                    "description": "Whether CAPTCHA is enabled or not in the registration configuration.",
                    "position": 10,
                    "type": "boolean"
                },
                "createAuthnSessionAfterRegistration": {
                    "description": "Whether to create an Authentication Session when registering a local account. Default is true.",
                    "position": 30,
                    "type": "boolean"
                },
                "executeWorkflow": {
                    "description": "This setting indicates whether PingFederate should execute the workflow before or after account creation. The default is to run the registration workflow after account creation.",
                    "enum": [
                        "BEFORE_ACCOUNT_CREATION",
                        "AFTER_ACCOUNT_CREATION"
                    ],
                    "position": 51,
                    "type": "string"
                },
                "registrationWorkflow": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "The policy fragment to be executed as part of the registration workflow.",
                    "position": 50
                },
                "templateName": {
                    "description": "The template name for the registration configuration.",
                    "position": 20,
                    "type": "string"
                },
                "thisIsMyDeviceEnabled": {
                    "description": "Allows users to indicate whether their device is shared or private. In this mode, PingFederate Authentication Sessions will not be stored unless the user indicates the device is private.",
                    "position": 40,
                    "type": "boolean"
                },
                "usernameField": {
                    "description": "When creating an Authentication Session after registering a local account, PingFederate will pass the Unique ID field's value as the username. If the Unique ID value is not the username, then override which field's value will be used as the username.",
                    "position": 31,
                    "type": "string"
                }
            },
            "required": [
                "templateName"
            ],
            "type": "object"
        },
        "RequestPolicies": {
            "description": "A collection of CIBA request policies.",
            "properties": {
                "items": {
                    "description": "The list of request policies.",
                    "items": {
                        "$ref": "#/definitions/RequestPolicy"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "RequestPolicy": {
            "description": "The set of attributes used to configure a CIBA request policy.",
            "properties": {
                "allowUnsignedLoginHintToken": {
                    "description": "Allow unsigned login hint token.",
                    "position": 60,
                    "type": "boolean"
                },
                "alternativeLoginHintTokenIssuers": {
                    "description": "Alternative login hint token issuers.",
                    "items": {
                        "$ref": "#/definitions/AlternativeLoginHintTokenIssuer"
                    },
                    "position": 80,
                    "type": "array"
                },
                "authenticatorRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the associated authenticator.",
                    "position": 30
                },
                "id": {
                    "description": "The request policy ID. ID is unique.",
                    "position": 10,
                    "type": "string"
                },
                "identityHintContract": {
                    "$ref": "#/definitions/IdentityHintContract",
                    "description": "Identity hint attribute contract.",
                    "position": 90
                },
                "identityHintContractFulfillment": {
                    "$ref": "#/definitions/AttributeMapping",
                    "description": "Identity hint attribute contract fulfillment.",
                    "position": 100
                },
                "identityHintMapping": {
                    "$ref": "#/definitions/AttributeMapping",
                    "description": "Identity hint contract to request policy mapping.",
                    "position": 110
                },
                "name": {
                    "description": "The request policy name. Name is unique.",
                    "position": 20,
                    "type": "string"
                },
                "requireTokenForIdentityHint": {
                    "description": "Require token for identity hint.",
                    "position": 70,
                    "type": "boolean"
                },
                "transactionLifetime": {
                    "description": "The transaction lifetime in seconds.",
                    "format": "int32",
                    "position": 50,
                    "type": "integer"
                },
                "userCodePcvRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the associated password credential validator.",
                    "position": 40
                }
            },
            "required": [
                "authenticatorRef",
                "id",
                "identityHintContract",
                "name"
            ],
            "type": "object"
        },
        "ResourceCategoryInfo": {
            "description": "A model containing information on a category of resource in the administrative API.",
            "properties": {
                "id": {
                    "description": "The ID of the resource category.",
                    "enum": [
                        "IDP_CONNECTION",
                        "SP_CONNECTION",
                        "PASSWORD_CREDENTIAL_VALIDATOR",
                        "AUTHENTICATION_SELECTOR",
                        "IDP_ADAPTER",
                        "SP_ADAPTER",
                        "ACCESS_TOKEN_MGMT_PLUGIN",
                        "TOKEN_PROCESSOR",
                        "TOKEN_GENERATOR",
                        "NOTIFICATION_PUBLISHER",
                        "OOB_AUTH_PLUGIN",
                        "DATA_STORE",
                        "DYNAMIC_CLIENT_REGISTRATION_PLUGIN",
                        "IDENTITY_STORE_PROVISIONER"
                    ],
                    "position": 10,
                    "type": "string"
                },
                "name": {
                    "description": "The name of the resource category.",
                    "position": 20,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ResourceLink": {
            "description": "A reference to a resource.",
            "properties": {
                "id": {
                    "description": "The ID of the resource.",
                    "position": 10,
                    "type": "string"
                },
                "location": {
                    "description": "A read-only URL that references the resource. If the resource is not currently URL-accessible, this property will be null.",
                    "position": 20,
                    "type": "string"
                }
            },
            "required": [
                "id"
            ],
            "type": "object"
        },
        "ResourceOwnerCredentialsMapping": {
            "description": "The OAuth Resource Owner Credentials Mapping.",
            "properties": {
                "attributeContractFulfillment": {
                    "additionalProperties": {
                        "$ref": "#/definitions/AttributeFulfillmentValue"
                    },
                    "description": "A list of mappings from attribute names to their fulfillment values.",
                    "position": 20,
                    "type": "object"
                },
                "attributeSources": {
                    "description": "A list of configured data stores to look up attributes from.",
                    "items": {
                        "$ref": "#/definitions/AttributeSource"
                    },
                    "position": 10,
                    "type": "array"
                },
                "id": {
                    "description": "The ID of the Resource Owner Credentials Mapping.",
                    "position": 1,
                    "type": "string"
                },
                "issuanceCriteria": {
                    "$ref": "#/definitions/IssuanceCriteria",
                    "description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
                    "position": 30
                },
                "passwordValidatorRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Read only reference to the associated Source Password Validator Instance.",
                    "position": 2
                }
            },
            "required": [
                "attributeContractFulfillment",
                "id"
            ],
            "type": "object"
        },
        "ResourceOwnerCredentialsMappings": {
            "description": "A collection of OAuth Resource Owner Credentials mapping items.",
            "properties": {
                "items": {
                    "description": "The actual list of OAuth Resource Owner Credentials Grant Mapping.",
                    "items": {
                        "$ref": "#/definitions/ResourceOwnerCredentialsMapping"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ResourceUsage": {
            "description": "An API model representing a reference to an API resource.",
            "properties": {
                "categoryId": {
                    "description": "The category of the referencing resource.",
                    "enum": [
                        "IDP_CONNECTION",
                        "SP_CONNECTION",
                        "PASSWORD_CREDENTIAL_VALIDATOR",
                        "AUTHENTICATION_SELECTOR",
                        "IDP_ADAPTER",
                        "SP_ADAPTER",
                        "ACCESS_TOKEN_MGMT_PLUGIN",
                        "TOKEN_PROCESSOR",
                        "TOKEN_GENERATOR",
                        "NOTIFICATION_PUBLISHER",
                        "OOB_AUTH_PLUGIN",
                        "DATA_STORE",
                        "DYNAMIC_CLIENT_REGISTRATION_PLUGIN",
                        "IDENTITY_STORE_PROVISIONER"
                    ],
                    "position": 30,
                    "type": "string"
                },
                "id": {
                    "description": "The ID of the referencing resource.",
                    "position": 10,
                    "type": "string"
                },
                "name": {
                    "description": "The name of the referencing resource.",
                    "position": 20,
                    "type": "string"
                },
                "ref": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "A link to the referencing resource.",
                    "position": 50
                },
                "type": {
                    "description": "The type of the referencing resource. In the case of plugins, this is the plugin type. Otherwise, it is usually the same as the name of the category.",
                    "position": 40,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ResourceUsages": {
            "description": "A collection of resource usages.",
            "properties": {
                "categories": {
                    "description": "The static list of available resource categories.",
                    "items": {
                        "$ref": "#/definitions/ResourceCategoryInfo"
                    },
                    "position": 10,
                    "type": "array"
                },
                "items": {
                    "description": "The actual list of resource usages.",
                    "items": {
                        "$ref": "#/definitions/ResourceUsage"
                    },
                    "position": 20,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "RestartPolicyAction": {
            "allOf": [
                {
                    "$ref": "#/definitions/PolicyAction"
                },
                {
                    "description": "The restart selection action.",
                    "properties": {},
                    "type": "object"
                }
            ]
        },
        "RolesAndProtocols": {
            "description": "This property has been deprecated and is no longer used. All Roles and protocols are always enabled.",
            "properties": {
                "enableIdpDiscovery": {
                    "description": "Enable IdP Discovery.",
                    "position": 40,
                    "type": "boolean"
                },
                "idpRole": {
                    "$ref": "#/definitions/IdpRole",
                    "description": "Identity Provider (IdP) settings.",
                    "position": 20
                },
                "oauthRole": {
                    "$ref": "#/definitions/OAuthRole",
                    "description": "OAuth role settings.",
                    "position": 10
                },
                "spRole": {
                    "$ref": "#/definitions/SpRole",
                    "description": "Service Provider (SP) settings.",
                    "position": 30
                }
            },
            "type": "object"
        },
        "SAML20Profile": {
            "description": "SAML 2.0 Profile.",
            "properties": {
                "enable": {
                    "description": "Enable SAML2.0 profile.",
                    "position": 10,
                    "type": "boolean"
                },
                "enableAutoConnect": {
                    "description": "This property has been deprecated and no longer used",
                    "position": 20,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "SaasAttributeMapping": {
            "description": "Settings to map the source record attributes to target attributes.",
            "properties": {
                "fieldName": {
                    "description": "The name of target field.",
                    "position": 10,
                    "type": "string"
                },
                "saasFieldInfo": {
                    "$ref": "#/definitions/SaasFieldConfiguration",
                    "description": "The settings that represent how attribute values from source data store will be mapped into Fields specified by the service provider.",
                    "position": 20
                }
            },
            "required": [
                "fieldName",
                "saasFieldInfo"
            ],
            "type": "object"
        },
        "SaasFieldConfiguration": {
            "description": "The settings that represent how attribute values from source data store will be mapped into Fields specified by the service provider.",
            "properties": {
                "attributeNames": {
                    "description": "The list of source attribute names used to generate or map to a target field",
                    "items": {
                        "type": "string"
                    },
                    "position": 10,
                    "type": "array",
                    "uniqueItems": true
                },
                "characterCase": {
                    "description": "The character case of the field value.",
                    "enum": [
                        "LOWER",
                        "UPPER",
                        "NONE"
                    ],
                    "position": 60,
                    "type": "string"
                },
                "createOnly": {
                    "description": "Indicates whether this field is a create only field and cannot be updated.",
                    "position": 40,
                    "type": "boolean"
                },
                "defaultValue": {
                    "description": "The default value for the target field",
                    "position": 20,
                    "type": "string"
                },
                "expression": {
                    "description": "An OGNL expression to obtain a value.",
                    "position": 30,
                    "type": "string"
                },
                "masked": {
                    "description": "Indicates whether the attribute should be masked in server logs.",
                    "position": 120,
                    "type": "boolean"
                },
                "parser": {
                    "description": "Indicates how the field shall be parsed.",
                    "enum": [
                        "EXTRACT_CN_FROM_DN",
                        "EXTRACT_USERNAME_FROM_EMAIL",
                        "NONE"
                    ],
                    "position": 110,
                    "type": "string"
                },
                "trim": {
                    "description": "Indicates whether field should be trimmed before provisioning.",
                    "position": 50,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "SaasPluginDescriptor": {
            "description": "A SaaS Plugin.",
            "properties": {
                "configDescriptor": {
                    "$ref": "#/definitions/PluginConfigDescriptor",
                    "description": "The plugin configuration that includes information to access the target service provider.",
                    "position": 30
                },
                "description": {
                    "description": "The SaaS plugin description.",
                    "position": 20,
                    "type": "string"
                },
                "id": {
                    "description": "The SaaS plugin type.",
                    "position": 10,
                    "type": "string"
                },
                "saasPluginFieldInfoDescriptors": {
                    "description": "The SaaS plugin attribute list for mapping from the local data store into Fields specified by the service provide.",
                    "items": {
                        "$ref": "#/definitions/SaasPluginFieldInfoDescriptor"
                    },
                    "position": 40,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SaasPluginDescriptors": {
            "description": "A collection of SaaS plugins.",
            "properties": {
                "items": {
                    "description": "The actual list of SaaS plugins.",
                    "items": {
                        "$ref": "#/definitions/SaasPluginDescriptor"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SaasPluginFieldInfoDescriptor": {
            "description": "A Saas Plugin Field configuration.",
            "properties": {
                "attributeGroup": {
                    "description": "Indicates whether this field belongs to group of attribute such as multivalued or sub-type custom attributes.",
                    "position": 160,
                    "type": "boolean"
                },
                "code": {
                    "description": "The name or code that represents a field.",
                    "position": 10,
                    "type": "string"
                },
                "defaultValue": {
                    "description": "Default value for the field.",
                    "position": 130,
                    "type": "string"
                },
                "dsLdapMap": {
                    "description": "Indicates whether the field can be mapped raw to an LDAP attribute.",
                    "position": 140,
                    "type": "boolean"
                },
                "label": {
                    "description": "The label for a field.",
                    "position": 20,
                    "type": "string"
                },
                "maxLength": {
                    "description": "Maximum character length for a value.",
                    "format": "int32",
                    "position": 90,
                    "type": "integer"
                },
                "minLength": {
                    "description": "Minimum character length for a value.",
                    "format": "int32",
                    "position": 80,
                    "type": "integer"
                },
                "multiValue": {
                    "description": "Whether the field can have multiple values.",
                    "position": 50,
                    "type": "boolean"
                },
                "notes": {
                    "description": "Description or notes for the field.",
                    "items": {
                        "type": "string"
                    },
                    "position": 120,
                    "type": "array"
                },
                "options": {
                    "description": "List of Option values available for this field.",
                    "items": {
                        "$ref": "#/definitions/SaasPluginFieldOption"
                    },
                    "position": 60,
                    "type": "array"
                },
                "pattern": {
                    "description": "Pattern used to validate values of this field.",
                    "position": 100,
                    "type": "string"
                },
                "persistForMembership": {
                    "description": "The code that represents the field.",
                    "position": 150,
                    "type": "boolean"
                },
                "required": {
                    "description": "Indicates whether a value is required for this field.",
                    "position": 30,
                    "type": "boolean"
                },
                "unique": {
                    "description": "indicates whether the value of this field is unique.",
                    "position": 40,
                    "type": "boolean"
                }
            },
            "required": [
                "code",
                "label"
            ],
            "type": "object"
        },
        "SaasPluginFieldOption": {
            "description": "A plugin configuration field value.",
            "properties": {
                "code": {
                    "description": "The code that represents the field.",
                    "position": 10,
                    "type": "string"
                },
                "label": {
                    "description": "The label for the field.",
                    "position": 20,
                    "type": "string"
                }
            },
            "required": [
                "code",
                "label"
            ],
            "type": "object"
        },
        "Schema": {
            "description": "Custom SCIM Attributes configuration.",
            "properties": {
                "attributes": {
                    "items": {
                        "$ref": "#/definitions/SchemaAttribute"
                    },
                    "type": "array"
                },
                "namespace": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SchemaAttribute": {
            "description": "A custom SCIM attribute.",
            "properties": {
                "multiValued": {
                    "description": "Indicates whether the attribute is multi-valued.",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name of the attribute.",
                    "type": "string"
                },
                "subAttributes": {
                    "description": "List of sub-attributes for an attribute.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "types": {
                    "description": "Represents the name of each attribute type in case of multi-valued attribute.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ScopeEntry": {
            "description": "A scope name and its description.",
            "properties": {
                "description": {
                    "description": "The description of the scope that appears when the user is prompted for authorization.",
                    "position": 20,
                    "type": "string"
                },
                "dynamic": {
                    "description": "True if the scope is dynamic. (Defaults to false)",
                    "position": 30,
                    "type": "boolean"
                },
                "name": {
                    "description": "The name of the scope.",
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "description",
                "name"
            ],
            "type": "object"
        },
        "ScopeGroupEntry": {
            "description": "A scope group name and its description.",
            "properties": {
                "description": {
                    "description": "The description of the scope group.",
                    "position": 20,
                    "type": "string"
                },
                "name": {
                    "description": "The name of the scope group.",
                    "position": 10,
                    "type": "string"
                },
                "scopes": {
                    "description": "The set of scopes for this scope group.",
                    "items": {
                        "type": "string"
                    },
                    "position": 30,
                    "type": "array",
                    "uniqueItems": true
                }
            },
            "required": [
                "description",
                "name",
                "scopes"
            ],
            "type": "object"
        },
        "SecondarySecret": {
            "properties": {
                "encryptedSecret": {
                    "description": "For GET requests, this field contains the encrypted secondary client secret, if one exists.  For POST and PUT requests, if you wish to reuse the existing secret, this field should be passed back unchanged.",
                    "position": 25,
                    "type": "string"
                },
                "expiryTime": {
                    "description": "The expiry time of the secondary secret.",
                    "format": "date-time",
                    "position": 30,
                    "type": "string"
                },
                "secret": {
                    "description": "Secondary client secret for Basic Authentication.  To update the secondary client secret, specify the plaintext value in this field.  This field will not be populated for GET requests.",
                    "position": 20,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SecretManager": {
            "allOf": [
                {
                    "$ref": "#/definitions/PluginInstance"
                },
                {
                    "description": "A secret manager plugin instance.",
                    "properties": {},
                    "type": "object"
                }
            ]
        },
        "SecretManagerDescriptor": {
            "allOf": [
                {
                    "$ref": "#/definitions/PluginDescriptor"
                },
                {
                    "description": "A secret manager plugin descriptor.",
                    "properties": {},
                    "type": "object"
                }
            ]
        },
        "SecretManagerDescriptors": {
            "description": "A collection of secret manager plugin descriptors.",
            "properties": {
                "items": {
                    "description": "The list of secret manager plugin descriptors.",
                    "items": {
                        "$ref": "#/definitions/SecretManagerDescriptor"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SecretManagers": {
            "description": "A collection of secret manager plugin instances.",
            "properties": {
                "items": {
                    "description": "The list of secret manager plugin instances.",
                    "items": {
                        "$ref": "#/definitions/SecretManager"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SelectFieldDescriptor": {
            "allOf": [
                {
                    "$ref": "#/definitions/BaseSelectionFieldDescriptor"
                },
                {
                    "description": "A selection field that is intended to be rendered as a dropdown list of options.",
                    "properties": {},
                    "type": "object"
                }
            ]
        },
        "ServerSettings": {
            "description": "Server configuration settings.",
            "properties": {
                "captchaSettings": {
                    "$ref": "#/definitions/CaptchaSettings",
                    "description": "Captcha Settings.",
                    "position": 60
                },
                "contactInfo": {
                    "$ref": "#/definitions/ContactInfo",
                    "description": "Information that identifies the server.",
                    "position": 10
                },
                "emailServer": {
                    "$ref": "#/definitions/EmailServerSettings",
                    "description": "Email Server Settings.",
                    "position": 50
                },
                "federationInfo": {
                    "$ref": "#/definitions/FederationInfo",
                    "description": "Federation Info.",
                    "position": 40
                },
                "notifications": {
                    "$ref": "#/definitions/NotificationSettings",
                    "description": "Notification settings for license and certificate expiration events.",
                    "position": 20
                },
                "rolesAndProtocols": {
                    "$ref": "#/definitions/RolesAndProtocols",
                    "description": "Configure roles and protocols.",
                    "position": 30
                }
            },
            "type": "object"
        },
        "ServiceAssociation": {
            "description": "A model representing an association between a PingFederate component (typically a plugin) and a list of PingOne services.",
            "properties": {
                "componentName": {
                    "description": "The display name for the component.",
                    "position": 10,
                    "type": "string"
                },
                "configured": {
                    "description": "Indicates whether one or more instances of the plugin are configured for a given PingOne connection.",
                    "position": 30,
                    "type": "boolean"
                },
                "serviceNames": {
                    "description": "The list of PingOne services consumed by the plugin. The first service represents the primary service consumed by the plugin.",
                    "items": {
                        "type": "string"
                    },
                    "position": 20,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ServiceAssociations": {
            "description": "A list of installed components that consume PingOne services.",
            "properties": {
                "items": {
                    "description": "The actual list of component-to-service associations.",
                    "items": {
                        "$ref": "#/definitions/ServiceAssociation"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ServiceAuthentication": {
            "description": "Service Authentication Settings.",
            "properties": {
                "attributeQuery": {
                    "$ref": "#/definitions/ServiceModel",
                    "description": "SAML2.0 attribute query service. Remove the JSON field to deactivate the attribute query service.",
                    "position": 10
                },
                "connectionManagement": {
                    "$ref": "#/definitions/ServiceModel",
                    "description": "(Deprecated) Connection management service. Remove the JSON field to deactivate the connection management service.",
                    "position": 30
                },
                "jmx": {
                    "$ref": "#/definitions/ServiceModel",
                    "description": "JMX application management and monitoring service. Remove the JSON field to deactivate the JMX service.",
                    "position": 20
                },
                "ssoDirectoryService": {
                    "$ref": "#/definitions/ServiceModel",
                    "description": "(Deprecated) SSO directory service. Remove the JSON field to deactivate the SSO Directory service.",
                    "position": 40
                }
            },
            "type": "object"
        },
        "ServiceModel": {
            "description": "Service Model.",
            "properties": {
                "encryptedSharedSecret": {
                    "description": "Encrypted shared secret for the service.",
                    "position": 30,
                    "type": "string"
                },
                "id": {
                    "description": "Id of the service.",
                    "position": 10,
                    "type": "string"
                },
                "sharedSecret": {
                    "description": "Shared secret for the service.",
                    "position": 20,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SessionSettings": {
            "description": "General settings related to session management.",
            "properties": {
                "revokeUserSessionOnLogout": {
                    "description": "Determines whether the user's session is revoked on logout. If this property is not provided on a PUT, the setting is left unchanged.",
                    "position": 20,
                    "type": "boolean"
                },
                "sessionRevocationLifetime": {
                    "description": "How long a session revocation is tracked and stored, in minutes. If this property is not provided on a PUT, the setting is left unchanged.",
                    "format": "int32",
                    "position": 30,
                    "type": "integer"
                },
                "trackAdapterSessionsForLogout": {
                    "description": "Determines whether adapter sessions are tracked for cleanup during single logout. The default is false.",
                    "position": 10,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "SessionValidationSettings": {
            "description": "Session validation settings for an access token management plugin instance.",
            "properties": {
                "checkSessionRevocationStatus": {
                    "description": "Check the session revocation status when validating the access token.",
                    "position": 40,
                    "type": "boolean"
                },
                "checkValidAuthnSession": {
                    "description": "Check for a valid authentication session when validating the access token.",
                    "position": 30,
                    "type": "boolean"
                },
                "includeSessionId": {
                    "description": "Include the session identifier in the access token. Note that if any of the session validation features is enabled, the session identifier will already be included in the access tokens.",
                    "position": 20,
                    "type": "boolean"
                },
                "inherited": {
                    "description": "If this token manager has a parent, this flag determines whether session validation settings, such as checkValidAuthnSession, are inherited from the parent. When set to true, the other fields in this model become read-only. The default value is false.",
                    "position": 10,
                    "type": "boolean"
                },
                "updateAuthnSessionActivity": {
                    "description": "Update authentication session activity when validating the access token.",
                    "position": 50,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "SigningKeys": {
            "description": "Setting for a OAuth/OpenID Connect signing key set while using multiple virtual issuers.",
            "properties": {
                "p256ActiveCertRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the P-256 key currently active.",
                    "position": 15
                },
                "p256PreviousCertRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the P-256 key previously active.",
                    "position": 20
                },
                "p256PublishX5cParameter": {
                    "description": "Enable publishing of the P-256 certificate chain associated with the active key.",
                    "position": 25,
                    "type": "boolean"
                },
                "p384ActiveCertRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the P-384 key currently active.",
                    "position": 30
                },
                "p384PreviousCertRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the P-384 key previously active.",
                    "position": 35
                },
                "p384PublishX5cParameter": {
                    "description": "Enable publishing of the P-384 certificate chain associated with the active key.",
                    "position": 40,
                    "type": "boolean"
                },
                "p521ActiveCertRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the P-521 key currently active.",
                    "position": 45
                },
                "p521PreviousCertRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the P-521 key previously active.",
                    "position": 50
                },
                "p521PublishX5cParameter": {
                    "description": "Enable publishing of the P-521 certificate chain associated with the active key.",
                    "position": 55,
                    "type": "boolean"
                },
                "rsaActiveCertRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the RSA key currently active.",
                    "position": 60
                },
                "rsaPreviousCertRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the RSA key previously active.",
                    "position": 65
                },
                "rsaPublishX5cParameter": {
                    "description": "Enable publishing of the RSA certificate chain associated with the active key.",
                    "position": 70,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "SigningSettings": {
            "description": "Settings related to signing messages sent to this partner.",
            "properties": {
                "algorithm": {
                    "description": "The algorithm used to sign messages sent to this partner. The default is SHA1withDSA for DSA certs, SHA256withRSA for RSA certs, and SHA256withECDSA for EC certs. For RSA certs, SHA1withRSA, SHA384withRSA, and SHA512withRSA are also supported. For EC certs, SHA384withECDSA and SHA512withECDSA are also supported. If the connection is WS-Federation with JWT token type, then the possible values are RSA SHA256, RSA SHA384, RSA SHA512, ECDSA SHA256, ECDSA SHA384, ECDSA SHA512",
                    "position": 30,
                    "type": "string"
                },
                "alternativeSigningKeyPairRefs": {
                    "description": "The list of IDs of alternative key pairs used to sign messages sent to this partner. The ID of the key pair is also known as the alias and can be found by viewing the corresponding certificate under 'Signing & Decryption Keys & Certificates' in the PingFederate admin console.",
                    "items": {
                        "$ref": "#/definitions/ResourceLink"
                    },
                    "position": 20,
                    "type": "array"
                },
                "includeCertInSignature": {
                    "description": "Determines whether the signing certificate is included in the signature <KeyInfo> element.",
                    "position": 40,
                    "type": "boolean"
                },
                "includeRawKeyInSignature": {
                    "description": "Determines whether the <KeyValue> element with the raw public key is included in the signature <KeyInfo> element.",
                    "position": 50,
                    "type": "boolean"
                },
                "signingKeyPairRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "The ID of the key pair used to sign messages sent to this partner. The ID of the key pair is also known as the alias and can be found by viewing the corresponding certificate under 'Signing & Decryption Keys & Certificates' in the PingFederate admin console.",
                    "position": 10
                }
            },
            "required": [
                "signingKeyPairRef"
            ],
            "type": "object"
        },
        "SloServiceEndpoint": {
            "description": "Where SLO logout messages are sent. Only applicable for SAML 2.0.",
            "properties": {
                "binding": {
                    "description": "The binding of this endpoint, if applicable - usually only required for SAML 2.0 endpoints.",
                    "enum": [
                        "ARTIFACT",
                        "POST",
                        "REDIRECT",
                        "SOAP"
                    ],
                    "position": 10,
                    "type": "string"
                },
                "responseUrl": {
                    "description": "The absolute or relative URL to which logout responses are sent. A relative URL can be specified if a base URL for the connection has been defined.",
                    "position": 30,
                    "type": "string"
                },
                "url": {
                    "description": "The absolute or relative URL of the endpoint. A relative URL can be specified if a base URL for the connection has been defined.",
                    "position": 20,
                    "type": "string"
                }
            },
            "required": [
                "binding",
                "url"
            ],
            "type": "object"
        },
        "SourceTypeIdKey": {
            "description": "A key that is meant to reference a source from which an attribute can be retrieved. This model is usually paired with a value which, depending on the SourceType, can be a hardcoded value or a reference to an attribute name specific to that SourceType. Not all values are applicable - a validation error will be returned for incorrect values.<br>For each SourceType, the value should be:<br>ACCOUNT_LINK - If account linking was enabled for the browser SSO, the value must be 'Local User ID', unless it has been overridden in PingFederate's server configuration.<br>ADAPTER - The value is one of the attributes of the IdP Adapter.<br>ASSERTION - The value is one of the attributes coming from the SAML assertion.<br>AUTHENTICATION_POLICY_CONTRACT - The value is one of the attributes coming from an authentication policy contract.<br>LOCAL_IDENTITY_PROFILE - The value is one of the fields coming from a local identity profile.<br>CONTEXT - The value must be one of the following ['TargetResource' or 'OAuthScopes' or 'ClientId' or 'AuthenticationCtx' or 'ClientIp' or 'Locale' or 'StsBasicAuthUsername' or 'StsSSLClientCertSubjectDN' or 'StsSSLClientCertChain' or 'VirtualServerId' or 'AuthenticatingAuthority' or 'DefaultPersistentGrantLifetime'.]<br>CLAIMS - Attributes provided by the OIDC Provider.<br>CUSTOM_DATA_STORE - The value is one of the attributes returned by this custom data store.<br>EXPRESSION - The value is an OGNL expression.<br>EXTENDED_CLIENT_METADATA - The value is from an OAuth extended client metadata parameter. This source type is deprecated and has been replaced by EXTENDED_PROPERTIES.<br>EXTENDED_PROPERTIES - The value is from an OAuth Client's extended property.<br>IDP_CONNECTION - The value is one of the attributes passed in by the IdP connection.<br>JDBC_DATA_STORE - The value is one of the column names returned from the JDBC attribute source.<br>LDAP_DATA_STORE - The value is one of the LDAP attributes supported by your LDAP data store.<br>MAPPED_ATTRIBUTES - The value is the name of one of the mapped attributes that is defined in the associated attribute mapping.<br>OAUTH_PERSISTENT_GRANT - The value is one of the attributes from the persistent grant.<br>PASSWORD_CREDENTIAL_VALIDATOR - The value is one of the attributes of the PCV.<br>NO_MAPPING - A placeholder value to indicate that an attribute currently has no mapped source.TEXT - A hardcoded value that is used to populate the corresponding attribute.<br>TOKEN - The value is one of the token attributes.<br>REQUEST - The value is from the request context such as the CIBA identity hint contract or the request contract for Ws-Trust.<br>TRACKED_HTTP_PARAMS - The value is from the original request parameters.<br>SUBJECT_TOKEN - The value is one of the OAuth 2.0 Token exchange subject_token attributes.<br>ACTOR_TOKEN - The value is one of the OAuth 2.0 Token exchange actor_token attributes.<br>TOKEN_EXCHANGE_PROCESSOR_POLICY - The value is one of the attributes coming from a Token Exchange Processor policy.<br>FRAGMENT - The value is one of the attributes coming from an authentication policy fragment.<br>INPUTS - The value is one of the attributes coming from an attribute defined in the input authentication policy contract for an authentication policy fragment.<br>ATTRIBUTE_QUERY - The value is one of the user attributes queried from an Attribute Authority.<br>IDENTITY_STORE_USER - The value is one of the attributes from a user identity store provisioner for SCIM processing.<br>IDENTITY_STORE_GROUP - The value is one of the attributes from a group identity store provisioner for SCIM processing.<br>SCIM_USER - The value is one of the attributes passed in from the SCIM user request.<br>SCIM_GROUP - The value is one of the attributes passed in from the SCIM group request.<br>",
            "properties": {
                "id": {
                    "description": "The attribute source ID that refers to the attribute source that this key references. In some resources, the ID is optional and will be ignored. In these cases the ID should be omitted. If the source type is not an attribute source then the ID can be omitted.",
                    "position": 20,
                    "type": "string"
                },
                "type": {
                    "description": "The source type of this key.",
                    "enum": [
                        "TOKEN_EXCHANGE_PROCESSOR_POLICY",
                        "ACCOUNT_LINK",
                        "ADAPTER",
                        "ASSERTION",
                        "CONTEXT",
                        "CUSTOM_DATA_STORE",
                        "EXPRESSION",
                        "JDBC_DATA_STORE",
                        "LDAP_DATA_STORE",
                        "PING_ONE_LDAP_GATEWAY_DATA_STORE",
                        "MAPPED_ATTRIBUTES",
                        "NO_MAPPING",
                        "TEXT",
                        "TOKEN",
                        "REQUEST",
                        "OAUTH_PERSISTENT_GRANT",
                        "SUBJECT_TOKEN",
                        "ACTOR_TOKEN",
                        "PASSWORD_CREDENTIAL_VALIDATOR",
                        "IDP_CONNECTION",
                        "AUTHENTICATION_POLICY_CONTRACT",
                        "CLAIMS",
                        "LOCAL_IDENTITY_PROFILE",
                        "EXTENDED_CLIENT_METADATA",
                        "EXTENDED_PROPERTIES",
                        "TRACKED_HTTP_PARAMS",
                        "FRAGMENT",
                        "INPUTS",
                        "ATTRIBUTE_QUERY",
                        "IDENTITY_STORE_USER",
                        "IDENTITY_STORE_GROUP",
                        "SCIM_USER",
                        "SCIM_GROUP"
                    ],
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "SpAdapter": {
            "allOf": [
                {
                    "$ref": "#/definitions/PluginInstance"
                },
                {
                    "description": "An SP adapter instance.",
                    "properties": {
                        "attributeContract": {
                            "$ref": "#/definitions/SpAdapterAttributeContract",
                            "description": "The list of attributes that the SP adapter provides.",
                            "position": 1000
                        },
                        "targetApplicationInfo": {
                            "$ref": "#/definitions/SpAdapterTargetApplicationInfo",
                            "description": "The target application's name and icon URL",
                            "position": 2000
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "SpAdapterAttribute": {
            "description": "An attribute for the SP adapter attribute contract.",
            "properties": {
                "name": {
                    "description": "The name of this attribute.",
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "SpAdapterAttributeContract": {
            "description": "A set of attributes exposed by an SP adapter.",
            "properties": {
                "coreAttributes": {
                    "description": "A list of read-only attributes that are automatically populated by the SP adapter descriptor.",
                    "items": {
                        "$ref": "#/definitions/SpAdapterAttribute"
                    },
                    "position": 10,
                    "type": "array"
                },
                "extendedAttributes": {
                    "description": "A list of additional attributes that can be returned by the SP adapter. The extended attributes are only used if the adapter supports them.",
                    "items": {
                        "$ref": "#/definitions/SpAdapterAttribute"
                    },
                    "position": 20,
                    "type": "array"
                },
                "inherited": {
                    "description": "Whether this attribute contract is inherited from its parent instance. If true, the rest of the properties in this model become read-only. The default value is false.",
                    "position": 40,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "SpAdapterDescriptor": {
            "allOf": [
                {
                    "$ref": "#/definitions/PluginDescriptor"
                },
                {
                    "description": "An SP adapter descriptor.",
                    "properties": {},
                    "type": "object"
                }
            ]
        },
        "SpAdapterDescriptors": {
            "description": "A collection of SP adapter descriptors.",
            "properties": {
                "items": {
                    "description": "The list of SP adapter descriptors.",
                    "items": {
                        "$ref": "#/definitions/SpAdapterDescriptor"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SpAdapterMapping": {
            "description": "A mapping to a SP adapter.",
            "properties": {
                "adapterOverrideSettings": {
                    "$ref": "#/definitions/SpAdapter",
                    "description": "Connection specific overridden adapter instance for mapping.",
                    "position": 8
                },
                "attributeContractFulfillment": {
                    "additionalProperties": {
                        "$ref": "#/definitions/AttributeFulfillmentValue"
                    },
                    "description": "A list of mappings from attribute names to their fulfillment values.",
                    "position": 20,
                    "type": "object"
                },
                "attributeSources": {
                    "description": "A list of configured data stores to look up attributes from.",
                    "items": {
                        "$ref": "#/definitions/AttributeSource"
                    },
                    "position": 10,
                    "type": "array"
                },
                "issuanceCriteria": {
                    "$ref": "#/definitions/IssuanceCriteria",
                    "description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
                    "position": 30
                },
                "restrictVirtualEntityIds": {
                    "description": "Restricts this mapping to specific virtual entity IDs.",
                    "position": 6,
                    "type": "boolean"
                },
                "restrictedVirtualEntityIds": {
                    "description": "The list of virtual server IDs that this mapping is restricted to.",
                    "items": {
                        "type": "string"
                    },
                    "position": 7,
                    "type": "array"
                },
                "spAdapterRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the associated SP adapter.<br>Note: This is ignored if adapter overrides for this mapping exists. In this case, the override's parent adapter reference is used.",
                    "position": 5
                }
            },
            "required": [
                "attributeContractFulfillment",
                "spAdapterRef"
            ],
            "type": "object"
        },
        "SpAdapterTargetApplicationInfo": {
            "description": "Target Application Information exposed by an SP adapter.",
            "properties": {
                "applicationIconUrl": {
                    "description": "The application icon URL.",
                    "position": 20,
                    "type": "string"
                },
                "applicationName": {
                    "description": "The application name.",
                    "position": 10,
                    "type": "string"
                },
                "inherited": {
                    "description": "Specifies Whether target application information is inherited from its parent instance. If true, the rest of the properties in this model become read-only. The default value is false.",
                    "position": 99,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "SpAdapterUrlMapping": {
            "description": "SP Adapter URL Mapping",
            "properties": {
                "adapterRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "The adapter instance mapped for this URL.",
                    "position": 20
                },
                "url": {
                    "description": "The URL that will be compared against the target URL. Use a wildcard (*) to match multiple URLs to the same adapter instance.",
                    "position": 10,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SpAdapterUrlMappings": {
            "properties": {
                "items": {
                    "description": "The actual list of SP adapter URL mappings.",
                    "items": {
                        "$ref": "#/definitions/SpAdapterUrlMapping"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SpAdapters": {
            "description": "A collection of SP adapters.",
            "properties": {
                "items": {
                    "description": "The actual list of SP adapters.",
                    "items": {
                        "$ref": "#/definitions/SpAdapter"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SpAttributeQuery": {
            "description": "The attribute query profile supports SPs in requesting user attributes.",
            "properties": {
                "attributeContractFulfillment": {
                    "additionalProperties": {
                        "$ref": "#/definitions/AttributeFulfillmentValue"
                    },
                    "description": "A list of mappings from attribute names to their fulfillment values.",
                    "position": 20,
                    "type": "object"
                },
                "attributeSources": {
                    "description": "A list of configured data stores to look up attributes from.",
                    "items": {
                        "$ref": "#/definitions/AttributeSource"
                    },
                    "position": 50,
                    "type": "array"
                },
                "attributes": {
                    "description": "The list of attributes that may be returned to the SP in the response to an attribute request.",
                    "items": {
                        "type": "string"
                    },
                    "position": 1,
                    "type": "array",
                    "uniqueItems": true
                },
                "issuanceCriteria": {
                    "$ref": "#/definitions/IssuanceCriteria",
                    "description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
                    "position": 30
                },
                "policy": {
                    "$ref": "#/definitions/SpAttributeQueryPolicy",
                    "description": "The attribute query profile's security policy.",
                    "position": 40
                }
            },
            "required": [
                "attributeContractFulfillment",
                "attributeSources",
                "attributes"
            ],
            "type": "object"
        },
        "SpAttributeQueryPolicy": {
            "description": "The attribute query profile's security policy.",
            "properties": {
                "encryptAssertion": {
                    "description": "Encrypt the assertion.",
                    "position": 30,
                    "type": "boolean"
                },
                "requireEncryptedNameId": {
                    "description": "Require an encrypted name identifier.",
                    "position": 50,
                    "type": "boolean"
                },
                "requireSignedAttributeQuery": {
                    "description": "Require signed attribute query.",
                    "position": 40,
                    "type": "boolean"
                },
                "signAssertion": {
                    "description": "Sign the assertion.",
                    "position": 20,
                    "type": "boolean"
                },
                "signResponse": {
                    "description": "Sign the response.",
                    "position": 10,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "SpBrowserSso": {
            "description": "The SAML settings used to enable secure browser-based SSO to resources at your partner's site.",
            "properties": {
                "adapterMappings": {
                    "description": "A list of adapters that map to outgoing assertions.",
                    "items": {
                        "$ref": "#/definitions/IdpAdapterAssertionMapping"
                    },
                    "position": 1070,
                    "type": "array"
                },
                "alwaysSignArtifactResponse": {
                    "description": "Specify to always sign the SAML ArtifactResponse.",
                    "position": 90,
                    "type": "boolean"
                },
                "artifact": {
                    "$ref": "#/definitions/ArtifactSettings",
                    "description": "The settings for an artifact binding.",
                    "position": 60
                },
                "assertionLifetime": {
                    "$ref": "#/definitions/AssertionLifetime",
                    "description": "The timeframe of validity before and after the issuance of the assertion.",
                    "position": 1090
                },
                "attributeContract": {
                    "$ref": "#/definitions/SpBrowserSsoAttributeContract",
                    "description": "A set of user attributes that the IdP sends in the SAML assertion.",
                    "position": 1060
                },
                "authenticationPolicyContractAssertionMappings": {
                    "description": "A list of authentication policy contracts that map to outgoing assertions.",
                    "items": {
                        "$ref": "#/definitions/AuthenticationPolicyContractAssertionMapping"
                    },
                    "position": 1080,
                    "type": "array"
                },
                "defaultTargetUrl": {
                    "description": "Default Target URL for SAML1.x connections. For SP connections, this default URL represents the destination on the SP where the user will be directed. For IdP connections, entering a URL in the Default Target URL field overrides the SP Default URL SSO setting.",
                    "position": 80,
                    "type": "string"
                },
                "enabledProfiles": {
                    "description": "The profiles that are enabled for browser-based SSO. SAML 2.0 supports all profiles whereas SAML 1.x IdP connections support both IdP and SP (non-standard) initiated SSO. This is required for SAMLx.x Connections. ",
                    "items": {
                        "enum": [
                            "IDP_INITIATED_SSO",
                            "SP_INITIATED_SSO",
                            "IDP_INITIATED_SLO",
                            "SP_INITIATED_SLO"
                        ],
                        "type": "string"
                    },
                    "position": 20,
                    "type": "array",
                    "uniqueItems": true
                },
                "encryptionPolicy": {
                    "$ref": "#/definitions/EncryptionPolicy",
                    "description": "The SAML 2.0 encryption policy for browser-based SSO. Required for SAML 2.0 connections.",
                    "position": 1040
                },
                "incomingBindings": {
                    "description": "The SAML bindings that are enabled for browser-based SSO. This is required for SAML 2.0 connections when the enabled profiles contain the SP-initiated SSO profile or either SLO profile. For SAML 1.x based connections, it is not used for SP Connections and it is optional for IdP Connections.",
                    "items": {
                        "enum": [
                            "ARTIFACT",
                            "POST",
                            "REDIRECT",
                            "SOAP"
                        ],
                        "type": "string"
                    },
                    "position": 30,
                    "type": "array",
                    "uniqueItems": true
                },
                "messageCustomizations": {
                    "description": "The message customizations for browser-based SSO. Depending on server settings, connection type, and protocol this may or may not be supported.",
                    "items": {
                        "$ref": "#/definitions/ProtocolMessageCustomization"
                    },
                    "position": 40,
                    "type": "array"
                },
                "protocol": {
                    "description": "The browser-based SSO protocol to use.",
                    "enum": [
                        "SAML20",
                        "WSFED",
                        "SAML11",
                        "SAML10",
                        "OIDC"
                    ],
                    "position": 10,
                    "type": "string"
                },
                "requireSignedAuthnRequests": {
                    "description": "Require AuthN requests to be signed when received via the POST or Redirect bindings.",
                    "position": 1030,
                    "type": "boolean"
                },
                "signAssertions": {
                    "description": "Always sign the SAML Assertion.",
                    "position": 1020,
                    "type": "boolean"
                },
                "signResponseAsRequired": {
                    "description": "Sign SAML Response as required by the associated binding and encryption policy. Applicable to SAML2.0 only and is defaulted to true. It can be set to false only on SAML2.0 connections when signAssertions is set to true.",
                    "position": 1015,
                    "type": "boolean"
                },
                "sloServiceEndpoints": {
                    "description": "A list of possible endpoints to send SLO requests and responses.",
                    "items": {
                        "$ref": "#/definitions/SloServiceEndpoint"
                    },
                    "position": 70,
                    "type": "array"
                },
                "spSamlIdentityMapping": {
                    "description": "Process in which users authenticated by the IdP are associated with user accounts local to the SP.",
                    "enum": [
                        "PSEUDONYM",
                        "STANDARD",
                        "TRANSIENT"
                    ],
                    "position": 1010,
                    "type": "string"
                },
                "spWsFedIdentityMapping": {
                    "description": "Process in which users authenticated by the IdP are associated with user accounts local to the SP for WS-Federation connection types.",
                    "enum": [
                        "EMAIL_ADDRESS",
                        "USER_PRINCIPLE_NAME",
                        "COMMON_NAME"
                    ],
                    "position": 1011,
                    "type": "string"
                },
                "ssoServiceEndpoints": {
                    "description": "A list of possible endpoints to send assertions to.",
                    "items": {
                        "$ref": "#/definitions/SpSsoServiceEndpoint"
                    },
                    "position": 1000,
                    "type": "array"
                },
                "urlWhitelistEntries": {
                    "description": "For WS-Federation connections, a whitelist of additional allowed domains and paths used to validate wreply for SLO, if enabled.",
                    "items": {
                        "$ref": "#/definitions/UrlWhitelistEntry"
                    },
                    "position": 50,
                    "type": "array"
                },
                "wsFedTokenType": {
                    "description": "The WS-Federation Token Type to use.",
                    "enum": [
                        "SAML11",
                        "SAML20",
                        "JWT"
                    ],
                    "position": 15,
                    "type": "string"
                },
                "wsTrustVersion": {
                    "description": "The WS-Trust version for a WS-Federation connection. The default version is WSTRUST12.",
                    "enum": [
                        "WSTRUST12",
                        "WSTRUST13"
                    ],
                    "position": 16,
                    "type": "string"
                }
            },
            "required": [
                "adapterMappings",
                "assertionLifetime",
                "attributeContract",
                "encryptionPolicy",
                "protocol",
                "ssoServiceEndpoints"
            ],
            "type": "object"
        },
        "SpBrowserSsoAttribute": {
            "description": "An attribute for the SP Browser SSO attribute contract.",
            "properties": {
                "name": {
                    "description": "The name of this attribute.",
                    "position": 10,
                    "type": "string"
                },
                "nameFormat": {
                    "description": "The SAML Name Format for the attribute.",
                    "position": 100,
                    "type": "string"
                }
            },
            "required": [
                "name",
                "nameFormat"
            ],
            "type": "object"
        },
        "SpBrowserSsoAttributeContract": {
            "description": "A set of user attributes that the IdP sends in the SAML assertion.",
            "properties": {
                "coreAttributes": {
                    "description": "A list of read-only assertion attributes (for example, SAML_SUBJECT) that are automatically populated by PingFederate.",
                    "items": {
                        "$ref": "#/definitions/SpBrowserSsoAttribute"
                    },
                    "position": 10,
                    "type": "array"
                },
                "extendedAttributes": {
                    "description": "A list of additional attributes that are added to the outgoing assertion.",
                    "items": {
                        "$ref": "#/definitions/SpBrowserSsoAttribute"
                    },
                    "position": 20,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SpConnection": {
            "allOf": [
                {
                    "$ref": "#/definitions/Connection"
                },
                {
                    "description": "The set of attributes used to configure an SP connection.",
                    "properties": {
                        "applicationIconUrl": {
                            "description": "The application icon url.",
                            "position": 102,
                            "type": "string"
                        },
                        "applicationName": {
                            "description": "The application name.",
                            "position": 101,
                            "type": "string"
                        },
                        "attributeQuery": {
                            "$ref": "#/definitions/SpAttributeQuery",
                            "description": "The attribute query settings for supporting SPs in requesting user attributes.",
                            "position": 66
                        },
                        "connectionTargetType": {
                            "description": "The connection target type. This field is intended for bulk import/export usage. Changing its value may result in unexpected behavior.",
                            "enum": [
                                "STANDARD",
                                "SALESFORCE",
                                "SALESFORCE_CP",
                                "SALESFORCE_PP",
                                "PINGONE_SCIM11"
                            ],
                            "position": 160,
                            "type": "string"
                        },
                        "outboundProvision": {
                            "$ref": "#/definitions/OutboundProvision",
                            "description": "The Outbound Provision settings.",
                            "position": 150
                        },
                        "spBrowserSso": {
                            "$ref": "#/definitions/SpBrowserSso",
                            "description": "The browser-based SSO settings used to communicate with your SP.",
                            "position": 65
                        },
                        "wsTrust": {
                            "$ref": "#/definitions/SpWsTrust",
                            "description": "The Ws-Trust settings.",
                            "position": 67
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "SpConnections": {
            "description": "A collection of SP connections.",
            "properties": {
                "items": {
                    "description": "The actual list of connections.",
                    "items": {
                        "$ref": "#/definitions/SpConnection"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SpDefaultUrls": {
            "description": "SP Default URLs.",
            "properties": {
                "confirmSlo": {
                    "description": "Determines whether the user is prompted to confirm Single Logout (SLO). The default is false.",
                    "position": 15,
                    "type": "boolean"
                },
                "sloSuccessUrl": {
                    "description": "Provide the default URL you would like to send the user to when Single Logout (SLO) has succeeded.",
                    "position": 20,
                    "type": "string"
                },
                "ssoSuccessUrl": {
                    "description": "Provide the default URL you would like to send the user to when Single Sign On (SSO) has succeeded.",
                    "position": 10,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SpRole": {
            "allOf": [
                {
                    "$ref": "#/definitions/BaseProviderRole"
                },
                {
                    "description": "This property has been deprecated and is no longer used. All Roles and protocols are always enabled.",
                    "properties": {
                        "enable": {
                            "description": "Enable Service Provider Role.",
                            "position": 10,
                            "type": "boolean"
                        },
                        "enableInboundProvisioning": {
                            "description": "Enable Inbound Provisioning.",
                            "position": 80,
                            "type": "boolean"
                        },
                        "enableOpenIDConnect": {
                            "description": "Enable OpenID Connect.",
                            "position": 75,
                            "type": "boolean"
                        },
                        "saml20Profile": {
                            "$ref": "#/definitions/SpSAML20Profile",
                            "description": "SAML 2.0 Profile settings.",
                            "position": 20
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "SpSAML20Profile": {
            "allOf": [
                {
                    "$ref": "#/definitions/SAML20Profile"
                },
                {
                    "description": "SP SAML 2.0 Profile.",
                    "properties": {
                        "enableXASP": {
                            "description": "Enable Attribute Requester Mapping for X.509 Attribute Sharing Profile (XASP)",
                            "position": 11,
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "SpSsoServiceEndpoint": {
            "description": "The settings that define a service endpoint to a SP SSO service.",
            "properties": {
                "binding": {
                    "description": "The binding of this endpoint, if applicable - usually only required for SAML 2.0 endpoints.  Supported bindings are Artifact and POST.",
                    "enum": [
                        "ARTIFACT",
                        "POST",
                        "REDIRECT",
                        "SOAP"
                    ],
                    "position": 10,
                    "type": "string"
                },
                "index": {
                    "description": "The priority of the endpoint.",
                    "format": "int32",
                    "position": 40,
                    "type": "integer"
                },
                "isDefault": {
                    "description": "Whether or not this endpoint is the default endpoint. Defaults to false.",
                    "position": 30,
                    "type": "boolean"
                },
                "url": {
                    "description": "The absolute or relative URL of the endpoint. A relative URL can be specified if a base URL for the connection has been defined.",
                    "position": 20,
                    "type": "string"
                }
            },
            "required": [
                "binding",
                "index",
                "url"
            ],
            "type": "object"
        },
        "SpTokenGeneratorMapping": {
            "description": "The SP Token Generator Mapping.",
            "properties": {
                "attributeContractFulfillment": {
                    "additionalProperties": {
                        "$ref": "#/definitions/AttributeFulfillmentValue"
                    },
                    "description": "A list of mappings from attribute names to their fulfillment values.",
                    "position": 20,
                    "type": "object"
                },
                "attributeSources": {
                    "description": "A list of configured data stores to look up attributes from.",
                    "items": {
                        "$ref": "#/definitions/AttributeSource"
                    },
                    "position": 10,
                    "type": "array"
                },
                "defaultMapping": {
                    "description": "Indicates whether the token generator mapping is the default mapping. The default value is false.",
                    "position": 7,
                    "type": "boolean"
                },
                "issuanceCriteria": {
                    "$ref": "#/definitions/IssuanceCriteria",
                    "description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
                    "position": 30
                },
                "restrictedVirtualEntityIds": {
                    "description": "The list of virtual server IDs that this mapping is restricted to.",
                    "items": {
                        "type": "string"
                    },
                    "position": 6,
                    "type": "array"
                },
                "spTokenGeneratorRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the associated token generator.",
                    "position": 5
                }
            },
            "required": [
                "attributeContractFulfillment",
                "spTokenGeneratorRef"
            ],
            "type": "object"
        },
        "SpUrlMapping": {
            "description": "SP URL mapping",
            "properties": {
                "ref": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "The adapter or connection instance mapped for this URL.",
                    "position": 30
                },
                "type": {
                    "description": "The URL mapping type",
                    "enum": [
                        "SP_ADAPTER",
                        "SP_CONNECTION"
                    ],
                    "position": 20,
                    "type": "string"
                },
                "url": {
                    "description": "The URL that will be compared against the target URL. Use a wildcard (*) to match multiple URLs to the same adapter or connection instance.",
                    "position": 10,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SpUrlMappings": {
            "properties": {
                "items": {
                    "description": "The actual list of SP connection URL mappings.",
                    "items": {
                        "$ref": "#/definitions/SpUrlMapping"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SpWsTrust": {
            "description": "Ws-Trust STS provides security-token validation and creation to extend SSO access to identity-enabled Web Services",
            "properties": {
                "abortIfNotFulfilledFromRequest": {
                    "description": "If the attribute contract cannot be fulfilled using data from the Request, abort the transaction.",
                    "position": 100,
                    "type": "boolean"
                },
                "attributeContract": {
                    "$ref": "#/definitions/SpWsTrustAttributeContract",
                    "description": "A set of user attributes that the IdP sends in the token.",
                    "position": 80
                },
                "defaultTokenType": {
                    "description": "The default token type when a web service client (WSC) does not specify in the token request which token type the STS should issue. Defaults to SAML 2.0.",
                    "enum": [
                        "SAML20",
                        "SAML11",
                        "SAML11_O365"
                    ],
                    "position": 30,
                    "type": "string"
                },
                "encryptSaml2Assertion": {
                    "description": "When selected, the STS encrypts the SAML 2.0 assertion. Applicable only to SAML 2.0 security token.  This option does not apply to OAuth assertion profiles.",
                    "position": 50,
                    "type": "boolean"
                },
                "generateKey": {
                    "description": "When selected, the STS generates a symmetric key to be used in conjunction with the \"Holder of Key\" (HoK) designation for the assertion's Subject Confirmation Method.  This option does not apply to OAuth assertion profiles.",
                    "position": 40,
                    "type": "boolean"
                },
                "messageCustomizations": {
                    "description": "The message customizations for WS-Trust. Depending on server settings, connection type, and protocol this may or may not be supported.",
                    "items": {
                        "$ref": "#/definitions/ProtocolMessageCustomization"
                    },
                    "position": 120,
                    "type": "array"
                },
                "minutesAfter": {
                    "description": "The amount of time after the SAML token was issued during which it is to be considered valid. The default value is 30.",
                    "format": "int32",
                    "position": 70,
                    "type": "integer"
                },
                "minutesBefore": {
                    "description": "The amount of time before the SAML token was issued during which it is to be considered valid. The default value is 5.",
                    "format": "int32",
                    "position": 60,
                    "type": "integer"
                },
                "oAuthAssertionProfiles": {
                    "description": "When selected, four additional token-type requests become available.",
                    "position": 20,
                    "type": "boolean"
                },
                "partnerServiceIds": {
                    "description": "The partner service identifiers.",
                    "items": {
                        "type": "string"
                    },
                    "position": 10,
                    "type": "array"
                },
                "requestContractRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Request Contract to be used to map attribute values into the security token.",
                    "position": 110
                },
                "tokenProcessorMappings": {
                    "description": "A list of token processors to validate incoming tokens.",
                    "items": {
                        "$ref": "#/definitions/IdpTokenProcessorMapping"
                    },
                    "position": 90,
                    "type": "array"
                }
            },
            "required": [
                "attributeContract",
                "partnerServiceIds",
                "tokenProcessorMappings"
            ],
            "type": "object"
        },
        "SpWsTrustAttribute": {
            "description": "An attribute for the Ws-Trust attribute contract.",
            "properties": {
                "name": {
                    "description": "The name of this attribute.",
                    "position": 10,
                    "type": "string"
                },
                "namespace": {
                    "description": "The attribute namespace.  This is required when the Default Token Type is SAML2.0 or SAML1.1 or SAML1.1 for Office 365.",
                    "position": 100,
                    "type": "string"
                }
            },
            "required": [
                "name",
                "namespace"
            ],
            "type": "object"
        },
        "SpWsTrustAttributeContract": {
            "description": "A set of user attributes that this server will send in the token.",
            "properties": {
                "coreAttributes": {
                    "description": "A list of read-only assertion attributes that are automatically populated by PingFederate.",
                    "items": {
                        "$ref": "#/definitions/SpWsTrustAttribute"
                    },
                    "position": 10,
                    "type": "array"
                },
                "extendedAttributes": {
                    "description": "A list of additional attributes that are added to the outgoing assertion.",
                    "items": {
                        "$ref": "#/definitions/SpWsTrustAttribute"
                    },
                    "position": 20,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SqlMethod": {
            "description": "SQL Method.",
            "properties": {
                "storedProcedure": {
                    "$ref": "#/definitions/StoredProcedure",
                    "description": "The Stored Procedure SQL method. The procedure is always called for all SSO tokens and \"eventTrigger\" will always be 'ALL_SAML_ASSERTIONS'.",
                    "position": 20
                },
                "table": {
                    "$ref": "#/definitions/Table",
                    "description": "The Table SQL method.",
                    "position": 10
                }
            },
            "type": "object"
        },
        "SslServerSettings": {
            "description": "Settings for the SSL Server certificate configuration.",
            "properties": {
                "activeAdminConsoleCerts": {
                    "description": "The active SSL Server Certificate Key pairs for PF Administrator Console.",
                    "items": {
                        "$ref": "#/definitions/ResourceLink"
                    },
                    "position": 40,
                    "type": "array"
                },
                "activeRuntimeServerCerts": {
                    "description": "The active SSL Server Certificate Key pairs for Runtime Server.",
                    "items": {
                        "$ref": "#/definitions/ResourceLink"
                    },
                    "position": 30,
                    "type": "array"
                },
                "adminConsoleCertRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the default SSL Server Certificate Key pair active for PF Administrator Console.",
                    "position": 20
                },
                "runtimeServerCertRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the default SSL Server Certificate Key pair active for Runtime Server.",
                    "position": 10
                }
            },
            "required": [
                "adminConsoleCertRef",
                "runtimeServerCertRef"
            ],
            "type": "object"
        },
        "SsoOAuthMapping": {
            "description": "IdP Browser SSO OAuth Attribute Mapping",
            "properties": {
                "attributeContractFulfillment": {
                    "additionalProperties": {
                        "$ref": "#/definitions/AttributeFulfillmentValue"
                    },
                    "description": "A list of mappings from attribute names to their fulfillment values.",
                    "position": 20,
                    "type": "object"
                },
                "attributeSources": {
                    "description": "A list of configured data stores to look up attributes from.",
                    "items": {
                        "$ref": "#/definitions/AttributeSource"
                    },
                    "position": 10,
                    "type": "array"
                },
                "issuanceCriteria": {
                    "$ref": "#/definitions/IssuanceCriteria",
                    "description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
                    "position": 30
                }
            },
            "required": [
                "attributeContractFulfillment"
            ],
            "type": "object"
        },
        "StoredProcedure": {
            "description": "SQL Method Stored Procedure.",
            "properties": {
                "schema": {
                    "description": "Lists the table structure that stores information within a database.",
                    "position": 10,
                    "type": "string"
                },
                "storedProcedure": {
                    "description": "The name of the database stored procedure.",
                    "position": 20,
                    "type": "string"
                }
            },
            "required": [
                "schema",
                "storedProcedure"
            ],
            "type": "object"
        },
        "StsRequestParametersContract": {
            "description": "A Security Token Service request parameter contract.",
            "properties": {
                "id": {
                    "description": "The ID of the Security Token Service request parameter contract.<br>Note: Ignored for PUT requests.",
                    "position": 10,
                    "type": "string"
                },
                "name": {
                    "description": "The name of the Security Token Service request parameter contract.<br>Note: Ignored for PUT requests.",
                    "position": 20,
                    "type": "string"
                },
                "parameters": {
                    "description": "The list of parameters within the Security  Token Service request parameter contract.",
                    "items": {
                        "type": "string"
                    },
                    "position": 30,
                    "type": "array"
                }
            },
            "required": [
                "id",
                "name",
                "parameters"
            ],
            "type": "object"
        },
        "StsRequestParametersContracts": {
            "description": "A Collection of STS Request Parameters Contracts",
            "properties": {
                "items": {
                    "description": "The actual list of STS Request Parameters Contracts.",
                    "items": {
                        "$ref": "#/definitions/StsRequestParametersContract"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SystemKey": {
            "description": "A system key.",
            "properties": {
                "creationDate": {
                    "description": "Creation time of the key.",
                    "format": "date-time",
                    "position": 10,
                    "type": "string"
                },
                "encryptedKeyData": {
                    "description": "The system key encrypted.",
                    "position": 20,
                    "type": "string"
                },
                "keyData": {
                    "description": "The clear text system key base 64 encoded. The system key must be 32 bytes before base 64 encoding.",
                    "position": 30,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SystemKeys": {
            "description": "Secrets that are used in cryptographic operations to generate and consume internal tokens",
            "properties": {
                "current": {
                    "$ref": "#/definitions/SystemKey",
                    "description": "The current secret.",
                    "position": 10
                },
                "pending": {
                    "$ref": "#/definitions/SystemKey",
                    "description": "The next secret.",
                    "position": 30
                },
                "previous": {
                    "$ref": "#/definitions/SystemKey",
                    "description": "Previously used secret.",
                    "position": 20
                }
            },
            "required": [
                "current",
                "pending"
            ],
            "type": "object"
        },
        "Table": {
            "description": "SQL Method Table.",
            "properties": {
                "schema": {
                    "description": "Lists the table structure that stores information within a database.",
                    "position": 10,
                    "type": "string"
                },
                "tableName": {
                    "description": "The name of the database table.",
                    "position": 20,
                    "type": "string"
                },
                "uniqueIdColumn": {
                    "description": "The database column that uniquely identifies the provisioned user on the SP side.",
                    "position": 30,
                    "type": "string"
                }
            },
            "required": [
                "schema",
                "tableName",
                "uniqueIdColumn"
            ],
            "type": "object"
        },
        "TableDescriptor": {
            "description": "Defines a plugin configuration table.",
            "properties": {
                "columns": {
                    "description": "Get the columns in the table.",
                    "items": {
                        "$ref": "#/definitions/FieldDescriptor"
                    },
                    "position": 30,
                    "type": "array"
                },
                "description": {
                    "description": "Description for the table.",
                    "position": 20,
                    "type": "string"
                },
                "label": {
                    "description": "Label for the table to be displayed in the administrative console.",
                    "position": 40,
                    "type": "string"
                },
                "name": {
                    "description": "The name of the table.",
                    "position": 10,
                    "type": "string"
                },
                "requireDefaultRow": {
                    "description": "Configure whether this table requires default row to be set.",
                    "position": 50,
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "TextAreaFieldDescriptor": {
            "allOf": [
                {
                    "$ref": "#/definitions/FieldDescriptor"
                },
                {
                    "description": "A field intended to be rendered as a text box in a UI.",
                    "properties": {
                        "columns": {
                            "description": "The number of columns for the text box.",
                            "format": "int32",
                            "position": 110,
                            "type": "integer"
                        },
                        "rows": {
                            "description": "The number of rows for the text box.",
                            "format": "int32",
                            "position": 100,
                            "type": "integer"
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "TextFieldDescriptor": {
            "allOf": [
                {
                    "$ref": "#/definitions/FieldDescriptor"
                },
                {
                    "description": "A text field.",
                    "properties": {
                        "encrypted": {
                            "description": "Determines whether the field value should be masked in the UI and encrypted on disk.",
                            "position": 100,
                            "type": "boolean"
                        },
                        "size": {
                            "description": "The size of the text field.",
                            "format": "int32",
                            "position": 110,
                            "type": "integer"
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "TextLocalIdentityField": {
            "allOf": [
                {
                    "$ref": "#/definitions/BaseDefaultValueLocalIdentityField"
                },
                {
                    "description": "A text type field.",
                    "properties": {},
                    "type": "object"
                }
            ]
        },
        "TokenExchangeGeneratorGroup": {
            "description": "The set of attributes used to configure a OAuth 2.0 Token Exchange Generator group.",
            "properties": {
                "generatorMappings": {
                    "description": "A list of Token Generator mapping into an OAuth 2.0 Token Exchange requested token type.",
                    "items": {
                        "$ref": "#/definitions/TokenExchangeGeneratorMapping"
                    },
                    "position": 40,
                    "type": "array"
                },
                "id": {
                    "description": "The Token Exchange Generator group ID. ID is unique.",
                    "position": 10,
                    "type": "string"
                },
                "name": {
                    "description": "The Token Exchange Generator group name. Name is unique.",
                    "position": 20,
                    "type": "string"
                },
                "resourceUris": {
                    "description": "The list of  resource URI's which map to this Token Exchange Generator group.",
                    "items": {
                        "type": "string"
                    },
                    "position": 30,
                    "type": "array"
                }
            },
            "required": [
                "generatorMappings",
                "id",
                "name"
            ],
            "type": "object"
        },
        "TokenExchangeGeneratorGroups": {
            "description": "A collection of OAuth 2.0 Token Exchange Generator groups.",
            "properties": {
                "items": {
                    "description": "The list of OAuth 2.0 Token Exchange Generator groups.",
                    "items": {
                        "$ref": "#/definitions/TokenExchangeGeneratorGroup"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "TokenExchangeGeneratorMapping": {
            "description": "A Token Generator mapping into an OAuth 2.0 Token Exchange requested token type.",
            "properties": {
                "defaultMapping": {
                    "description": "Whether this is the default Token Generator Mapping. Defaults to false if not specified.",
                    "position": 120,
                    "type": "boolean"
                },
                "requestedTokenType": {
                    "description": "The Requested token type",
                    "position": 100,
                    "type": "string"
                },
                "tokenGenerator": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "The Token Generator used to generate the requested token",
                    "position": 110
                }
            },
            "required": [
                "requestedTokenType",
                "tokenGenerator"
            ],
            "type": "object"
        },
        "TokenExchangeGeneratorSettings": {
            "description": "Settings for the OAuth Token Exchange Generator Groups.",
            "properties": {
                "defaultGeneratorGroupRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the default Token Exchange Generator group, if one is defined.",
                    "position": 10
                }
            },
            "type": "object"
        },
        "TokenExchangeProcessorAttribute": {
            "description": "An attribute for the OAuth 2.0 Token Exchange Processor policy attribute contract.",
            "properties": {
                "name": {
                    "description": "The name of this attribute.",
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "TokenExchangeProcessorAttributeContract": {
            "description": "A set of attributes exposed by an OAuth 2.0 Token Exchange Processor policy.",
            "properties": {
                "coreAttributes": {
                    "description": "A list of read-only attributes (for example, subject) that are automatically populated by PingFederate.",
                    "items": {
                        "$ref": "#/definitions/TokenExchangeProcessorAttribute"
                    },
                    "position": 10,
                    "type": "array"
                },
                "extendedAttributes": {
                    "description": "A list of additional attributes.",
                    "items": {
                        "$ref": "#/definitions/TokenExchangeProcessorAttribute"
                    },
                    "position": 20,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "TokenExchangeProcessorMapping": {
            "description": "A Token Processor(s) mapping into an OAuth 2.0 Token Exchange Processor policy.",
            "properties": {
                "actorTokenProcessor": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "The Token processor used to process the actor token",
                    "position": 130
                },
                "actorTokenType": {
                    "description": "The Actor token type",
                    "position": 120,
                    "type": "string"
                },
                "attributeContractFulfillment": {
                    "additionalProperties": {
                        "$ref": "#/definitions/AttributeFulfillmentValue"
                    },
                    "description": "A list of mappings from attribute names to their fulfillment values.",
                    "position": 20,
                    "type": "object"
                },
                "attributeSources": {
                    "description": "A list of configured data stores to look up attributes from.",
                    "items": {
                        "$ref": "#/definitions/AttributeSource"
                    },
                    "position": 10,
                    "type": "array"
                },
                "issuanceCriteria": {
                    "$ref": "#/definitions/IssuanceCriteria",
                    "description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
                    "position": 30
                },
                "subjectTokenProcessor": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "The Token processor used to process the subject token",
                    "position": 110
                },
                "subjectTokenType": {
                    "description": "The Subject token type",
                    "position": 100,
                    "type": "string"
                }
            },
            "required": [
                "attributeContractFulfillment",
                "subjectTokenProcessor",
                "subjectTokenType"
            ],
            "type": "object"
        },
        "TokenExchangeProcessorPolicies": {
            "description": "A collection of OAuth 2.0 Token Exchange Processor policies.",
            "properties": {
                "items": {
                    "description": "The list of OAuth 2.0 Token Exchange Processor policies.",
                    "items": {
                        "$ref": "#/definitions/TokenExchangeProcessorPolicy"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "TokenExchangeProcessorPolicy": {
            "description": "The set of attributes used to configure a OAuth 2.0 Token Exchange processor policy.",
            "properties": {
                "actorTokenRequired": {
                    "description": "Require an Actor token on a OAuth 2.0 Token Exchange request.",
                    "position": 30,
                    "type": "boolean"
                },
                "attributeContract": {
                    "$ref": "#/definitions/TokenExchangeProcessorAttributeContract",
                    "description": "A set of attributes exposed by an OAuth 2.0 Token Exchange Processor policy.",
                    "position": 40
                },
                "id": {
                    "description": "The Token Exchange processor policy ID. ID is unique.",
                    "position": 10,
                    "type": "string"
                },
                "name": {
                    "description": "The Token Exchange processor policy name. Name is unique.",
                    "position": 20,
                    "type": "string"
                },
                "processorMappings": {
                    "description": "A list of Token Processor(s) mappings into an OAuth 2.0 Token Exchange Processor policy.",
                    "items": {
                        "$ref": "#/definitions/TokenExchangeProcessorMapping"
                    },
                    "position": 50,
                    "type": "array"
                }
            },
            "required": [
                "attributeContract",
                "id",
                "name",
                "processorMappings"
            ],
            "type": "object"
        },
        "TokenExchangeProcessorSettings": {
            "description": "Settings for the OAuth Token Exchange Processor Policy configuration.",
            "properties": {
                "defaultProcessorPolicyRef": {
                    "$ref": "#/definitions/ResourceLink",
                    "description": "Reference to the default Token Exchange Processor policy, if one is defined.",
                    "position": 10
                }
            },
            "type": "object"
        },
        "TokenGenerator": {
            "allOf": [
                {
                    "$ref": "#/definitions/PluginInstance"
                },
                {
                    "description": "A token generator instance.",
                    "properties": {
                        "attributeContract": {
                            "$ref": "#/definitions/TokenGeneratorAttributeContract",
                            "description": "The list of attributes that the token generator provides.",
                            "position": 60
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "TokenGeneratorAttribute": {
            "description": "An attribute for the token generator attribute contract.",
            "properties": {
                "name": {
                    "description": "The name of this attribute.",
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "TokenGeneratorAttributeContract": {
            "description": "A set of attributes exposed by a token generator.",
            "properties": {
                "coreAttributes": {
                    "description": "A list of token generator attributes that correspond to the attributes exposed by the token generator type.",
                    "items": {
                        "$ref": "#/definitions/TokenGeneratorAttribute"
                    },
                    "position": 10,
                    "type": "array"
                },
                "extendedAttributes": {
                    "description": "A list of additional attributes that can be returned by the token processor. The extended attributes are only used if the token generator supports them.",
                    "items": {
                        "$ref": "#/definitions/TokenGeneratorAttribute"
                    },
                    "position": 20,
                    "type": "array"
                },
                "inherited": {
                    "description": "Whether this attribute contract is inherited from its parent instance. If true, the rest of the properties in this model become read-only. The default value is false.",
                    "position": 30,
                    "type": "boolean"
                }
            },
            "required": [
                "coreAttributes"
            ],
            "type": "object"
        },
        "TokenGeneratorDescriptor": {
            "allOf": [
                {
                    "$ref": "#/definitions/PluginDescriptor"
                },
                {
                    "description": "A token generator descriptor.",
                    "properties": {},
                    "type": "object"
                }
            ]
        },
        "TokenGeneratorDescriptors": {
            "description": "A collection of token generator descriptors.",
            "properties": {
                "items": {
                    "description": "The list of token generator descriptors.",
                    "items": {
                        "$ref": "#/definitions/TokenGeneratorDescriptor"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "TokenGenerators": {
            "description": "A collection of token generators.",
            "properties": {
                "items": {
                    "description": "The actual list of token generator.",
                    "items": {
                        "$ref": "#/definitions/TokenGenerator"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "TokenProcessor": {
            "allOf": [
                {
                    "$ref": "#/definitions/PluginInstance"
                },
                {
                    "description": "A token processor instance.",
                    "properties": {
                        "attributeContract": {
                            "$ref": "#/definitions/TokenProcessorAttributeContract",
                            "description": "The list of attributes that the token processor provides.",
                            "position": 5
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "TokenProcessorAttribute": {
            "description": "An attribute for the token processor attribute contract.",
            "properties": {
                "masked": {
                    "description": "Specifies whether this attribute is masked in PingFederate logs. Defaults to false.",
                    "position": 1000,
                    "type": "boolean"
                },
                "name": {
                    "description": "The name of this attribute.",
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "TokenProcessorAttributeContract": {
            "description": "A set of attributes exposed by a token processor.",
            "properties": {
                "coreAttributes": {
                    "description": "A list of token processor attributes that correspond to the attributes exposed by the token processor type.",
                    "items": {
                        "$ref": "#/definitions/TokenProcessorAttribute"
                    },
                    "position": 10,
                    "type": "array"
                },
                "extendedAttributes": {
                    "description": "A list of additional attributes that can be returned by the token processor. The extended attributes are only used if the token processor supports them.",
                    "items": {
                        "$ref": "#/definitions/TokenProcessorAttribute"
                    },
                    "position": 20,
                    "type": "array"
                },
                "inherited": {
                    "description": "Whether this attribute contract is inherited from its parent instance. If true, the rest of the properties in this model become read-only. The default value is false.",
                    "position": 40,
                    "type": "boolean"
                },
                "maskOgnlValues": {
                    "description": "Whether or not all OGNL expressions used to fulfill an outgoing assertion contract should be masked in the logs. Defaults to false.",
                    "position": 30,
                    "type": "boolean"
                }
            },
            "required": [
                "coreAttributes"
            ],
            "type": "object"
        },
        "TokenProcessorDescriptor": {
            "allOf": [
                {
                    "$ref": "#/definitions/PluginDescriptor"
                },
                {
                    "description": "A token processor descriptor.",
                    "properties": {},
                    "type": "object"
                }
            ]
        },
        "TokenProcessorDescriptors": {
            "description": "A collection of token processor descriptors.",
            "properties": {
                "items": {
                    "description": "The list of token processor descriptors.",
                    "items": {
                        "$ref": "#/definitions/TokenProcessorDescriptor"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "TokenProcessors": {
            "description": "A collection of token processors.",
            "properties": {
                "items": {
                    "description": "The actual list of token processors.",
                    "items": {
                        "$ref": "#/definitions/TokenProcessor"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "TokenToTokenMapping": {
            "description": "A Token Processor to Token Generator Mapping.",
            "properties": {
                "attributeContractFulfillment": {
                    "additionalProperties": {
                        "$ref": "#/definitions/AttributeFulfillmentValue"
                    },
                    "description": "A list of mappings from attribute names to their fulfillment values.",
                    "position": 20,
                    "type": "object"
                },
                "attributeSources": {
                    "description": "A list of configured data stores to look up attributes from.",
                    "items": {
                        "$ref": "#/definitions/AttributeSource"
                    },
                    "position": 10,
                    "type": "array"
                },
                "defaultTargetResource": {
                    "description": "Default target URL for this Token Processor to Token Generator mapping configuration.",
                    "position": 70,
                    "type": "string"
                },
                "id": {
                    "description": "The id of the Token Processor to Token Generator mapping. This field is read-only and is ignored when passed in with the payload.",
                    "position": 60,
                    "type": "string"
                },
                "issuanceCriteria": {
                    "$ref": "#/definitions/IssuanceCriteria",
                    "description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
                    "position": 30
                },
                "licenseConnectionGroupAssignment": {
                    "description": "The license connection group.",
                    "position": 80,
                    "type": "string"
                },
                "sourceId": {
                    "description": "The id of the Token Processor.",
                    "position": 40,
                    "type": "string"
                },
                "targetId": {
                    "description": "The id of the Token Generator.",
                    "position": 50,
                    "type": "string"
                }
            },
            "required": [
                "attributeContractFulfillment",
                "sourceId",
                "targetId"
            ],
            "type": "object"
        },
        "TokenToTokenMappings": {
            "properties": {
                "items": {
                    "description": "The list of Token Processor to Token Generator mappings.",
                    "items": {
                        "$ref": "#/definitions/TokenToTokenMapping"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "UploadFileFieldDescriptor": {
            "allOf": [
                {
                    "$ref": "#/definitions/FieldDescriptor"
                },
                {
                    "description": "A field which allows the user to upload a file.",
                    "properties": {},
                    "type": "object"
                }
            ]
        },
        "UrlWhitelistEntry": {
            "description": "Url domain and path to be used as whitelist in WS-Federation connection",
            "properties": {
                "allowQueryAndFragment": {
                    "description": "Allow Any Query/Fragment",
                    "position": 30,
                    "type": "boolean"
                },
                "requireHttps": {
                    "description": "Require HTTPS",
                    "position": 40,
                    "type": "boolean"
                },
                "validDomain": {
                    "description": "Valid Domain Name (leading wildcard '*.' allowed)",
                    "position": 10,
                    "type": "string"
                },
                "validPath": {
                    "description": "Valid Path (leave blank to allow any path)",
                    "position": 20,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UserCredentials": {
            "description": "Credentials for an administrator account.",
            "properties": {
                "currentPassword": {
                    "description": "Current password. Required only during Password Change and not applicable for Password Reset.",
                    "position": 10,
                    "type": "string"
                },
                "newPassword": {
                    "description": "A new password.",
                    "position": 20,
                    "type": "string"
                }
            },
            "required": [
                "newPassword"
            ],
            "type": "object"
        },
        "UsernamePasswordCredentials": {
            "description": "Username and password credentials.",
            "properties": {
                "encryptedPassword": {
                    "description": "For GET requests, this field contains the encrypted password, if one exists.  For POST and PUT requests, if you wish to reuse the existing password, this field should be passed back unchanged.",
                    "position": 40,
                    "type": "string"
                },
                "password": {
                    "description": "User password.  To update the password, specify the plaintext value in this field.  This field will not be populated for GET requests.",
                    "position": 30,
                    "type": "string"
                },
                "username": {
                    "description": "The username.",
                    "position": 20,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Users": {
            "description": "User creation and read configuration.",
            "properties": {
                "readUsers": {
                    "$ref": "#/definitions/ReadUsers",
                    "description": "Configuration to lookup user info within the user repository and respond to incoming SCIM requests.",
                    "position": 20
                },
                "writeUsers": {
                    "$ref": "#/definitions/WriteUsers",
                    "description": "Configuration to create a user within the user repository.",
                    "position": 10
                }
            },
            "required": [
                "readUsers",
                "writeUsers"
            ],
            "type": "object"
        },
        "ValidationError": {
            "description": "A data input validation error.",
            "properties": {
                "developerMessage": {
                    "description": "Developer-oriented error message, if available.",
                    "position": 30,
                    "type": "string"
                },
                "errorId": {
                    "description": "Error identifier.",
                    "position": 10,
                    "type": "string"
                },
                "fieldPath": {
                    "description": "The path to the model field to which the error relates, if one exists.",
                    "position": 40,
                    "type": "string"
                },
                "message": {
                    "description": "User-friendly error description.",
                    "position": 20,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Version": {
            "description": "Server version.",
            "properties": {
                "version": {
                    "description": "Server version.",
                    "position": 10,
                    "type": "string"
                }
            },
            "type": "object"
        },
        "VirtualHostNameSettings": {
            "description": "Settings for virtual host names.",
            "properties": {
                "virtualHostNames": {
                    "description": "List of virtual host names.",
                    "items": {
                        "type": "string"
                    },
                    "position": 10,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "WriteGroups": {
            "description": "Group creation configuration.",
            "properties": {
                "attributeFulfillment": {
                    "additionalProperties": {
                        "$ref": "#/definitions/AttributeFulfillmentValue"
                    },
                    "description": "A list of user repository mappings from attribute names to their fulfillment values.",
                    "position": 10,
                    "type": "object"
                }
            },
            "required": [
                "attributeFulfillment"
            ],
            "type": "object"
        },
        "WriteUsers": {
            "description": "User creation configuration.",
            "properties": {
                "attributeFulfillment": {
                    "additionalProperties": {
                        "$ref": "#/definitions/AttributeFulfillmentValue"
                    },
                    "description": "A list of user repository mappings from attribute names to their fulfillment values.",
                    "position": 10,
                    "type": "object"
                }
            },
            "required": [
                "attributeFulfillment"
            ],
            "type": "object"
        },
        "WsTrustStsSettings": {
            "description": "Configure PingFederate to require that client applications provide credentials to access the WS-Trust STS endpoints.",
            "properties": {
                "basicAuthnEnabled": {
                    "description": "Require the use of HTTP Basic Authentication to access WS-Trust STS endpoints. Requires users be populated.",
                    "position": 10,
                    "type": "boolean"
                },
                "clientCertAuthnEnabled": {
                    "description": "Require the use of Client Cert Authentication to access WS-Trust STS endpoints. Requires either restrictBySubjectDn and/or restrictByIssuerCert be enabled.",
                    "position": 20,
                    "type": "boolean"
                },
                "issuerCerts": {
                    "description": "List of certificate Issuers that are used to validate certificates for access to the WS-Trust STS endpoints. Required if restrictByIssuerCert is enabled.",
                    "items": {
                        "$ref": "#/definitions/ResourceLink"
                    },
                    "position": 70,
                    "type": "array"
                },
                "restrictByIssuerCert": {
                    "description": "Restrict Access by Issuer Certificate. Ignored if clientCertAuthnEnabled is disabled.",
                    "position": 40,
                    "type": "boolean"
                },
                "restrictBySubjectDn": {
                    "description": "Restrict Access by Subject DN. Ignored if clientCertAuthnEnabled is disabled.",
                    "position": 30,
                    "type": "boolean"
                },
                "subjectDns": {
                    "description": "List of Subject DNs for certificates that are allowed to authenticate to WS-Trust STS endpoints. Required if restrictBySubjectDn is enabled.",
                    "items": {
                        "type": "string"
                    },
                    "position": 50,
                    "type": "array"
                },
                "users": {
                    "description": "List of users authorized to access WS-Trust STS endpoints when basicAuthnEnabled is enabled. At least one users entry is required if basicAuthnEnabled is enabled.",
                    "items": {
                        "$ref": "#/definitions/UsernamePasswordCredentials"
                    },
                    "position": 60,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "X509File": {
            "description": "Encoded certificate data.",
            "properties": {
                "cryptoProvider": {
                    "description": "Cryptographic Provider. This is only applicable if Hybrid HSM mode is true.",
                    "enum": [
                        "LOCAL",
                        "HSM"
                    ],
                    "position": 30,
                    "type": "string"
                },
                "fileData": {
                    "description": "The certificate data in PEM format. New line characters should be omitted or encoded in this value.",
                    "position": 20,
                    "type": "string"
                },
                "id": {
                    "description": "The persistent, unique ID for the certificate. It can be any combination of [a-z0-9._-]. This property is system-assigned if not specified.",
                    "position": 10,
                    "type": "string"
                }
            },
            "required": [
                "fileData"
            ],
            "type": "object"
        }
    },
    "host": "pingfederate-admin.dev-pikelet-hammer.au1.ping.cloud:443",
    "info": {
        "description": "The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.",
        "title": "Administrative API Documentation"
    },
    "paths": {
        "/administrativeAccounts": {
            "get": {
                "description": "",
                "operationId": "getAccounts",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/AdministrativeAccounts"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get all the PingFederate native Administrative Accounts.",
                "tags": [
                    "/administrativeAccounts"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "addAccount",
                "parameters": [
                    {
                        "description": "Administrative account information.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AdministrativeAccount"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "New Administrative Account created.",
                        "schema": {
                            "$ref": "#/definitions/AdministrativeAccount"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Add a new PingFederate native Administrative Account.",
                "tags": [
                    "/administrativeAccounts"
                ]
            }
        },
        "/administrativeAccounts/changePassword": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "changePassword",
                "parameters": [
                    {
                        "description": "User Account credential.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserCredentials"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Administrator password changed.",
                        "schema": {
                            "$ref": "#/definitions/UserCredentials"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Change the Password of current PingFederate native Account.",
                "tags": [
                    "/administrativeAccounts"
                ]
            }
        },
        "/administrativeAccounts/{username}": {
            "delete": {
                "description": "",
                "operationId": "deleteAccount",
                "parameters": [
                    {
                        "description": "Username of the account to be deleted.",
                        "in": "path",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Administrator Account Deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete a PingFederate native Administrative Account information.",
                "tags": [
                    "/administrativeAccounts"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getAccount",
                "parameters": [
                    {
                        "description": "Username of the administrative account.",
                        "in": "path",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/AdministrativeAccount"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get a PingFederate native Administrative Account.",
                "tags": [
                    "/administrativeAccounts"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateAccount",
                "parameters": [
                    {
                        "description": "Username of the account to be updated.",
                        "in": "path",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Administrative account information.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AdministrativeAccount"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Administrator Account updated.",
                        "schema": {
                            "$ref": "#/definitions/AdministrativeAccount"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update the information for a native Administrative Account.",
                "tags": [
                    "/administrativeAccounts"
                ]
            }
        },
        "/administrativeAccounts/{username}/resetPassword": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "resetPassword",
                "parameters": [
                    {
                        "description": "Username of the administrative account.",
                        "in": "path",
                        "name": "username",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "New password.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserCredentials"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Administrator password reset.",
                        "schema": {
                            "$ref": "#/definitions/UserCredentials"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Reset the Password of an existing PingFederate native Administrative Account.",
                "tags": [
                    "/administrativeAccounts"
                ]
            }
        },
        "/authenticationApi/applications": {
            "get": {
                "description": "",
                "operationId": "getAuthenticationApiApplications",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/AuthnApiApplications"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get the collection of Authentication API Applications.",
                "tags": [
                    "/authenticationApi"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "createApplication",
                "parameters": [
                    {
                        "description": "Configuration for new Authentication API Application.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuthnApiApplication"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Authentication API Application created.",
                        "schema": {
                            "$ref": "#/definitions/AuthnApiApplication"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a new Authentication API Application.",
                "tags": [
                    "/authenticationApi"
                ]
            }
        },
        "/authenticationApi/applications/{id}": {
            "delete": {
                "description": "Delete an Authentication API Application with the specified ID. A 404 status code is returned for nonexistent IDs. Note: If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
                "operationId": "deleteApplication",
                "parameters": [
                    {
                        "description": "ID of Authentication API Application to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Authentication API Application deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete an Authentication API Application.",
                "tags": [
                    "/authenticationApi"
                ]
            },
            "get": {
                "description": "Get an Authentication API Application with the specified ID. A 404 status code is returned for nonexistent IDs.",
                "operationId": "getApplication",
                "parameters": [
                    {
                        "description": "ID of the Authentication API Application to fetch.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/AuthnApiApplication"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Find Authentication API Application by ID.",
                "tags": [
                    "/authenticationApi"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "Update an Authentication API Application with the matching ID. If the application is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected. Note: A 404 status code is returned for nonexistent IDs.",
                "operationId": "updateApplication",
                "parameters": [
                    {
                        "description": "ID of the Authentication API Application to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for updated application.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuthnApiApplication"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Authentication API Application updated.",
                        "schema": {
                            "$ref": "#/definitions/AuthnApiApplication"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update an Authentication API Application.",
                "tags": [
                    "/authenticationApi"
                ]
            }
        },
        "/authenticationApi/settings": {
            "get": {
                "description": "",
                "operationId": "getAuthenticationApiSettings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/AuthnApiSettings"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get the Authentication API settings.",
                "tags": [
                    "/authenticationApi"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateAuthenticationApiSettings",
                "parameters": [
                    {
                        "description": "Authentication API Settings",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuthnApiSettings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Settings updated.",
                        "schema": {
                            "$ref": "#/definitions/AuthnApiSettings"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Set the Authentication API settings.",
                "tags": [
                    "/authenticationApi"
                ]
            }
        },
        "/authenticationPolicies/default": {
            "get": {
                "description": "",
                "operationId": "getDefaultAuthenticationPolicy",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationPolicy"
                        }
                    }
                },
                "summary": "Get the default configured authentication policy.",
                "tags": [
                    "/authenticationPolicies"
                ]
            },
            "put": {
                "description": "",
                "operationId": "updateDefaultAuthenticationPolicy",
                "parameters": [
                    {
                        "description": "Default authentication policy.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuthenticationPolicy"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Default authentication policy updated.",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationPolicy"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Set the default authentication policy.",
                "tags": [
                    "/authenticationPolicies"
                ]
            }
        },
        "/authenticationPolicies/fragments": {
            "get": {
                "description": "",
                "operationId": "getFragments",
                "parameters": [
                    {
                        "description": "Page number to retrieve.",
                        "format": "int32",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of fragments per page.",
                        "format": "int32",
                        "in": "query",
                        "name": "numberPerPage",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Filter criteria limits the fragments that are returned to only those that match it. The filter criteria is compared to the fragment instance name and ID fields. The comparison is a case-insensitive partial match. No additional pattern based matching is supported.",
                        "in": "query",
                        "name": "filter",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationPolicyFragments"
                        }
                    }
                },
                "summary": "Get all of the authentication policies fragments.",
                "tags": [
                    "/authenticationPolicies"
                ]
            },
            "post": {
                "description": "",
                "operationId": "createFragment",
                "parameters": [
                    {
                        "description": "Configuration of the authentication policy fragment.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuthenticationPolicyFragment"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Authentication policy fragment created.",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationPolicyFragment"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create an authentication policy fragment.",
                "tags": [
                    "/authenticationPolicies"
                ]
            }
        },
        "/authenticationPolicies/fragments/{id}": {
            "delete": {
                "description": "",
                "operationId": "deleteFragment",
                "parameters": [
                    {
                        "description": "ID of the policy fragment to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Authentication policy fragment deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete an authentication policy fragment.",
                "tags": [
                    "/authenticationPolicies"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getFragment",
                "parameters": [
                    {
                        "description": "ID of the policy fragment to fetch.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationPolicyFragment"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get an authentication policy fragment by ID.",
                "tags": [
                    "/authenticationPolicies"
                ]
            },
            "put": {
                "description": "",
                "operationId": "updateFragment",
                "parameters": [
                    {
                        "description": "ID of the policy fragment to  update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration of the authentication policy fragment.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuthenticationPolicyFragment"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Authentication policy fragment updated.",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationPolicyFragment"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update an authentication policy fragment.",
                "tags": [
                    "/authenticationPolicies"
                ]
            }
        },
        "/authenticationPolicies/policy": {
            "post": {
                "description": "",
                "operationId": "createPolicy",
                "parameters": [
                    {
                        "description": "Configuration of the authentication policy.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuthenticationPolicyTree"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Authentication policy created.",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationPolicyTree"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a new authentication policy.",
                "tags": [
                    "/authenticationPolicies"
                ]
            }
        },
        "/authenticationPolicies/policy/{id}": {
            "delete": {
                "description": "",
                "operationId": "deletePolicy",
                "parameters": [
                    {
                        "description": "Authentication policy Id.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Authentication policy deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete an authentication policy.",
                "tags": [
                    "/authenticationPolicies"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getPolicy",
                "parameters": [
                    {
                        "description": "Authentication policy Id.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationPolicyTree"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get an authentication policy by ID.",
                "tags": [
                    "/authenticationPolicies"
                ]
            },
            "put": {
                "description": "",
                "operationId": "updatePolicy",
                "parameters": [
                    {
                        "description": "Authentication policy Id.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration of the authentication policy.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuthenticationPolicyTree"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Authentication policy updated.",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationPolicyTree"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update an authentication policy.",
                "tags": [
                    "/authenticationPolicies"
                ]
            }
        },
        "/authenticationPolicies/policy/{id}/move": {
            "post": {
                "description": "",
                "operationId": "movePolicy",
                "parameters": [
                    {
                        "description": "Authentication policy Id.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Metadata about where to move the policy",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/MoveItemRequest"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Move an authentication policy to a location within the policy tree.",
                "tags": [
                    "/authenticationPolicies"
                ]
            }
        },
        "/authenticationPolicies/settings": {
            "get": {
                "description": "",
                "operationId": "getSettings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationPoliciesSettings"
                        }
                    }
                },
                "summary": "Get the authentication policies settings.",
                "tags": [
                    "/authenticationPolicies"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateSettings",
                "parameters": [
                    {
                        "description": "Authentication policies settings.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuthenticationPoliciesSettings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Settings updated.",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationPoliciesSettings"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    }
                },
                "summary": "Set the authentication policies settings.",
                "tags": [
                    "/authenticationPolicies"
                ]
            }
        },
        "/authenticationPolicyContracts": {
            "get": {
                "description": "",
                "operationId": "getAuthenticationPolicyContracts",
                "parameters": [
                    {
                        "description": "Page number to retrieve.",
                        "format": "int32",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of contracts per page.",
                        "format": "int32",
                        "in": "query",
                        "name": "numberPerPage",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Filter criteria limits the authentication policy contracts that are returned to only those that match it. The filter criteria is compared to the authentication policy contract name and ID fields. The comparison is a case-insensitive partial match. No additional pattern based matching is supported.",
                        "in": "query",
                        "name": "filter",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationPolicyContracts"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Gets the Authentication Policy Contracts.",
                "tags": [
                    "/authenticationPolicyContracts"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Create a new Authentication Policy Contract. If the Authentication Policy Contract is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
                "operationId": "createAuthenticationPolicyContract",
                "parameters": [
                    {
                        "description": "Configuration for a new contract.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuthenticationPolicyContract"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Authentication policy contract created.",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationPolicyContract"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a new Authentication Policy Contract.",
                "tags": [
                    "/authenticationPolicyContracts"
                ]
            }
        },
        "/authenticationPolicyContracts/{id}": {
            "delete": {
                "description": "Delete an Authentication Policy Contract with the specified ID. A 404 status code is returned for nonexistent IDs. Note: If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
                "operationId": "deleteAuthenticationPolicyContract",
                "parameters": [
                    {
                        "description": "ID of Authentication Policy Contract to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Authentication policy contract deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Resource is in use and cannot be deleted.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete an Authentication Policy Contract.",
                "tags": [
                    "/authenticationPolicyContracts"
                ]
            },
            "get": {
                "description": "Get an Authentication Policy Contract with the specified ID. A 404 status code is returned for nonexistent IDs",
                "operationId": "getAuthenticationPolicyContract",
                "parameters": [
                    {
                        "description": "ID of contract to fetch",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationPolicyContract"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Gets the Authentication Policy Contract by ID.",
                "tags": [
                    "/authenticationPolicyContracts"
                ]
            },
            "put": {
                "description": "Update an Authentication Policy Contract with the specified ID. A 404 status code is returned for nonexistent IDs.",
                "operationId": "updateAuthenticationPolicyContract",
                "parameters": [
                    {
                        "description": "ID of the Authentication Policy Contract to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for updated Authentication Policy Contract.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuthenticationPolicyContract"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Authentication policy contract updated.",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationPolicyContract"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update an Authentication Policy Contract by ID.",
                "tags": [
                    "/authenticationPolicyContracts"
                ]
            }
        },
        "/authenticationSelectors": {
            "get": {
                "description": "",
                "operationId": "getAuthenticationSelectors",
                "parameters": [
                    {
                        "description": "Page number to retrieve.",
                        "format": "int32",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of selectors per page.",
                        "format": "int32",
                        "in": "query",
                        "name": "numberPerPage",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Filter criteria limits the authentication selector instances that are returned to only those that match it. The filter criteria is compared to the authentication selector instance name and ID fields. The comparison is a case-insensitive partial match. No additional pattern based matching is supported.",
                        "in": "query",
                        "name": "filter",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationSelectors"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get the list of configured Authentication Selector instances.",
                "tags": [
                    "/authenticationSelectors"
                ]
            },
            "post": {
                "description": "Create a new authentication selector instance. If the authentication selector is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
                "operationId": "createAuthenticationSelector",
                "parameters": [
                    {
                        "description": "Configuration for a new authentication selector instance.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuthenticationSelector"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Authentication selector created.",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationSelector"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a new authentication selector instance.",
                "tags": [
                    "/authenticationSelectors"
                ]
            }
        },
        "/authenticationSelectors/descriptors": {
            "get": {
                "description": "",
                "operationId": "getAuthenticationSelectorDescriptors",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationSelectorDescriptors"
                        }
                    }
                },
                "summary": "Get the list of available Authentication Selector descriptors.",
                "tags": [
                    "/authenticationSelectors"
                ]
            }
        },
        "/authenticationSelectors/descriptors/{id}": {
            "get": {
                "description": "Get the description of an Authentication Selector plugin by ID. A 404 status code is returned for nonexistent IDs.",
                "operationId": "getAuthenticationSelectorDescriptorsById",
                "parameters": [
                    {
                        "description": "ID of Authentication Selector descriptor to fetch.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationSelectorDescriptor"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get the description of an Authentication Selector plugin by ID.",
                "tags": [
                    "/authenticationSelectors"
                ]
            }
        },
        "/authenticationSelectors/{id}": {
            "delete": {
                "description": "Delete an Authentication Selector instance with the specified ID. A 404 status code is returned for nonexistent IDs. Note: Only selectors not in use can be deleted. If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
                "operationId": "deleteAuthenticationSelector",
                "parameters": [
                    {
                        "description": "ID of Authentication Selector to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Authentication selector deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Resource is in use and cannot be deleted.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete an Authentication Selector instance.",
                "tags": [
                    "/authenticationSelectors"
                ]
            },
            "get": {
                "description": "Get the configured Authentication Selector instance with the specified ID. A 404 status code is returned for nonexistent IDs.",
                "operationId": "getAuthenticationSelector",
                "parameters": [
                    {
                        "description": "ID of Authentication Selector instance to fetch.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationSelector"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get an Authentication Selector instance by ID.",
                "tags": [
                    "/authenticationSelectors"
                ]
            },
            "put": {
                "description": "Update an authentication selector instance. If the authentication selector is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
                "operationId": "updateAuthenticationSelector",
                "parameters": [
                    {
                        "description": "ID of the authentication selector instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for updated authentication selector instance.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuthenticationSelector"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Authentication selector updated.",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationSelector"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update an authentication selector instance.",
                "tags": [
                    "/authenticationSelectors"
                ]
            }
        },
        "/bulk/export": {
            "get": {
                "description": "For the /configStore resource type, only the settings that are different from the defaults for this version of PingFederate are included in the export.<br><br>Only resource types currently supported by the Administrative API are included in the exported data. Resources not yet supported include:<br><br>- SMS Provider Settings<br>",
                "operationId": "exportConfiguration",
                "parameters": [
                    {
                        "default": false,
                        "description": "Include external resources like OAuth clients stored outside of PingFederate.",
                        "in": "query",
                        "name": "includeExternalResources",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/BulkConfig"
                        }
                    },
                    "403": {
                        "description": "The current configuration cannot be bulk exported."
                    }
                },
                "summary": "Export all API resources to a JSON file.",
                "tags": [
                    "/bulk"
                ]
            }
        },
        "/bulk/import": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "All existing configuration will be wiped before the import begins. If any validation errors are found, PingFederate will roll back to the previous configuration. The master key set in pf.jwk must include the key in use when the JSON configuration was originally exported.",
                "operationId": "importConfiguration",
                "parameters": [
                    {
                        "default": true,
                        "description": "When set to true, stops the import as soon as any validation errors are encountered. When false, import will continue to validate configuration after the first failure to identify all validation errors. If any validation errors are present PingFederate will roll back to the state prior to the import attempt.",
                        "in": "query",
                        "name": "failFast",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "description": "Configuration to import.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BulkConfig"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success."
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Import configuration for a PingFederate deployment from a JSON file.",
                "tags": [
                    "/bulk"
                ]
            }
        },
        "/certificates/ca": {
            "get": {
                "description": "",
                "operationId": "getTrustedCAs",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/CertViews"
                        }
                    }
                },
                "summary": "Get list of trusted certificate authorities.",
                "tags": [
                    "/certificates/ca"
                ]
            }
        },
        "/certificates/ca/import": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "importTrustedCA",
                "parameters": [
                    {
                        "description": "File data to import.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/X509File"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Certificate Authority imported.",
                        "schema": {
                            "$ref": "#/definitions/CertView"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Import a new trusted certificate authority.",
                "tags": [
                    "/certificates/ca"
                ]
            }
        },
        "/certificates/ca/{id}": {
            "delete": {
                "description": "If the request is successful, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
                "operationId": "deleteTrustedCA",
                "parameters": [
                    {
                        "description": "ID of the trusted certificate authority to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Certificate Authority deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete a trusted certificate authority.",
                "tags": [
                    "/certificates/ca"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getTrustedCert",
                "parameters": [
                    {
                        "description": "ID of the trusted certificate authority to retrieve.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/CertView"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Retrieve details of a trusted certificate authority.",
                "tags": [
                    "/certificates/ca"
                ]
            }
        },
        "/certificates/ca/{id}/file": {
            "get": {
                "description": "For a successful request, the PEM-encoded certificate file is directly returned as text and the response content type is application/x-x509-ca-cert. If an error occurs, an ApiResult is returned in JSON format and the content type is application/json.",
                "operationId": "exportCertificateFile",
                "parameters": [
                    {
                        "description": "ID of the trusted certificate authority.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Download the certificate from a given trusted certificate authority.",
                "tags": [
                    "/certificates/ca"
                ]
            }
        },
        "/certificates/groups/{groupName}": {
            "get": {
                "description": "",
                "operationId": "getCertificatesForGroup",
                "parameters": [
                    {
                        "description": "Name of the group to retrieve certificates for.",
                        "in": "path",
                        "name": "groupName",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/CertViews"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get list of all certificates for a group.",
                "tags": [
                    "/certificates/groups"
                ]
            }
        },
        "/certificates/groups/{groupName}/import": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "importFeatureCert",
                "parameters": [
                    {
                        "description": "Name of the group to retrieve certificates for.",
                        "in": "path",
                        "name": "groupName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "File data to import.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/X509File"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Group certificate imported.",
                        "schema": {
                            "$ref": "#/definitions/CertView"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Import a new certificate to a group.",
                "tags": [
                    "/certificates/groups"
                ]
            }
        },
        "/certificates/groups/{groupName}/{id}": {
            "delete": {
                "description": "If the request is successful, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
                "operationId": "deleteCertificateFromGroup",
                "parameters": [
                    {
                        "description": "Name of the group to retrieve certificates for.",
                        "in": "path",
                        "name": "groupName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "ID of the certificate to retrieve.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Group certificate deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete a certificate from a group.",
                "tags": [
                    "/certificates/groups"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getCertificateFromGroup",
                "parameters": [
                    {
                        "description": "Name of the group to retrieve certificates for.",
                        "in": "path",
                        "name": "groupName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "ID of the certificate to retrieve.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/CertView"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Retrieve details of a certificate.",
                "tags": [
                    "/certificates/groups"
                ]
            }
        },
        "/certificates/revocation/ocspCertificates": {
            "get": {
                "description": "",
                "operationId": "getOcspCertificates",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/CertViews"
                        }
                    }
                },
                "summary": "Get the list of available OCSP responder signature verification certificates.",
                "tags": [
                    "/certificates/revocation"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "importOcspCertificate",
                "parameters": [
                    {
                        "description": "File to import.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/X509File"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "OCSP responder signature verification certificate imported.",
                        "schema": {
                            "$ref": "#/definitions/CertView"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Import an OCSP responder signature verification certificate.",
                "tags": [
                    "/certificates/revocation"
                ]
            }
        },
        "/certificates/revocation/ocspCertificates/{id}": {
            "delete": {
                "description": "",
                "operationId": "deleteOcspCertificateById",
                "parameters": [
                    {
                        "description": "Certificate ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "OCSP responder signature verification certificate deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Resource is in use and cannot be deleted."
                    }
                },
                "summary": "Delete an OCSP responder signature verification certificate by ID.",
                "tags": [
                    "/certificates/revocation"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getOcspCertificateById",
                "parameters": [
                    {
                        "description": "Certificate ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/CertView"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get an OCSP responder signature verification certificate by ID.",
                "tags": [
                    "/certificates/revocation"
                ]
            }
        },
        "/certificates/revocation/settings": {
            "get": {
                "description": "",
                "operationId": "getRevocationSettings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/CertificateRevocationSettings"
                        }
                    }
                },
                "summary": "Get certificate revocation settings.",
                "tags": [
                    "/certificates/revocation"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateRevocationSettings",
                "parameters": [
                    {
                        "description": "Certificate revocation settings.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CertificateRevocationSettings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Certificate revocation settings updated.",
                        "schema": {
                            "$ref": "#/definitions/CertificateRevocationSettings"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update certificate revocation settings.",
                "tags": [
                    "/certificates/revocation"
                ]
            }
        },
        "/cluster/replicate": {
            "post": {
                "description": "",
                "operationId": "startReplication",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Replication completed successfully.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "403": {
                        "description": "This PingFederate instance is not deployed in clustered mode."
                    }
                },
                "summary": "Replicate configuration updates to all nodes in the cluster.",
                "tags": [
                    "/cluster"
                ]
            }
        },
        "/cluster/status": {
            "get": {
                "description": "",
                "operationId": "getClusterStatus",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/ClusterStatus"
                        }
                    },
                    "403": {
                        "description": "This PingFederate instance is not deployed in clustered mode."
                    }
                },
                "summary": "Get information on the current status of the cluster.",
                "tags": [
                    "/cluster"
                ]
            }
        },
        "/configArchive/export": {
            "get": {
                "description": "",
                "operationId": "exportConfigArchive",
                "parameters": [],
                "produces": [
                    "application/json",
                    "application/zip"
                ],
                "responses": {
                    "200": {
                        "description": "Success."
                    }
                },
                "summary": "Export a configuration archive.",
                "tags": [
                    "/configArchive"
                ]
            }
        },
        "/configArchive/import": {
            "post": {
                "consumes": [
                    "multipart/form-data"
                ],
                "description": "If there are missing components or license inconsistencies, the import is halted by default to allow you to install the necessary components or license. However, you can choose to force the deployment by setting 'forceImport' to true and then install the necessary files later.",
                "operationId": "importConfigArchive",
                "parameters": [
                    {
                        "in": "formData",
                        "name": "file",
                        "required": false,
                        "type": "file"
                    },
                    {
                        "in": "query",
                        "name": "forceImport",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "default": false,
                        "description": "Force import of unsupported versions.",
                        "in": "query",
                        "name": "forceUnsupportedImport",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "default": false,
                        "description": "Reencrypt configuration archive data with the current deployment's encryption key.",
                        "in": "query",
                        "name": "reencryptData",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Configuration Archive imported.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Import a configuration archive.",
                "tags": [
                    "/configArchive"
                ]
            }
        },
        "/configStore/{bundle}": {
            "get": {
                "description": "",
                "operationId": "getSettings",
                "parameters": [
                    {
                        "description": "This field represents a configuration file that contains a bundle of settings.",
                        "in": "path",
                        "name": "bundle",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/ConfigStoreBundle"
                        }
                    },
                    "403": {
                        "description": "The specified configuration bundle is unavailable."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get all settings from a bundle.",
                "tags": [
                    "/configStore"
                ]
            }
        },
        "/configStore/{bundle}/{id}": {
            "delete": {
                "description": "Delete a setting. This is an advanced operation with minimal validation. Incorrect use of this operation can harm the integrity of your PingFederate configuration. Please ensure you have specified the correct bundle name and setting ID before invoking this operation.",
                "operationId": "deleteSetting",
                "parameters": [
                    {
                        "description": "This field represents a configuration file that contains a bundle of settings.",
                        "in": "path",
                        "name": "bundle",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "ID of setting to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Configuration setting deleted."
                    },
                    "403": {
                        "description": "The specified configuration bundle is unavailable."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete a setting.",
                "tags": [
                    "/configStore"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getSetting",
                "parameters": [
                    {
                        "description": "This field represents a configuration file that contains a bundle of settings.",
                        "in": "path",
                        "name": "bundle",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "ID of setting to retrieve.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/ConfigStoreSetting"
                        }
                    },
                    "403": {
                        "description": "The specified configuration bundle is unavailable."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get a single setting from a bundle.",
                "tags": [
                    "/configStore"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "Create or update a setting/bundle. This is an advanced operation with minimal validation. Incorrect use of this operation can harm the integrity of your PingFederate configuration. Please ensure you have specified the correct bundle name, setting ID, and setting value before invoking this operation.",
                "operationId": "updateSetting",
                "parameters": [
                    {
                        "description": "This field represents a configuration file that contains a bundle of settings.",
                        "in": "path",
                        "name": "bundle",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "ID of setting to create/update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration setting.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConfigStoreSetting"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Configuration setting created/updated.",
                        "schema": {
                            "$ref": "#/definitions/ConfigStoreSetting"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "403": {
                        "description": "The specified configuration bundle is unavailable."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create or update a setting/bundle.",
                "tags": [
                    "/configStore"
                ]
            }
        },
        "/configurationEncryptionKeys": {
            "get": {
                "description": "The first key in the list is the current key used for encryption and decryption. Other keys are used for decryption.",
                "operationId": "getConfigurationEncryptionKeys",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/ConfigurationEncryptionKeys"
                        }
                    }
                },
                "summary": "Get the list of Configuration Encryption Keys.",
                "tags": [
                    "/configurationEncryptionKeys"
                ]
            }
        },
        "/configurationEncryptionKeys/rotate": {
            "post": {
                "description": "A new key will be generated and will be used for encryption and decryption. The previous encryption key will continue to be used for decryption.",
                "operationId": "rotateConfigurationEncryptionKey",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Configuration encryption key rotated.",
                        "schema": {
                            "$ref": "#/definitions/ConfigurationEncryptionKeys"
                        }
                    }
                },
                "summary": "Rotate the current Configuration Encryption Key.",
                "tags": [
                    "/configurationEncryptionKeys"
                ]
            }
        },
        "/connectionMetadata/convert": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Convert a partner's SAML metadata into an API JSON representation that can be later saved using one of the connection creation endpoints. The metadata can also be overlaid on top of a specified template connection. The convert operation also returns the authenticity of the metadata based on its certificate. If a certificate isn't embedded in the metadata, one can be provided. Bindings and profiles are only enabled in the resulting connection if the partner metadata provides related endpoints. In several scenarios, additional connection configuration details (such as backchannel authentication) may be required in the connection.",
                "operationId": "convert",
                "parameters": [
                    {
                        "description": "Convert metadata request.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConvertMetadataRequest"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Partner's SAML metadata converted.",
                        "schema": {
                            "$ref": "#/definitions/ConvertMetadataResponse"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Convert a partner's SAML metadata into a JSON representation.",
                "tags": [
                    "/connectionMetadata"
                ]
            }
        },
        "/connectionMetadata/export": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "export",
                "parameters": [
                    {
                        "description": "Export metadata request.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ExportMetadataRequest"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Connection SAML metadata exported.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Export a connection's SAML metadata that can be given to a partner.",
                "tags": [
                    "/connectionMetadata"
                ]
            }
        },
        "/dataStores": {
            "get": {
                "description": "",
                "operationId": "getDataStores",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/DataStores"
                        }
                    }
                },
                "summary": "Get list of all data stores.",
                "tags": [
                    "/dataStores"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Create a new data store. If the data store is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
                "operationId": "createDataStore",
                "parameters": [
                    {
                        "description": "Configuration for new data store.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DataStore"
                        }
                    },
                    {
                        "default": false,
                        "description": "Connection test will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Data store created.",
                        "schema": {
                            "$ref": "#/definitions/DataStore"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a new data store.",
                "tags": [
                    "/dataStores"
                ]
            }
        },
        "/dataStores/descriptors": {
            "get": {
                "description": "",
                "operationId": "getCustomDataStoreDescriptors",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/CustomDataStoreDescriptors"
                        }
                    }
                },
                "summary": "Get the list of available custom data store descriptors.",
                "tags": [
                    "/dataStores"
                ]
            }
        },
        "/dataStores/descriptors/{id}": {
            "get": {
                "description": "Get the description of a custom data store plugin by ID. A 404 status code is returned for nonexistent IDs.",
                "operationId": "getCustomDataStoreDescriptor",
                "parameters": [
                    {
                        "description": "ID of custom data store descriptor to fetch.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/CustomDataStoreDescriptor"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get the description of a custom data store plugin by ID.",
                "tags": [
                    "/dataStores"
                ]
            }
        },
        "/dataStores/{id}": {
            "delete": {
                "description": "Delete a data store with the specified ID. A 404 status code is returned for nonexistent IDs. Note: Only unused data stores can be deleted. If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
                "operationId": "deleteDataStore",
                "parameters": [
                    {
                        "description": "ID of data store instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Data store deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Resource is in use and cannot be deleted.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete a data store.",
                "tags": [
                    "/dataStores"
                ]
            },
            "get": {
                "description": "Get a data store with the specified ID. A 404 status code is returned for nonexistent IDs.",
                "operationId": "getDataStore",
                "parameters": [
                    {
                        "description": "ID of data store instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/DataStore"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Find data store by ID.",
                "tags": [
                    "/dataStores"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "Update a data store with the matching ID. If the data store is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected. Note: A 404 status code is returned for nonexistent IDs.",
                "operationId": "updateDataStore",
                "parameters": [
                    {
                        "description": "ID of data store instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for the data store.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DataStore"
                        }
                    },
                    {
                        "default": false,
                        "description": "Connection test will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Data store updated.",
                        "schema": {
                            "$ref": "#/definitions/DataStore"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update a data store.",
                "tags": [
                    "/dataStores"
                ]
            }
        },
        "/dataStores/{id}/actions": {
            "get": {
                "description": "List the actions for a data store instance. A 404 status code is returned for nonexistent IDs.",
                "operationId": "getActions",
                "parameters": [
                    {
                        "description": "ID of data store to which these actions belong to.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/Actions"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "List the actions for a data store instance.",
                "tags": [
                    "/dataStores"
                ]
            }
        },
        "/dataStores/{id}/actions/{actionId}": {
            "get": {
                "description": "Find a data store instance's action by ID. A 404 status code is returned for nonexistent IDs.",
                "operationId": "getAction",
                "parameters": [
                    {
                        "description": "ID of data store to which these actions belong to.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "ID of the action.",
                        "in": "path",
                        "name": "actionId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/Action"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Find a data store instance's action by ID.",
                "tags": [
                    "/dataStores"
                ]
            }
        },
        "/dataStores/{id}/actions/{actionId}/invokeAction": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Invokes an action for a data source instance. A 404 status code is returned for nonexistent IDs. If the action produces a download file, the file will be returned directly in the response. Otherwise an ActionResult will be returned.",
                "operationId": "invokeActionWithOptions",
                "parameters": [
                    {
                        "description": "ID of data store to which these actions belong to.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "ID of the action.",
                        "in": "path",
                        "name": "actionId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Action options for action invoked.",
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ActionOptions"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Action invoked on Data store.",
                        "schema": {
                            "$ref": "#/definitions/ActionResult"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Invokes an action for a data source instance.",
                "tags": [
                    "/dataStores"
                ]
            }
        },
        "/extendedProperties": {
            "get": {
                "description": "",
                "operationId": "getExtendedProperties",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/ExtendedProperties"
                        }
                    }
                },
                "summary": "Get the defined Extended Properties.",
                "tags": [
                    "/extendedProperties"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateExtendedProperties",
                "parameters": [
                    {
                        "description": "Definition of extended properties.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ExtendedProperties"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Extended properties updated.",
                        "schema": {
                            "$ref": "#/definitions/ExtendedProperties"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update the Extended Properties.",
                "tags": [
                    "/extendedProperties"
                ]
            }
        },
        "/identityStoreProvisioners": {
            "get": {
                "description": "",
                "operationId": "getIdentityStoreProvisioners",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/IdentityStoreProvisioners"
                        }
                    }
                },
                "summary": "Get the list of configured identity store provisioner instances.",
                "tags": [
                    "/identityStoreProvisioners"
                ]
            },
            "post": {
                "description": "",
                "operationId": "createIdentityStoreProvisioner",
                "parameters": [
                    {
                        "description": "Configuration for the identity store provisioner instance.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IdentityStoreProvisioner"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/IdentityStoreProvisioner"
                        }
                    },
                    "201": {
                        "description": "Identity store provisioner created.",
                        "schema": {
                            "$ref": "#/definitions/IdentityStoreProvisioner"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a new identity store provisioner instance.",
                "tags": [
                    "/identityStoreProvisioners"
                ]
            }
        },
        "/identityStoreProvisioners/descriptors": {
            "get": {
                "description": "",
                "operationId": "getIdentityStoreProvisionerDescriptors",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/IdentityStoreProvisionerDescriptors"
                        }
                    }
                },
                "summary": "Get the list of available identity store provisioner descriptors.",
                "tags": [
                    "/identityStoreProvisioners"
                ]
            }
        },
        "/identityStoreProvisioners/descriptors/{id}": {
            "get": {
                "description": "",
                "operationId": "getIdentityStoreProvisionerDescriptorById",
                "parameters": [
                    {
                        "description": "ID of identity store provisioner descriptor",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/IdentityStoreProvisionerDescriptor"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get the descriptor of an identity store provisioner by ID.",
                "tags": [
                    "/identityStoreProvisioners"
                ]
            }
        },
        "/identityStoreProvisioners/{id}": {
            "delete": {
                "description": "",
                "operationId": "deleteIdentityStoreProvisioner",
                "parameters": [
                    {
                        "description": "ID of identity store provisioner instance",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Identity store provisioner deleted"
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Resource is in use and cannot be deleted.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete an identity store provisioner instance",
                "tags": [
                    "/identityStoreProvisioners"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getIdentityStoreProvisioner",
                "parameters": [
                    {
                        "description": "ID of identity store provisioner instance",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/IdentityStoreProvisioner"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get an identity store provisioner by ID.",
                "tags": [
                    "/identityStoreProvisioners"
                ]
            },
            "put": {
                "description": "",
                "operationId": "updateIdentityStoreProvisioner",
                "parameters": [
                    {
                        "description": "ID of identity store provisioner instance",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for the identity store provisioner instance",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IdentityStoreProvisioner"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Identity store provisioner updated",
                        "schema": {
                            "$ref": "#/definitions/IdentityStoreProvisioner"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update an identity store provisioner instance",
                "tags": [
                    "/identityStoreProvisioners"
                ]
            }
        },
        "/idp/adapters": {
            "get": {
                "description": "",
                "operationId": "getIdpAdapters",
                "parameters": [
                    {
                        "description": "Page number to retrieve.",
                        "format": "int32",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of adapters per page.",
                        "format": "int32",
                        "in": "query",
                        "name": "numberPerPage",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Filter criteria limits the IdP adapters that are returned to only those that match it. The filter criteria is compared to the IdP adapter instance name and ID fields. The comparison is a case-insensitive partial match. No additional pattern based matching is supported.",
                        "in": "query",
                        "name": "filter",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/IdpAdapters"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get the list of configured IdP adapter instances.",
                "tags": [
                    "/idp/adapters"
                ]
            },
            "post": {
                "description": "Create a new IdP adapter instance. If the IdP adapter is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
                "operationId": "createIdpAdapter",
                "parameters": [
                    {
                        "description": "Configuration for the IdP adapter instance.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IdpAdapter"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Adapter created.",
                        "schema": {
                            "$ref": "#/definitions/IdpAdapter"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a new IdP adapter instance.",
                "tags": [
                    "/idp/adapters"
                ]
            }
        },
        "/idp/adapters/descriptors": {
            "get": {
                "description": "",
                "operationId": "getIdpAdapterDescriptors",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/IdpAdapterDescriptors"
                        }
                    }
                },
                "summary": "Get the list of available IdP adapter descriptors.",
                "tags": [
                    "/idp/adapters"
                ]
            }
        },
        "/idp/adapters/descriptors/{id}": {
            "get": {
                "description": "Get the description of an IdP adapter plugin by ID. A 404 status code is returned for nonexistent IDs.",
                "operationId": "getIdpAdapterDescriptorsById",
                "parameters": [
                    {
                        "description": "ID of IdP adapter descriptor to fetch.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/IdpAdapterDescriptor"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get the description of an IdP adapter plugin by ID.",
                "tags": [
                    "/idp/adapters"
                ]
            }
        },
        "/idp/adapters/{id}": {
            "delete": {
                "description": "Delete an IdP adapter instance with the specified ID. A 404 status code is returned for nonexistent IDs. Note: Only adapters not in use can be deleted. If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
                "operationId": "deleteIdpAdapter",
                "parameters": [
                    {
                        "description": "ID of IdP adapter instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Adapter deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Resource is in use and cannot be deleted.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete an IdP adapter instance.",
                "tags": [
                    "/idp/adapters"
                ]
            },
            "get": {
                "description": "Get the configured IdP adapter instance with the specified ID. A 404 status code is returned for nonexistent IDs.",
                "operationId": "getIdpAdapter",
                "parameters": [
                    {
                        "description": "ID of IdP adapter instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/IdpAdapter"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Find an IdP adapter instance by ID.",
                "tags": [
                    "/idp/adapters"
                ]
            },
            "put": {
                "description": "Update an IdP adapter instance.If the IdP adapter is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
                "operationId": "updateIdpAdapter",
                "parameters": [
                    {
                        "description": "ID of IdP adapter instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for the IdP adapter instance.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IdpAdapter"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Adapter updated.",
                        "schema": {
                            "$ref": "#/definitions/IdpAdapter"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update an IdP adapter instance.",
                "tags": [
                    "/idp/adapters"
                ]
            }
        },
        "/idp/adapters/{id}/actions": {
            "get": {
                "description": "List the actions for an IdP adapter instance. A 404 status code is returned for nonexistent IDs.",
                "operationId": "getActions",
                "parameters": [
                    {
                        "description": "ID of the IdP adapter instance to which these actions belongs to.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/Actions"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "List the actions for an IdP adapter instance.",
                "tags": [
                    "/idp/adapters"
                ]
            }
        },
        "/idp/adapters/{id}/actions/{actionId}": {
            "get": {
                "description": "Find an IdP adapter instance's action by ID. A 404 status code is returned for nonexistent IDs.",
                "operationId": "getAction",
                "parameters": [
                    {
                        "description": "ID of the IdP adapter instance to which these actions belongs to.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "ID of the action.",
                        "in": "path",
                        "name": "actionId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/Action"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Find an IdP adapter instance's action by ID.",
                "tags": [
                    "/idp/adapters"
                ]
            }
        },
        "/idp/adapters/{id}/actions/{actionId}/invokeAction": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Invokes an action for an IdP adapter instance. A 404 status code is returned for nonexistent IDs. If the action produces a download file, the file will be returned directly in the response. Otherwise an ActionResult will be returned.",
                "operationId": "invokeActionWithOptions",
                "parameters": [
                    {
                        "description": "ID of the IdP adapter instance to which these actions belongs to.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "ID of the action.",
                        "in": "path",
                        "name": "actionId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Action options for action invoked.",
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ActionOptions"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Action invoked on adapter.",
                        "schema": {
                            "$ref": "#/definitions/ActionResult"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Invokes an action for an IdP adapter instance.",
                "tags": [
                    "/idp/adapters"
                ]
            }
        },
        "/idp/connectors/descriptors": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "getIdpConnectorDescriptors",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/SaasPluginDescriptors"
                        }
                    }
                },
                "summary": "Get the list of available IdP connector descriptors.",
                "tags": [
                    "/idp/connectors"
                ]
            }
        },
        "/idp/connectors/descriptors/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "getIdpConnectorDescriptorById",
                "parameters": [
                    {
                        "description": "the type of connector descriptor to fetch.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/SaasPluginDescriptor"
                        }
                    }
                },
                "summary": "Get the list of available connector descriptors.",
                "tags": [
                    "/idp/connectors"
                ]
            }
        },
        "/idp/defaultUrls": {
            "get": {
                "description": "",
                "operationId": "getDefaultUrl",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/IdpDefaultUrl"
                        }
                    }
                },
                "summary": "Gets the IDP Default URL settings.",
                "tags": [
                    "/idp/defaultUrls"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateDefaultUrlSettings",
                "parameters": [
                    {
                        "description": "Configuration for the IdP Default URL settings.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IdpDefaultUrl"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Default URL updated.",
                        "schema": {
                            "$ref": "#/definitions/IdpDefaultUrl"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update the IDP Default URL settings.",
                "tags": [
                    "/idp/defaultUrls"
                ]
            }
        },
        "/idp/spConnections": {
            "get": {
                "description": "Get a list of all the WS-Fed, WS-Trust, SAML1.0, SAML1.1 and SAML 2.0 SP connections.",
                "operationId": "getConnections",
                "parameters": [
                    {
                        "description": "Entity ID of the connection to fetch. (case-sensitive)",
                        "in": "query",
                        "name": "entityId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Page number to retrieve.",
                        "format": "int32",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of connections per page.",
                        "format": "int32",
                        "in": "query",
                        "name": "numberPerPage",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Filter criteria limits the SP connections that are returned to only those that match it. The filter criteria is compared to the SP connection name and partner entity ID fields. The comparison is a case-insensitive partial match. No additional pattern based matching is supported.",
                        "in": "query",
                        "name": "filter",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/SpConnections"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get list of SP connections.",
                "tags": [
                    "/idp/spConnections"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Create a new SP connection. If the SP connection is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
                "operationId": "createConnection",
                "parameters": [
                    {
                        "description": "Configuration for new connection.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SpConnection"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Connection created.",
                        "schema": {
                            "$ref": "#/definitions/SpConnection"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a new SP connection.",
                "tags": [
                    "/idp/spConnections"
                ]
            }
        },
        "/idp/spConnections/{id}": {
            "delete": {
                "description": "Delete an SP connection with the specified ID. A 404 status code is returned for nonexistent IDs. Note: Only inactive connections can be deleted. If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
                "operationId": "deleteConnection",
                "parameters": [
                    {
                        "description": "ID of SP Connection to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Connection deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Resource is in use and cannot be deleted.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete an SP connection.",
                "tags": [
                    "/idp/spConnections"
                ]
            },
            "get": {
                "description": "Get an SP connection with the specified ID. A 404 status code is returned for nonexistent IDs.",
                "operationId": "getConnection",
                "parameters": [
                    {
                        "description": "ID of the SP Connection to fetch.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/SpConnection"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Find SP connection by ID.",
                "tags": [
                    "/idp/spConnections"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "Update an SP connection with the matching ID. If the SP connection is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected. Note: A 404 status code is returned for nonexistent IDs.",
                "operationId": "updateConnection",
                "parameters": [
                    {
                        "description": "ID of SP Connection to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for updated connection.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SpConnection"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Connection updated.",
                        "schema": {
                            "$ref": "#/definitions/SpConnection"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update an SP connection.",
                "tags": [
                    "/idp/spConnections"
                ]
            }
        },
        "/idp/spConnections/{id}/credentials/certs": {
            "get": {
                "description": "",
                "operationId": "getConnectionCerts",
                "parameters": [
                    {
                        "description": "ID of the SP Connection.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/ConnectionCerts"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get the SP connection's certificates.",
                "tags": [
                    "/idp/spConnections"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "If the certificate's activeVerificationCert flag is set to true, it will become the connection's primary verification certificate.",
                "operationId": "addConnectionCert",
                "parameters": [
                    {
                        "description": "ID of the SP Connection to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for a verification certificate.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConnectionCert"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Connection Certificate added.",
                        "schema": {
                            "$ref": "#/definitions/ConnectionCert"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Add a new SP connection certificate.",
                "tags": [
                    "/idp/spConnections"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateConnectionCerts",
                "parameters": [
                    {
                        "description": "ID of the SP Connection to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for a verification certificates.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConnectionCerts"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Connection updated.",
                        "schema": {
                            "$ref": "#/definitions/ConnectionCerts"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update the SP connection's certificates.",
                "tags": [
                    "/idp/spConnections"
                ]
            }
        },
        "/idp/spConnections/{id}/credentials/decryptionKeys": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "getDecryptionKeys",
                "parameters": [
                    {
                        "description": "ID of the SP Connection to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/DecryptionKeys"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get the decryption keys of an SP connection.",
                "tags": [
                    "/idp/spConnections"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateDecryptionKeys",
                "parameters": [
                    {
                        "description": "ID of the SP Connection to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for decryption keys.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DecryptionKeys"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Connection updated.",
                        "schema": {
                            "$ref": "#/definitions/DecryptionKeys"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Updating the SP connection's decryption keys.",
                "tags": [
                    "/idp/spConnections"
                ]
            }
        },
        "/idp/spConnections/{id}/credentials/signingSettings": {
            "get": {
                "description": "",
                "operationId": "getSigningSettings",
                "parameters": [
                    {
                        "description": "ID of the SP Connection.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/SigningSettings"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get the SP connection's signature settings.",
                "tags": [
                    "/idp/spConnections"
                ]
            },
            "put": {
                "description": "",
                "operationId": "updateSigningSettings",
                "parameters": [
                    {
                        "description": "ID of the SP Connection to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Signature settings.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SigningSettings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Connection updated.",
                        "schema": {
                            "$ref": "#/definitions/SigningSettings"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update the SP connection's signature settings.",
                "tags": [
                    "/idp/spConnections"
                ]
            }
        },
        "/idp/stsRequestParametersContracts": {
            "get": {
                "description": "",
                "operationId": "getStsRequestParamContracts",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/StsRequestParametersContracts"
                        }
                    }
                },
                "summary": "Get the list of STS Request Parameters Contracts.",
                "tags": [
                    "/idp/stsRequestParametersContracts"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "createStsRequestParamContract",
                "parameters": [
                    {
                        "description": "Details for the STS Request Parameters Contract.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StsRequestParametersContract"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "STS Request Parameters Contract created.",
                        "schema": {
                            "$ref": "#/definitions/StsRequestParametersContract"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a new STS Request Parameters Contract.",
                "tags": [
                    "/idp/stsRequestParametersContracts"
                ]
            }
        },
        "/idp/stsRequestParametersContracts/{id}": {
            "delete": {
                "description": "",
                "operationId": "deleteStsRequestParamContractById",
                "parameters": [
                    {
                        "description": "ID of STS Request Parameters Contract to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "STS Request Parameters Contract deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete a STS Request Parameters Contract.",
                "tags": [
                    "/idp/stsRequestParametersContracts"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getStsRequestParamContractById",
                "parameters": [
                    {
                        "description": "ID of STS Request Parameters Contract to fetch.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/StsRequestParametersContract"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get a STS Request Parameters Contract.",
                "tags": [
                    "/idp/stsRequestParametersContracts"
                ]
            },
            "put": {
                "description": "",
                "operationId": "updateStsRequestParamContractById",
                "parameters": [
                    {
                        "description": "ID of STS Request Parameters Contract to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Details for updated STS Request Parameters Contract.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StsRequestParametersContract"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "STS Request Parameters Contract updated.",
                        "schema": {
                            "$ref": "#/definitions/StsRequestParametersContract"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update a STS Request Parameters Contract.",
                "tags": [
                    "/idp/stsRequestParametersContracts"
                ]
            }
        },
        "/idp/tokenProcessors": {
            "get": {
                "description": "",
                "operationId": "getTokenProcessors",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/TokenProcessors"
                        }
                    }
                },
                "summary": "Get the list of token processor instances.",
                "tags": [
                    "/idp/tokenProcessors"
                ]
            },
            "post": {
                "description": "Create a new token processor instance. If the token processor is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
                "operationId": "createTokenProcessor",
                "parameters": [
                    {
                        "description": "Configuration for a token processor instance.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TokenProcessor"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Token processor created.",
                        "schema": {
                            "$ref": "#/definitions/TokenProcessor"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a new token processor instance.",
                "tags": [
                    "/idp/tokenProcessors"
                ]
            }
        },
        "/idp/tokenProcessors/descriptors": {
            "get": {
                "description": "",
                "operationId": "getTokenProcessorDescriptors",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/TokenProcessorDescriptors"
                        }
                    }
                },
                "summary": "Get the list of available token processors.",
                "tags": [
                    "/idp/tokenProcessors"
                ]
            }
        },
        "/idp/tokenProcessors/descriptors/{id}": {
            "get": {
                "description": "Get the description of a token processor plugin by ID. A 404 status code is returned for nonexistent IDs.",
                "operationId": "getTokenProcessorDescriptorsById",
                "parameters": [
                    {
                        "description": "ID of a token processor descriptor to fetch.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/TokenProcessorDescriptor"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get the description of a token processor plugin by ID.",
                "tags": [
                    "/idp/tokenProcessors"
                ]
            }
        },
        "/idp/tokenProcessors/{id}": {
            "delete": {
                "description": "Delete a token processor instance with the specified ID. A 404 status code is returned for nonexistent IDs. Note: Only token processors not in use can be deleted. If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
                "operationId": "deleteTokenProcessor",
                "parameters": [
                    {
                        "description": "ID of the token processor instance to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Token processor deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Resource is in use and cannot be deleted.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete a token processor instance.",
                "tags": [
                    "/idp/tokenProcessors"
                ]
            },
            "get": {
                "description": "Get the configured token processor instance with the specified ID. A 404 status code is returned for nonexistent IDs.",
                "operationId": "getTokenProcessor",
                "parameters": [
                    {
                        "description": "ID of the token processor instance to fetch.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/TokenProcessor"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Find a token processor instance by ID.",
                "tags": [
                    "/idp/tokenProcessors"
                ]
            },
            "put": {
                "description": "Update a token processor instance. If the token processor is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
                "operationId": "updateTokenProcessor",
                "parameters": [
                    {
                        "description": "ID of token processor instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for updated token processor instance.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TokenProcessor"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Token Processor updated.",
                        "schema": {
                            "$ref": "#/definitions/TokenProcessor"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update a token processor instance.",
                "tags": [
                    "/idp/tokenProcessors"
                ]
            }
        },
        "/idpToSpAdapterMapping": {
            "get": {
                "description": "",
                "operationId": "getIdpToSpAdapterMappings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/IdpToSpAdapterMappings"
                        }
                    }
                },
                "summary": "Get list of IdP-to-SP Adapter Mappings.",
                "tags": [
                    "/idpToSpAdapterMapping"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "createIdpToSpAdapterMapping",
                "parameters": [
                    {
                        "description": "Configuration for new IdP-to-SP Adapter Mapping.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IdpToSpAdapterMapping"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "IdP-to-SP adapter mapping created.",
                        "schema": {
                            "$ref": "#/definitions/IdpToSpAdapterMapping"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a new IdP-to-SP Adapter mapping.",
                "tags": [
                    "/idpToSpAdapterMapping"
                ]
            }
        },
        "/idpToSpAdapterMapping/{id}": {
            "delete": {
                "description": "",
                "operationId": "deleteIdpToSpAdapterMappingsById",
                "parameters": [
                    {
                        "description": "ID of the IdP-to-SP Adapter Mapping to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "IdP-to-SP adapter mapping deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete an Adapter to Adapter Mapping.",
                "tags": [
                    "/idpToSpAdapterMapping"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getIdpToSpAdapterMappingsById",
                "parameters": [
                    {
                        "description": "ID of IdP-to-SP Adapter Mapping to fetch.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/IdpToSpAdapterMapping"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get an IdP-to-SP Adapter Mapping.",
                "tags": [
                    "/idpToSpAdapterMapping"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateIdpToSpAdapterMapping",
                "parameters": [
                    {
                        "description": "ID of source adapter in the IdP-to-SP Adapter Mapping to fetch.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for updated IdP-to-SP Adapter Mapping.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IdpToSpAdapterMapping"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "IdP-to-SP adapter mapping updated.",
                        "schema": {
                            "$ref": "#/definitions/IdpToSpAdapterMapping"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update the specified IdP-to-SP Adapter mapping.",
                "tags": [
                    "/idpToSpAdapterMapping"
                ]
            }
        },
        "/incomingProxySettings": {
            "get": {
                "description": "When PingFederate is deployed behind a proxy server or load balancer, use information in HTTP headers added by the proxy server to construct correct responses.",
                "operationId": "getIncomingProxySettings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/IncomingProxySettings"
                        }
                    }
                },
                "summary": "Get incoming proxy settings.",
                "tags": [
                    "/incomingProxySettings"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "When PingFederate is deployed behind a proxy server or load balancer, use information in HTTP headers added by the proxy server to construct correct responses.",
                "operationId": "updateIncomingProxySettings",
                "parameters": [
                    {
                        "description": "Incoming proxy settings.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IncomingProxySettings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Incoming proxy settings updated.",
                        "schema": {
                            "$ref": "#/definitions/IncomingProxySettings"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update incoming proxy settings.",
                "tags": [
                    "/incomingProxySettings"
                ]
            }
        },
        "/kerberos/realms": {
            "get": {
                "description": "",
                "operationId": "getKerberosRealms",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/KerberosRealms"
                        }
                    }
                },
                "summary": "Gets the Kerberos Realms.",
                "tags": [
                    "/kerberos/realms"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Create a new Kerberos Realm. If the Kerberos Realm is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
                "operationId": "createKerberosRealm",
                "parameters": [
                    {
                        "description": "Configuration for new policy.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/KerberosRealm"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Defaults to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Kerberos realm created.",
                        "schema": {
                            "$ref": "#/definitions/KerberosRealm"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a new Kerberos Realm.",
                "tags": [
                    "/kerberos/realms"
                ]
            }
        },
        "/kerberos/realms/settings": {
            "get": {
                "description": "",
                "operationId": "getKerberosRealmSettings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/KerberosRealmsSettings"
                        }
                    }
                },
                "summary": "Gets the Kerberos Realms Settings.",
                "tags": [
                    "/kerberos/realms"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateSettings",
                "parameters": [
                    {
                        "description": "Kerberos Realms Settings.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/KerberosRealmsSettings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Settings updated.",
                        "schema": {
                            "$ref": "#/definitions/KerberosRealmsSettings"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Set/Update the Kerberos Realms Settings.",
                "tags": [
                    "/kerberos/realms"
                ]
            }
        },
        "/kerberos/realms/{id}": {
            "delete": {
                "description": "Delete a Kerberos Realm with the specified ID. A 404 status code is returned for nonexistent IDs. Note: If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
                "operationId": "deleteKerberosRealm",
                "parameters": [
                    {
                        "description": "ID of Kerberos Realm to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Kerberos realm deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete a Kerberos Realm.",
                "tags": [
                    "/kerberos/realms"
                ]
            },
            "get": {
                "description": "Get a Kerberos Realm with the specified ID. A 404 status code is returned for nonexistent IDs.",
                "operationId": "getKerberosRealm",
                "parameters": [
                    {
                        "description": "ID of the Kerberos Realm to fetch.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/KerberosRealm"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Find a Kerberos Realm by ID.",
                "tags": [
                    "/kerberos/realms"
                ]
            },
            "put": {
                "description": "Update a Kerberos Realm with the specified ID. A 404 status code is returned for nonexistent IDs.",
                "operationId": "updateKerberosRealm",
                "parameters": [
                    {
                        "description": "ID of the Kerberos Realm to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for updated Domain/Realm.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/KerberosRealm"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Defaults to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Kerberos realm updated.",
                        "schema": {
                            "$ref": "#/definitions/KerberosRealm"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update a Kerberos Realm by ID.",
                "tags": [
                    "/kerberos/realms"
                ]
            }
        },
        "/keyPairs/keyAlgorithms": {
            "get": {
                "description": "",
                "operationId": "getKeyAlgorithms",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/KeyAlgorithms"
                        }
                    }
                },
                "summary": "Get list of the key algorithms supported for key pair generation.",
                "tags": [
                    "/keyPairs"
                ]
            }
        },
        "/keyPairs/oauthOpenIdConnect": {
            "get": {
                "description": "",
                "operationId": "getOauthOidcKeysSettings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/OAuthOidcKeysSettings"
                        }
                    }
                },
                "summary": "Retrieve OAuth/OpenID Connect key settings.",
                "tags": [
                    "/keyPairs/oauthOpenIdConnect"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateOAuthOidcKeysSettings",
                "parameters": [
                    {
                        "description": "OAuth and OpenID Connect static key settings",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OAuthOidcKeysSettings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OAuth/Open ID Connect key settings updated.",
                        "schema": {
                            "$ref": "#/definitions/OAuthOidcKeysSettings"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update OAuth/OpenID Connect key settings.",
                "tags": [
                    "/keyPairs/oauthOpenIdConnect"
                ]
            }
        },
        "/keyPairs/oauthOpenIdConnect/additionalKeySets": {
            "get": {
                "description": "",
                "operationId": "getKeySets",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/AdditionalKeySets"
                        }
                    }
                },
                "summary": "Retrieve OAuth/OpenID Connect additional signing key sets.",
                "tags": [
                    "/keyPairs/oauthOpenIdConnect"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Create a new OAuth/OpenID Connect additional signing key set.  If not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
                "operationId": "createKeySet",
                "parameters": [
                    {
                        "description": "Configuration for a new signing key set.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AdditionalKeySet"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "OAuth/OpenID Connect key set created.",
                        "schema": {
                            "$ref": "#/definitions/AdditionalKeySet"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a new OAuth/OpenID Connect additional signing key set.",
                "tags": [
                    "/keyPairs/oauthOpenIdConnect"
                ]
            }
        },
        "/keyPairs/oauthOpenIdConnect/additionalKeySets/{id}": {
            "delete": {
                "description": "",
                "operationId": "deleteKeySet",
                "parameters": [
                    {
                        "description": "ID of an additional key set to be deleted.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "OAuth/OpenID Connect key set deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete an existing OAuth/OpenID Connect additional signing key set.",
                "tags": [
                    "/keyPairs/oauthOpenIdConnect"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getKeySet",
                "parameters": [
                    {
                        "description": "ID of an OAuth/OpenID Connect additional signing key set to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/AdditionalKeySet"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Retrieve an OAuth/OpenID Connect additional signing key set.",
                "tags": [
                    "/keyPairs/oauthOpenIdConnect"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "Update an existing OAuth/OpenID Connect additional signing key set.  If not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
                "operationId": "updateKeySet",
                "parameters": [
                    {
                        "description": "ID of an OAuth/OpenID Connect additional signing key set to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for updated OAuth/OpenID Connect additional signing key set.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AdditionalKeySet"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OAuth/OpenID Connect key set updated.",
                        "schema": {
                            "$ref": "#/definitions/AdditionalKeySet"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update an existing OAuth/OpenID Connect additional signing key set.",
                "tags": [
                    "/keyPairs/oauthOpenIdConnect"
                ]
            }
        },
        "/keyPairs/signing": {
            "get": {
                "description": "",
                "operationId": "getKeyPairs",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/KeyPairViews"
                        }
                    }
                },
                "summary": "Get list of key pairs.",
                "tags": [
                    "/keyPairs/signing"
                ]
            }
        },
        "/keyPairs/signing/generate": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "createKeyPair",
                "parameters": [
                    {
                        "description": "Settings for the new key pair.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewKeyPairSettings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Key Pair created.",
                        "schema": {
                            "$ref": "#/definitions/KeyPairView"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Generate a new key pair.",
                "tags": [
                    "/keyPairs/signing"
                ]
            }
        },
        "/keyPairs/signing/import": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "importKeyPair",
                "parameters": [
                    {
                        "description": "File to import.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/KeyPairFile"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Key Pair imported.",
                        "schema": {
                            "$ref": "#/definitions/KeyPairView"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "403": {
                        "description": "The operation is not permitted, based on the current configuration of the server."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Import a new key pair.",
                "tags": [
                    "/keyPairs/signing"
                ]
            }
        },
        "/keyPairs/signing/{id}": {
            "delete": {
                "description": "If the request is successful, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
                "operationId": "deleteKeyPair",
                "parameters": [
                    {
                        "description": "ID of the key pair to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Key Pair deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Resource is in use and cannot be deleted."
                    }
                },
                "summary": "Delete a key pair.",
                "tags": [
                    "/keyPairs/signing"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getKeyPair",
                "parameters": [
                    {
                        "description": "ID of the key pair to retrieve.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/KeyPairView"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Retrieve details of a key pair.",
                "tags": [
                    "/keyPairs/signing"
                ]
            }
        },
        "/keyPairs/signing/{id}/certificate": {
            "get": {
                "description": "For a successful request, the PEM-encoded certificate file is directly returned as text and the response content type is application/x-x509-ca-cert. If an error occurs, an ApiResult is returned in JSON format and the content type is application/json.",
                "operationId": "exportCertificateFile",
                "parameters": [
                    {
                        "description": "ID of the key pair.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Download the certificate from a given key pair.",
                "tags": [
                    "/keyPairs/signing"
                ]
            }
        },
        "/keyPairs/signing/{id}/csr": {
            "get": {
                "description": "For a successful request, the PEM-encoded CSR file is directly returned as text and the response content type is application/pkcs10. If an error occurs, an ApiResult is returned in JSON format, and the content type is application/json.",
                "operationId": "exportCsr",
                "parameters": [
                    {
                        "description": "ID of the key pair.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Generate a new certificate signing request (CSR) for this key pair.",
                "tags": [
                    "/keyPairs/signing"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "importCsrResponse",
                "parameters": [
                    {
                        "description": "ID of the key pair.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CSR response.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CSRResponse"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "CSR Response imported.",
                        "schema": {
                            "$ref": "#/definitions/KeyPairView"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Import a CSR response for this key pair.",
                "tags": [
                    "/keyPairs/signing"
                ]
            }
        },
        "/keyPairs/signing/{id}/pem": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "For a successful request, the PEM file is directly returned in PEM format and the response content type is application/x-pem-file. In the exported PEM file, the private key is protected with PBES2 encryption and AES. If an error occurs, an ApiResult is returned in JSON format and the content type is application/json. Due to the sensitivity of the password parameter, the method for this operation is POST rather than GET.",
                "operationId": "exportPEMFile",
                "parameters": [
                    {
                        "description": "ID of the key pair.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Parameters for the export request",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/KeyPairExportSettings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Key Pair downloaded.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "403": {
                        "description": "The operation is not permitted, based on the current configuration of the server."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Download the key pair in PEM format.",
                "tags": [
                    "/keyPairs/signing"
                ]
            }
        },
        "/keyPairs/signing/{id}/pkcs12": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "For a successful request, the PKCS12 file is directly returned in binary format and the response content type is application/x-pkcs12. If an error occurs, an ApiResult is returned in JSON format and the content type is application/json. Due to the sensitivity of the password parameter, the method for this operation is POST rather than GET.",
                "operationId": "exportPKCS12File",
                "parameters": [
                    {
                        "description": "ID of the key pair.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Parameters for the export request",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/KeyPairExportSettings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Key Pair downloaded.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "403": {
                        "description": "The operation is not permitted, based on the current configuration of the server."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Download the key pair in PKCS12 format.",
                "tags": [
                    "/keyPairs/signing"
                ]
            }
        },
        "/keyPairs/signing/{id}/rotationSettings": {
            "delete": {
                "description": "If the request is successful, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
                "operationId": "deleteKeyPairRotationSettings",
                "parameters": [
                    {
                        "description": "ID of the key pair's rotation settings to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Rotation Settings deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete rotation settings for a signing key pair.",
                "tags": [
                    "/keyPairs/signing"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getRotationSettings",
                "parameters": [
                    {
                        "description": "ID of the key pair to retrieve its rotation settings.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/KeyPairRotationSettings"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Retrieve details of rotation settings for a key pair.",
                "tags": [
                    "/keyPairs/signing"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateRotationSettings",
                "parameters": [
                    {
                        "description": "ID of the key pair.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The key rotation settings.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/KeyPairRotationSettings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Key Pair updated.",
                        "schema": {
                            "$ref": "#/definitions/KeyPairRotationSettings"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Add rotation settings to a key pair",
                "tags": [
                    "/keyPairs/signing"
                ]
            }
        },
        "/keyPairs/sslClient": {
            "get": {
                "description": "",
                "operationId": "getKeyPairs",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/KeyPairViews"
                        }
                    }
                },
                "summary": "Get list of key pairs.",
                "tags": [
                    "/keyPairs/sslClient"
                ]
            }
        },
        "/keyPairs/sslClient/generate": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "createKeyPair",
                "parameters": [
                    {
                        "description": "Settings for the new key pair.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewKeyPairSettings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Key Pair created.",
                        "schema": {
                            "$ref": "#/definitions/KeyPairView"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Generate a new key pair.",
                "tags": [
                    "/keyPairs/sslClient"
                ]
            }
        },
        "/keyPairs/sslClient/import": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "importKeyPair",
                "parameters": [
                    {
                        "description": "File to import.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/KeyPairFile"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Key Pair imported.",
                        "schema": {
                            "$ref": "#/definitions/KeyPairView"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "403": {
                        "description": "The operation is not permitted, based on the current configuration of the server."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Import a new key pair.",
                "tags": [
                    "/keyPairs/sslClient"
                ]
            }
        },
        "/keyPairs/sslClient/{id}": {
            "delete": {
                "description": "If the request is successful, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
                "operationId": "deleteKeyPair",
                "parameters": [
                    {
                        "description": "ID of the key pair to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Key Pair deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Resource is in use and cannot be deleted."
                    }
                },
                "summary": "Delete a key pair.",
                "tags": [
                    "/keyPairs/sslClient"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getKeyPair",
                "parameters": [
                    {
                        "description": "ID of the key pair to retrieve.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/KeyPairView"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Retrieve details of a key pair.",
                "tags": [
                    "/keyPairs/sslClient"
                ]
            }
        },
        "/keyPairs/sslClient/{id}/certificate": {
            "get": {
                "description": "For a successful request, the PEM-encoded certificate file is directly returned as text and the response content type is application/x-x509-ca-cert. If an error occurs, an ApiResult is returned in JSON format and the content type is application/json.",
                "operationId": "exportCertificateFile",
                "parameters": [
                    {
                        "description": "ID of the key pair.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Download the certificate from a given key pair.",
                "tags": [
                    "/keyPairs/sslClient"
                ]
            }
        },
        "/keyPairs/sslClient/{id}/csr": {
            "get": {
                "description": "For a successful request, the PEM-encoded CSR file is directly returned as text and the response content type is application/pkcs10. If an error occurs, an ApiResult is returned in JSON format, and the content type is application/json.",
                "operationId": "exportCsr",
                "parameters": [
                    {
                        "description": "ID of the key pair.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Generate a new certificate signing request (CSR) for this key pair.",
                "tags": [
                    "/keyPairs/sslClient"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "importCsrResponse",
                "parameters": [
                    {
                        "description": "ID of the key pair.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CSR response.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CSRResponse"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "CSR Response imported.",
                        "schema": {
                            "$ref": "#/definitions/KeyPairView"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Import a CSR response for this key pair.",
                "tags": [
                    "/keyPairs/sslClient"
                ]
            }
        },
        "/keyPairs/sslClient/{id}/pem": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "For a successful request, the PEM file is directly returned in PEM format and the response content type is application/x-pem-file. In the exported PEM file, the private key is protected with PBES2 encryption and AES. If an error occurs, an ApiResult is returned in JSON format and the content type is application/json. Due to the sensitivity of the password parameter, the method for this operation is POST rather than GET.",
                "operationId": "exportPEMFile",
                "parameters": [
                    {
                        "description": "ID of the key pair.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Parameters for the export request",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/KeyPairExportSettings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Key Pair downloaded.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "403": {
                        "description": "The operation is not permitted, based on the current configuration of the server."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Download the key pair in PEM format.",
                "tags": [
                    "/keyPairs/sslClient"
                ]
            }
        },
        "/keyPairs/sslClient/{id}/pkcs12": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "For a successful request, the PKCS12 file is directly returned in binary format and the response content type is application/x-pkcs12. If an error occurs, an ApiResult is returned in JSON format and the content type is application/json. Due to the sensitivity of the password parameter, the method for this operation is POST rather than GET.",
                "operationId": "exportPKCS12File",
                "parameters": [
                    {
                        "description": "ID of the key pair.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Parameters for the export request",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/KeyPairExportSettings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Key Pair downloaded.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "403": {
                        "description": "The operation is not permitted, based on the current configuration of the server."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Download the key pair in PKCS12 format.",
                "tags": [
                    "/keyPairs/sslClient"
                ]
            }
        },
        "/keyPairs/sslServer": {
            "get": {
                "description": "",
                "operationId": "getKeyPairs",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/KeyPairViews"
                        }
                    }
                },
                "summary": "Get list of key pairs.",
                "tags": [
                    "/keyPairs/sslServer"
                ]
            }
        },
        "/keyPairs/sslServer/generate": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "createKeyPair",
                "parameters": [
                    {
                        "description": "Settings for the new key pair.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewKeyPairSettings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Key Pair created.",
                        "schema": {
                            "$ref": "#/definitions/KeyPairView"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Generate a new key pair.",
                "tags": [
                    "/keyPairs/sslServer"
                ]
            }
        },
        "/keyPairs/sslServer/import": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "importKeyPair",
                "parameters": [
                    {
                        "description": "File to import.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/KeyPairFile"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Key Pair imported.",
                        "schema": {
                            "$ref": "#/definitions/KeyPairView"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "403": {
                        "description": "The operation is not permitted, based on the current configuration of the server."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Import a new key pair.",
                "tags": [
                    "/keyPairs/sslServer"
                ]
            }
        },
        "/keyPairs/sslServer/settings": {
            "get": {
                "description": "",
                "operationId": "getSettings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/SslServerSettings"
                        }
                    }
                },
                "summary": "Get the SSL Server Certificate Settings.",
                "tags": [
                    "/keyPairs/sslServer"
                ]
            },
            "put": {
                "description": "",
                "operationId": "updateSettings",
                "parameters": [
                    {
                        "description": "Configuration for activation of SSL server certificates.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SslServerSettings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "SSL Certificate Settings updated.",
                        "schema": {
                            "$ref": "#/definitions/SslServerSettings"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update the SSL Server Certificate Settings.",
                "tags": [
                    "/keyPairs/sslServer"
                ]
            }
        },
        "/keyPairs/sslServer/{id}": {
            "delete": {
                "description": "If the request is successful, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
                "operationId": "deleteKeyPair",
                "parameters": [
                    {
                        "description": "ID of the key pair to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Key Pair deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Resource is in use and cannot be deleted."
                    }
                },
                "summary": "Delete a key pair.",
                "tags": [
                    "/keyPairs/sslServer"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getKeyPair",
                "parameters": [
                    {
                        "description": "ID of the key pair to retrieve.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/KeyPairView"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Retrieve details of a key pair.",
                "tags": [
                    "/keyPairs/sslServer"
                ]
            }
        },
        "/keyPairs/sslServer/{id}/certificate": {
            "get": {
                "description": "For a successful request, the PEM-encoded certificate file is directly returned as text and the response content type is application/x-x509-ca-cert. If an error occurs, an ApiResult is returned in JSON format and the content type is application/json.",
                "operationId": "exportCertificateFile",
                "parameters": [
                    {
                        "description": "ID of the key pair.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Download the certificate from a given key pair.",
                "tags": [
                    "/keyPairs/sslServer"
                ]
            }
        },
        "/keyPairs/sslServer/{id}/csr": {
            "get": {
                "description": "For a successful request, the PEM-encoded CSR file is directly returned as text and the response content type is application/pkcs10. If an error occurs, an ApiResult is returned in JSON format, and the content type is application/json.",
                "operationId": "exportCsr",
                "parameters": [
                    {
                        "description": "ID of the key pair.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "summary": "Generate a new certificate signing request (CSR) for this key pair.",
                "tags": [
                    "/keyPairs/sslServer"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "importCsrResponse",
                "parameters": [
                    {
                        "description": "ID of the key pair.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The CSR response.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CSRResponse"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "CSR Response imported.",
                        "schema": {
                            "$ref": "#/definitions/KeyPairView"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Import a CSR response for this key pair.",
                "tags": [
                    "/keyPairs/sslServer"
                ]
            }
        },
        "/keyPairs/sslServer/{id}/pem": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "For a successful request, the PEM file is directly returned in PEM format and the response content type is application/x-pem-file. In the exported PEM file, the private key is protected with PBES2 encryption and AES. If an error occurs, an ApiResult is returned in JSON format and the content type is application/json. Due to the sensitivity of the password parameter, the method for this operation is POST rather than GET.",
                "operationId": "exportPEMFile",
                "parameters": [
                    {
                        "description": "ID of the key pair.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Parameters for the export request",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/KeyPairExportSettings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Key Pair downloaded.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "403": {
                        "description": "The operation is not permitted, based on the current configuration of the server."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Download the key pair in PEM format.",
                "tags": [
                    "/keyPairs/sslServer"
                ]
            }
        },
        "/keyPairs/sslServer/{id}/pkcs12": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "For a successful request, the PKCS12 file is directly returned in binary format and the response content type is application/x-pkcs12. If an error occurs, an ApiResult is returned in JSON format and the content type is application/json. Due to the sensitivity of the password parameter, the method for this operation is POST rather than GET.",
                "operationId": "exportPKCS12File",
                "parameters": [
                    {
                        "description": "ID of the key pair.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Parameters for the export request",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/KeyPairExportSettings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Key Pair downloaded.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "403": {
                        "description": "The operation is not permitted, based on the current configuration of the server."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Download the key pair in PKCS12 format.",
                "tags": [
                    "/keyPairs/sslServer"
                ]
            }
        },
        "/license": {
            "get": {
                "description": "",
                "operationId": "getLicense",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/LicenseView"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get a license summary.",
                "tags": [
                    "/license"
                ]
            },
            "put": {
                "description": "",
                "operationId": "updateLicense",
                "parameters": [
                    {
                        "description": "Base64 encoded value of a license.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LicenseFile"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "License imported.",
                        "schema": {
                            "$ref": "#/definitions/LicenseView"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Import a license.",
                "tags": [
                    "/license"
                ]
            }
        },
        "/license/agreement": {
            "get": {
                "description": "The license agreement has to be accepted before performing any other API calls.",
                "operationId": "getLicenseAgreement",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/LicenseAgreementInfo"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get license agreement link.",
                "tags": [
                    "/license"
                ]
            },
            "put": {
                "description": "The license agreement has to be accepted before performing any other API calls.",
                "operationId": "updateLicenseAgreement",
                "parameters": [
                    {
                        "description": "License Agreement reference.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LicenseAgreementInfo"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "License agreement accepted.",
                        "schema": {
                            "$ref": "#/definitions/LicenseAgreementInfo"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Accept license agreement.",
                "tags": [
                    "/license"
                ]
            }
        },
        "/localIdentity/identityProfiles": {
            "get": {
                "description": "",
                "operationId": "getIdentityProfiles",
                "parameters": [
                    {
                        "description": "Page number to retrieve.",
                        "format": "int32",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of local identity profiles per page.",
                        "format": "int32",
                        "in": "query",
                        "name": "numberPerPage",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Filter criteria limits the local identity profiles that are returned to only those that match it. The filter criteria is compared to the local identity profile name and ID fields. The comparison is a case-insensitive partial match. No additional pattern based matching is supported.",
                        "in": "query",
                        "name": "filter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Filter the local identity profiles by matching policy contract ID.",
                        "in": "query",
                        "name": "apcId",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/LocalIdentityProfiles"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get the list of configured local identity profiles.",
                "tags": [
                    "/localIdentity/identityProfiles"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Create a new local identity profile. If the local identity profile is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
                "operationId": "createIdentityProfile",
                "parameters": [
                    {
                        "description": "Configuration for a new profile.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LocalIdentityProfile"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Local identity profile created.",
                        "schema": {
                            "$ref": "#/definitions/LocalIdentityProfile"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a new local identity profile.",
                "tags": [
                    "/localIdentity/identityProfiles"
                ]
            }
        },
        "/localIdentity/identityProfiles/{id}": {
            "delete": {
                "description": "Delete a local identity profile with the specified ID. A 404 status code is returned for nonexistent IDs. Note: If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
                "operationId": "deleteIdentityProfile",
                "parameters": [
                    {
                        "description": "ID of the profile to delete",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Local identity profile deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete the local identity profile by ID.",
                "tags": [
                    "/localIdentity/identityProfiles"
                ]
            },
            "get": {
                "description": "Get a local identity profile with the specified ID. A 404 status code is returned for nonexistent IDs.",
                "operationId": "getIdentityProfile",
                "parameters": [
                    {
                        "description": "ID of profile to fetch",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/LocalIdentityProfile"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get the local identity profile by ID.",
                "tags": [
                    "/localIdentity/identityProfiles"
                ]
            },
            "put": {
                "description": "Update a local identity profile with the specified ID. A 404 status code is returned for nonexistent IDs.",
                "operationId": "updateIdentityProfile",
                "parameters": [
                    {
                        "description": "ID of the profile to update",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for updated local identity profile.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LocalIdentityProfile"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Local identity profile updated.",
                        "schema": {
                            "$ref": "#/definitions/LocalIdentityProfile"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update the local identity profile by ID.",
                "tags": [
                    "/localIdentity/identityProfiles"
                ]
            }
        },
        "/metadataUrls": {
            "get": {
                "description": "",
                "operationId": "getMetadataUrls",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/MetadataUrls"
                        }
                    }
                },
                "summary": "Get a list of Metadata URLs",
                "tags": [
                    "/metadataUrls"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Add a new Metadata URL. If the Metadata URL is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
                "operationId": "addMetadataUrl",
                "parameters": [
                    {
                        "description": "Configuration for a new Metadata URL.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/MetadataUrl"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Metadata URL added.",
                        "schema": {
                            "$ref": "#/definitions/MetadataUrl"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Add a new Metadata URL.",
                "tags": [
                    "/metadataUrls"
                ]
            }
        },
        "/metadataUrls/{id}": {
            "delete": {
                "description": "Delete Metadata URL with the specified ID. A 404 status code is returned for nonexistent IDs. Note: If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
                "operationId": "deleteMetadataUrl",
                "parameters": [
                    {
                        "description": "ID of Metadata URL to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Metadata URL deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Resource is in use and cannot be deleted.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete a Metadata URL by ID.",
                "tags": [
                    "/metadataUrls"
                ]
            },
            "get": {
                "description": "Get a Metadata URL with the specified ID. A 404 status code is returned for nonexistent IDs",
                "operationId": "getMetadataUrl",
                "parameters": [
                    {
                        "description": "ID of Metadata URL to fetch",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/MetadataUrl"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get a Metadata URL by ID.",
                "tags": [
                    "/metadataUrls"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "Update a Metadata URL by ID. If the Metadata URL is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
                "operationId": "updateMetadataUrl",
                "parameters": [
                    {
                        "description": "ID of the Metadata URL to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for the Metadata URL.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/MetadataUrl"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Metadata URL updated.",
                        "schema": {
                            "$ref": "#/definitions/MetadataUrl"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update a Metadata URL by ID.",
                "tags": [
                    "/metadataUrls"
                ]
            }
        },
        "/notificationPublishers": {
            "get": {
                "description": "",
                "operationId": "getNotificationPublishers",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/NotificationPublishers"
                        }
                    }
                },
                "summary": "Get a list of notification publisher plugin instances.",
                "tags": [
                    "/notificationPublishers"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "createNotificationPublisher",
                "parameters": [
                    {
                        "description": "Configuration for a notification publisher plugin instance.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NotificationPublisher"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Notification Publisher plugin created.",
                        "schema": {
                            "$ref": "#/definitions/NotificationPublisher"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a notification publisher plugin instance.",
                "tags": [
                    "/notificationPublishers"
                ]
            }
        },
        "/notificationPublishers/descriptors": {
            "get": {
                "description": "",
                "operationId": "getNotificationPublisherPluginDescriptors",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/NotificationPublisherDescriptors"
                        }
                    }
                },
                "summary": "Get the list of available Notification Publisher Plugin descriptors.",
                "tags": [
                    "/notificationPublishers"
                ]
            }
        },
        "/notificationPublishers/descriptors/{id}": {
            "get": {
                "description": "",
                "operationId": "getNotificationPublisherPluginDescriptor",
                "parameters": [
                    {
                        "description": "ID of notification publisher plugin descriptor.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/NotificationPublisherDescriptor"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get the description of a notification publisher plugin descriptor.",
                "tags": [
                    "/notificationPublishers"
                ]
            }
        },
        "/notificationPublishers/settings": {
            "get": {
                "description": "",
                "operationId": "getSettings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/NotificationPublishersSettings"
                        }
                    }
                },
                "summary": "Get general notification publisher settings.",
                "tags": [
                    "/notificationPublishers"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateSettings",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NotificationPublishersSettings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Notification publisher settings updated.",
                        "schema": {
                            "$ref": "#/definitions/NotificationPublishersSettings"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update general notification publisher settings.",
                "tags": [
                    "/notificationPublishers"
                ]
            }
        },
        "/notificationPublishers/{id}": {
            "delete": {
                "description": "",
                "operationId": "deleteNotificationPublisher",
                "parameters": [
                    {
                        "description": "ID of a notification publisher plugin instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Notification Publisher plugin deleted."
                    },
                    "403": {
                        "description": "The operation is not permitted, based on the current configuration of the server."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete a notification publisher plugin instance.",
                "tags": [
                    "/notificationPublishers"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getNotificationPublisher",
                "parameters": [
                    {
                        "description": "ID of a notification publisher plugin instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/NotificationPublisher"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get a specific notification publisher plugin instance.",
                "tags": [
                    "/notificationPublishers"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateNotificationPublisher",
                "parameters": [
                    {
                        "description": "ID of a notification publisher plugin instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for a notification publisher plugin instance.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NotificationPublisher"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Notification Publisher plugin updated.",
                        "schema": {
                            "$ref": "#/definitions/NotificationPublisher"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update a notification publisher plugin instance.",
                "tags": [
                    "/notificationPublishers"
                ]
            }
        },
        "/notificationPublishers/{id}/actions": {
            "get": {
                "description": "",
                "operationId": "getActions",
                "parameters": [
                    {
                        "description": "ID of the notification publisher plugin instance to which these actions belongs to.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/Actions"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "List the actions for a notification publisher plugin instance.",
                "tags": [
                    "/notificationPublishers"
                ]
            }
        },
        "/notificationPublishers/{id}/actions/{actionId}": {
            "get": {
                "description": "",
                "operationId": "getAction",
                "parameters": [
                    {
                        "description": "ID of the notification publisher plugin instance to which these actions belongs to.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "ID of the action to get.",
                        "in": "path",
                        "name": "actionId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/Action"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Find an notification publisher plugin instance's action by ID.",
                "tags": [
                    "/notificationPublishers"
                ]
            }
        },
        "/notificationPublishers/{id}/actions/{actionId}/invokeAction": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "invokeActionWithOptions",
                "parameters": [
                    {
                        "description": "ID of the notification publisher plugin instance to which these actions belongs to.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "ID of the action to get.",
                        "in": "path",
                        "name": "actionId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Action options for action invoked.",
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ActionOptions"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Notification Publisher plugin action invoked.",
                        "schema": {
                            "$ref": "#/definitions/ActionResult"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Invokes an action for notification publisher plugin instance.",
                "tags": [
                    "/notificationPublishers"
                ]
            }
        },
        "/oauth/accessTokenManagers": {
            "get": {
                "description": "",
                "operationId": "getTokenManagers",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/AccessTokenManagers"
                        }
                    }
                },
                "summary": "Get a list of all token management plugin instances.",
                "tags": [
                    "/oauth/accessTokenManagers"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "createTokenManager",
                "parameters": [
                    {
                        "description": "Configuration for plugin instance.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AccessTokenManager"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Access Token Management instance created.",
                        "schema": {
                            "$ref": "#/definitions/AccessTokenManager"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a token management plugin instance.",
                "tags": [
                    "/oauth/accessTokenManagers"
                ]
            }
        },
        "/oauth/accessTokenManagers/descriptors": {
            "get": {
                "description": "",
                "operationId": "getTokenManagerDescriptors",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/AccessTokenManagerDescriptors"
                        }
                    }
                },
                "summary": "Get the list of available token management plugin descriptors.",
                "tags": [
                    "/oauth/accessTokenManagers"
                ]
            }
        },
        "/oauth/accessTokenManagers/descriptors/{id}": {
            "get": {
                "description": "",
                "operationId": "getTokenManagerDescriptor",
                "parameters": [
                    {
                        "description": "ID of token management plugin descriptor.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/AccessTokenManagerDescriptor"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get the description of a token management plugin descriptor.",
                "tags": [
                    "/oauth/accessTokenManagers"
                ]
            }
        },
        "/oauth/accessTokenManagers/settings": {
            "get": {
                "description": "",
                "operationId": "getSettings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/AccessTokenManagementSettings"
                        }
                    }
                },
                "summary": "Get general access token management settings.",
                "tags": [
                    "/oauth/accessTokenManagers"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateSettings",
                "parameters": [
                    {
                        "description": "Access token management settings.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AccessTokenManagementSettings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Settings updated.",
                        "schema": {
                            "$ref": "#/definitions/AccessTokenManagementSettings"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update general access token management settings.",
                "tags": [
                    "/oauth/accessTokenManagers"
                ]
            }
        },
        "/oauth/accessTokenManagers/{id}": {
            "delete": {
                "description": "",
                "operationId": "deleteTokenManager",
                "parameters": [
                    {
                        "description": "ID of token management plugin instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Access token management instance deleted."
                    },
                    "403": {
                        "description": "The operation is not permitted, based on the current configuration of the server."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete a token management plugin instance.",
                "tags": [
                    "/oauth/accessTokenManagers"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getTokenManager",
                "parameters": [
                    {
                        "description": "ID of token management plugin instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/AccessTokenManager"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get a specific token management plugin instance.",
                "tags": [
                    "/oauth/accessTokenManagers"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateTokenManager",
                "parameters": [
                    {
                        "description": "ID of token management plugin instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for token management plugin instance.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AccessTokenManager"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Access Token Management instance updated.",
                        "schema": {
                            "$ref": "#/definitions/AccessTokenManager"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update a token management plugin instance.",
                "tags": [
                    "/oauth/accessTokenManagers"
                ]
            }
        },
        "/oauth/accessTokenMappings": {
            "get": {
                "description": "",
                "operationId": "getMappings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/AccessTokenMappings"
                        }
                    }
                },
                "summary": "Get the list of Access Token Mappings.",
                "tags": [
                    "/oauth/accessTokenMappings"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Create a new Access Token Mapping. If the mapping is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
                "operationId": "createMapping",
                "parameters": [
                    {
                        "description": "Configuration for the new Access Token Mapping.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AccessTokenMapping"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Access token attribute mapping created.",
                        "schema": {
                            "$ref": "#/definitions/AccessTokenMapping"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a new Access Token Mapping.",
                "tags": [
                    "/oauth/accessTokenMappings"
                ]
            }
        },
        "/oauth/accessTokenMappings/{id}": {
            "delete": {
                "description": "",
                "operationId": "deleteMapping",
                "parameters": [
                    {
                        "description": "ID of the Access Token Mapping.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Access token attribute mapping deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete an Access Token Mapping.",
                "tags": [
                    "/oauth/accessTokenMappings"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getMapping",
                "parameters": [
                    {
                        "description": "ID of the Access Token Mapping.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/AccessTokenMapping"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Find the Access Token Mapping by its ID.",
                "tags": [
                    "/oauth/accessTokenMappings"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "Update an Access Token Mapping with the matching ID. If the mapping is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected. Note: A 404 status code is returned for nonexistent mapping ID.",
                "operationId": "updateMapping",
                "parameters": [
                    {
                        "description": "ID of the Access Token Mapping to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for updated mapping.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AccessTokenMapping"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Access token attribute mapping updated.",
                        "schema": {
                            "$ref": "#/definitions/AccessTokenMapping"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update an Access Token Mapping.",
                "tags": [
                    "/oauth/accessTokenMappings"
                ]
            }
        },
        "/oauth/authServerSettings": {
            "get": {
                "description": "",
                "operationId": "getAuthorizationServerSettings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/AuthorizationServerSettings"
                        }
                    }
                },
                "summary": "Get the Authorization Server Settings.",
                "tags": [
                    "/oauth/authServerSettings"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateAuthorizationServerSettings",
                "parameters": [
                    {
                        "description": "Configuration for updated server settings.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuthorizationServerSettings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Authorization Server Settings updated.",
                        "schema": {
                            "$ref": "#/definitions/AuthorizationServerSettings"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update the Authorization Server Settings.",
                "tags": [
                    "/oauth/authServerSettings"
                ]
            }
        },
        "/oauth/authServerSettings/scopes/commonScopeGroups": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "addCommonScopeGroup",
                "parameters": [
                    {
                        "description": "The scope group definition",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ScopeGroupEntry"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Common Scope Group created.",
                        "schema": {
                            "$ref": "#/definitions/ScopeGroupEntry"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a new common scope group.",
                "tags": [
                    "/oauth/authServerSettings"
                ]
            }
        },
        "/oauth/authServerSettings/scopes/commonScopeGroups/{name}": {
            "delete": {
                "description": "",
                "operationId": "removeCommonScopeGroup",
                "parameters": [
                    {
                        "description": "Name of the common scope group.",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Common Scope Group deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Remove an existing common scope group.",
                "tags": [
                    "/oauth/authServerSettings"
                ]
            },
            "get": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "getCommonScopeGroup",
                "parameters": [
                    {
                        "description": "Name of the common scope group.",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/ScopeGroupEntry"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get an existing common scope group.",
                "tags": [
                    "/oauth/authServerSettings"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateCommonScopeGroup",
                "parameters": [
                    {
                        "description": "Name of the common scope group.",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The scope group definition.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ScopeGroupEntry"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Common Scope Group updated.",
                        "schema": {
                            "$ref": "#/definitions/ScopeGroupEntry"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update an existing common scope group.",
                "tags": [
                    "/oauth/authServerSettings"
                ]
            }
        },
        "/oauth/authServerSettings/scopes/commonScopes": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "addCommonScope",
                "parameters": [
                    {
                        "description": "The scope definition.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ScopeEntry"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Common Scope added.",
                        "schema": {
                            "$ref": "#/definitions/ScopeEntry"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Add a new common scope.",
                "tags": [
                    "/oauth/authServerSettings"
                ]
            }
        },
        "/oauth/authServerSettings/scopes/commonScopes/{name}": {
            "delete": {
                "description": "",
                "operationId": "removeCommonScope",
                "parameters": [
                    {
                        "description": "Name of the common scope.",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Common Scope deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Remove an existing common scope.",
                "tags": [
                    "/oauth/authServerSettings"
                ]
            },
            "get": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "getCommonScope",
                "parameters": [
                    {
                        "description": "Name of the common scope.",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/ScopeEntry"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get an existing common scope.",
                "tags": [
                    "/oauth/authServerSettings"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateCommonScope",
                "parameters": [
                    {
                        "description": "Name of the common scope.",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The scope definition",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ScopeEntry"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Common Scope updated.",
                        "schema": {
                            "$ref": "#/definitions/ScopeEntry"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update an existing common scope.",
                "tags": [
                    "/oauth/authServerSettings"
                ]
            }
        },
        "/oauth/authServerSettings/scopes/exclusiveScopeGroups": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "addExclusiveScopeGroup",
                "parameters": [
                    {
                        "description": "The scope group definition",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ScopeGroupEntry"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Exclusive Scope Group created.",
                        "schema": {
                            "$ref": "#/definitions/ScopeGroupEntry"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a new exclusive scope group.",
                "tags": [
                    "/oauth/authServerSettings"
                ]
            }
        },
        "/oauth/authServerSettings/scopes/exclusiveScopeGroups/{name}": {
            "delete": {
                "description": "",
                "operationId": "removeExclusiveScopeGroup",
                "parameters": [
                    {
                        "description": "Name of the exclusive scope group.",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Exclusive Scope Group deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Remove an existing exclusive scope group.",
                "tags": [
                    "/oauth/authServerSettings"
                ]
            },
            "get": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "getExclusiveScopeGroup",
                "parameters": [
                    {
                        "description": "Name of the exclusive scope group.",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/ScopeGroupEntry"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get an existing exclusive scope group.",
                "tags": [
                    "/oauth/authServerSettings"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateExclusiveScopeGroups",
                "parameters": [
                    {
                        "description": "Name of the exclusive scope group.",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The scope group definition",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ScopeGroupEntry"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Exclusive Scope Group updated.",
                        "schema": {
                            "$ref": "#/definitions/ScopeGroupEntry"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update an existing exclusive scope group.",
                "tags": [
                    "/oauth/authServerSettings"
                ]
            }
        },
        "/oauth/authServerSettings/scopes/exclusiveScopes": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "addExclusiveScope",
                "parameters": [
                    {
                        "description": "A new exclusive scope",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ScopeEntry"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Exclusive Scope added.",
                        "schema": {
                            "$ref": "#/definitions/ScopeEntry"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Add a new exclusive scope.",
                "tags": [
                    "/oauth/authServerSettings"
                ]
            }
        },
        "/oauth/authServerSettings/scopes/exclusiveScopes/{name}": {
            "delete": {
                "description": "",
                "operationId": "removeExclusiveScope",
                "parameters": [
                    {
                        "description": "Name of the exclusive scope.",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Exclusive Scope deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Remove an existing exclusive scope.",
                "tags": [
                    "/oauth/authServerSettings"
                ]
            },
            "get": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "getExclusiveScope",
                "parameters": [
                    {
                        "description": "Name of the exclusive scope.",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/ScopeEntry"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get an existing exclusive scope.",
                "tags": [
                    "/oauth/authServerSettings"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateExclusiveScope",
                "parameters": [
                    {
                        "description": "Name of the exclusive scope.",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The scope definition.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ScopeEntry"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Exclusive Scope updated.",
                        "schema": {
                            "$ref": "#/definitions/ScopeEntry"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update an existing exclusive scope.",
                "tags": [
                    "/oauth/authServerSettings"
                ]
            }
        },
        "/oauth/authenticationPolicyContractMappings": {
            "get": {
                "description": "",
                "operationId": "getApcMappings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/ApcToPersistentGrantMappings"
                        }
                    }
                },
                "summary": "Get the list of authentication policy contract to persistent grant mappings.",
                "tags": [
                    "/oauth/authenticationPolicyContractMappings"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Create a new authentication policy contract to persistent grant mapping. If a mapping can't be created, a 422 status code is returned along with a list of validation errors that must be corrected.",
                "operationId": "createApcMapping",
                "parameters": [
                    {
                        "description": "Configuration for an authentication policy contract to persistent grant mapping.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ApcToPersistentGrantMapping"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Authentication policy contract to persistent grant mapping created.",
                        "schema": {
                            "$ref": "#/definitions/ApcToPersistentGrantMapping"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a new authentication policy contract to persistent grant mapping.",
                "tags": [
                    "/oauth/authenticationPolicyContractMappings"
                ]
            }
        },
        "/oauth/authenticationPolicyContractMappings/{id}": {
            "delete": {
                "description": "",
                "operationId": "deleteApcMapping",
                "parameters": [
                    {
                        "description": "ID of the authentication policy contract to persistent grant mapping.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Authentication policy contract to persistent grant mapping deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete an authentication policy contract to persistent grant mapping.",
                "tags": [
                    "/oauth/authenticationPolicyContractMappings"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getApcMapping",
                "parameters": [
                    {
                        "description": "ID of the authentication policy contract to persistent grant mapping.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/ApcToPersistentGrantMapping"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Find the authentication policy contract to persistent grant mapping by ID.",
                "tags": [
                    "/oauth/authenticationPolicyContractMappings"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateApcMapping",
                "parameters": [
                    {
                        "description": "ID of the authentication policy contract to persistent grant mapping to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for an authentication policy contract to persistent grant mapping.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ApcToPersistentGrantMapping"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Authentication policy contract to persistent grant mapping updated.",
                        "schema": {
                            "$ref": "#/definitions/ApcToPersistentGrantMapping"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update an authentication policy contract to persistent grant mapping.",
                "tags": [
                    "/oauth/authenticationPolicyContractMappings"
                ]
            }
        },
        "/oauth/cibaServerPolicy/requestPolicies": {
            "get": {
                "description": "",
                "operationId": "getPolicies",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/RequestPolicies"
                        }
                    }
                },
                "summary": "Get list of request policies.",
                "tags": [
                    "/oauth/cibaServerPolicy"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Create a new request policy. If the request policy is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
                "operationId": "createPolicy",
                "parameters": [
                    {
                        "description": "Configuration for new policy.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RequestPolicy"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Request Handling Policy created.",
                        "schema": {
                            "$ref": "#/definitions/RequestPolicy"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a new request policy.",
                "tags": [
                    "/oauth/cibaServerPolicy"
                ]
            }
        },
        "/oauth/cibaServerPolicy/requestPolicies/{id}": {
            "delete": {
                "description": "Delete a request policy with the specified ID. A 404 status code is returned for nonexistent IDs. Note: If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
                "operationId": "deletePolicy",
                "parameters": [
                    {
                        "description": "ID of request policy to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Request Handling Policy deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete a request policy.",
                "tags": [
                    "/oauth/cibaServerPolicy"
                ]
            },
            "get": {
                "description": "Get a request policy with the specified ID. A 404 status code is returned for nonexistent IDs.",
                "operationId": "getPolicy",
                "parameters": [
                    {
                        "description": "ID of the request policy to fetch.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/RequestPolicy"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Find request policy by ID.",
                "tags": [
                    "/oauth/cibaServerPolicy"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "Update a request policy with the matching ID. If the policy is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected. Note: A 404 status code is returned for nonexistent IDs.",
                "operationId": "updatePolicy",
                "parameters": [
                    {
                        "description": "ID of the request policy to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for updated policy.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RequestPolicy"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Request Handling Policy updated.",
                        "schema": {
                            "$ref": "#/definitions/RequestPolicy"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update a request policy.",
                "tags": [
                    "/oauth/cibaServerPolicy"
                ]
            }
        },
        "/oauth/cibaServerPolicy/settings": {
            "get": {
                "description": "",
                "operationId": "getSettings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/CibaServerPolicySettings"
                        }
                    }
                },
                "summary": "Get general ciba server request policy settings.",
                "tags": [
                    "/oauth/cibaServerPolicy"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateSettings",
                "parameters": [
                    {
                        "description": "Ciba server request policy settings.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CibaServerPolicySettings"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Settings updated.",
                        "schema": {
                            "$ref": "#/definitions/CibaServerPolicySettings"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update general ciba server request policy settings.",
                "tags": [
                    "/oauth/cibaServerPolicy"
                ]
            }
        },
        "/oauth/clientRegistrationPolicies": {
            "get": {
                "description": "",
                "operationId": "getDynamicClientRegistrationPolicies",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/ClientRegistrationPolicies"
                        }
                    }
                },
                "summary": "Get a list of client registration policy plugin instances.",
                "tags": [
                    "/oauth/clientRegistrationPolicies"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "createDynamicClientRegistrationPolicy",
                "parameters": [
                    {
                        "description": "Configuration for a client registration policy plugin instance.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ClientRegistrationPolicy"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Client Registration Policy plugin created.",
                        "schema": {
                            "$ref": "#/definitions/ClientRegistrationPolicy"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a client registration policy plugin instance.",
                "tags": [
                    "/oauth/clientRegistrationPolicies"
                ]
            }
        },
        "/oauth/clientRegistrationPolicies/descriptors": {
            "get": {
                "description": "",
                "operationId": "getDynamicClientRegistrationDescriptors",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/ClientRegistrationPolicyDescriptors"
                        }
                    }
                },
                "summary": "Get the list of available client registration policy plugin descriptors.",
                "tags": [
                    "/oauth/clientRegistrationPolicies"
                ]
            }
        },
        "/oauth/clientRegistrationPolicies/descriptors/{id}": {
            "get": {
                "description": "",
                "operationId": "getDynamicClientRegistrationDescriptor",
                "parameters": [
                    {
                        "description": "ID of client registration policy plugin descriptor.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/ClientRegistrationPolicyDescriptor"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get the description of a client registration policy plugin descriptor.",
                "tags": [
                    "/oauth/clientRegistrationPolicies"
                ]
            }
        },
        "/oauth/clientRegistrationPolicies/{id}": {
            "delete": {
                "description": "",
                "operationId": "deleteDynamicClientRegistrationPolicy",
                "parameters": [
                    {
                        "description": "ID of a client registration policy plugin instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Client Registration Policy plugin deleted."
                    },
                    "403": {
                        "description": "The operation is not permitted, based on the current configuration of the server."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete a client registration policy plugin instance.",
                "tags": [
                    "/oauth/clientRegistrationPolicies"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getDynamicClientRegistrationPolicy",
                "parameters": [
                    {
                        "description": "ID of client registration policy plugin instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/ClientRegistrationPolicy"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get a specific client registration policy plugin instance.",
                "tags": [
                    "/oauth/clientRegistrationPolicies"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateDynamicClientRegistrationPolicy",
                "parameters": [
                    {
                        "description": "ID of a client registration policy plugin instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for a client registration policy plugin instance.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ClientRegistrationPolicy"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Client Registration Policy plugin updated.",
                        "schema": {
                            "$ref": "#/definitions/ClientRegistrationPolicy"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update a client registration policy plugin instance.",
                "tags": [
                    "/oauth/clientRegistrationPolicies"
                ]
            }
        },
        "/oauth/clientSettings": {
            "get": {
                "description": "",
                "operationId": "getClientSettings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/ClientSettings"
                        }
                    }
                },
                "summary": "Configure the client settings.",
                "tags": [
                    "/oauth/clientSettings"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateClientSettings",
                "parameters": [
                    {
                        "description": "Configuration for client settings.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ClientSettings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Client Settings updated.",
                        "schema": {
                            "$ref": "#/definitions/ClientSettings"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update the client settings.",
                "tags": [
                    "/oauth/clientSettings"
                ]
            }
        },
        "/oauth/clients": {
            "get": {
                "description": "",
                "operationId": "getClients",
                "parameters": [
                    {
                        "description": "Page number to retrieve.",
                        "format": "int32",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of OAuth clients per page. (uncapped if unspecified)",
                        "format": "int32",
                        "in": "query",
                        "name": "numberPerPage",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Filter criteria limits the OAuth clients that are returned to only those that match it. The filter criteria is compared to the OAuth client name and ID fields. The comparison is a case-insensitive partial match. No additional pattern based matching is supported.",
                        "in": "query",
                        "name": "filter",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/Clients"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get the list of OAuth clients.",
                "tags": [
                    "/oauth/clients"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Create a new OAuth client. If an OAuth client can't be created, a 422 status code is returned along with a list of validation errors that must be corrected.",
                "operationId": "createClient",
                "parameters": [
                    {
                        "description": "Configuration for new client.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Client"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Client created.",
                        "schema": {
                            "$ref": "#/definitions/Client"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a new OAuth client.",
                "tags": [
                    "/oauth/clients"
                ]
            }
        },
        "/oauth/clients/{id}": {
            "delete": {
                "description": "",
                "operationId": "deleteClient",
                "parameters": [
                    {
                        "description": "ID of the client.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Client deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Resource is in use and cannot be deleted.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete an OAuth client.",
                "tags": [
                    "/oauth/clients"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getClient",
                "parameters": [
                    {
                        "description": "ID of the client.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/Client"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Find the OAuth client by ID.",
                "tags": [
                    "/oauth/clients"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateClient",
                "parameters": [
                    {
                        "description": "ID of the client to be updated.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for the client.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Client"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Client updated.",
                        "schema": {
                            "$ref": "#/definitions/Client"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Updates the OAuth client.",
                "tags": [
                    "/oauth/clients"
                ]
            }
        },
        "/oauth/clients/{id}/clientAuth/clientSecret": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "getClientSecret",
                "parameters": [
                    {
                        "description": "ID of the client.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/ClientSecret"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get the client secret of an existing OAuth client.",
                "tags": [
                    "/oauth/clients"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateClientSecret",
                "parameters": [
                    {
                        "description": "ID of the client to be updated.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Client Secret.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ClientSecret"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Client updated.",
                        "schema": {
                            "$ref": "#/definitions/ClientSecret"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update the client secret of an existing OAuth client.",
                "tags": [
                    "/oauth/clients"
                ]
            }
        },
        "/oauth/idpAdapterMappings": {
            "get": {
                "description": "",
                "operationId": "getIdpAdapterMappings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/IdpAdapterMappings"
                        }
                    }
                },
                "summary": "Get the list of IdP adapter mappings.",
                "tags": [
                    "/oauth/idpAdapterMappings"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Create a new IdP adapter mapping. If an IdP adapter mapping can't be created, a 422 status code is returned along with a list of validation errors that must be corrected.",
                "operationId": "createIdpAdapterMapping",
                "parameters": [
                    {
                        "description": "Configuration for IdP adapter mapping.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IdpAdapterMapping"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "IdP adapter mapping created.",
                        "schema": {
                            "$ref": "#/definitions/IdpAdapterMapping"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a new IdP adapter mapping.",
                "tags": [
                    "/oauth/idpAdapterMappings"
                ]
            }
        },
        "/oauth/idpAdapterMappings/{id}": {
            "delete": {
                "description": "",
                "operationId": "deleteIdpAdapterMapping",
                "parameters": [
                    {
                        "description": "ID of the IdP adapter mapping.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "IdP adapter mapping deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete an IdP adapter mapping.",
                "tags": [
                    "/oauth/idpAdapterMappings"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getIdpAdapterMapping",
                "parameters": [
                    {
                        "description": "ID of the adapter mapping.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/IdpAdapterMapping"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Find the IdP adapter mapping by the ID.",
                "tags": [
                    "/oauth/idpAdapterMappings"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateIdpAdapterMapping",
                "parameters": [
                    {
                        "description": "ID of the IdP adapter mapping to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for IdP adapter mapping.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IdpAdapterMapping"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "IdP adapter mapping updated.",
                        "schema": {
                            "$ref": "#/definitions/IdpAdapterMapping"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update an IdP adapter mapping.",
                "tags": [
                    "/oauth/idpAdapterMappings"
                ]
            }
        },
        "/oauth/issuers": {
            "get": {
                "description": "",
                "operationId": "getIssuers",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/Issuers"
                        }
                    }
                },
                "summary": "Get the list of virtual issuers.",
                "tags": [
                    "/oauth/issuers"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Create a new virtual issuer. If the virtual issuer is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
                "operationId": "addIssuer",
                "parameters": [
                    {
                        "description": "Configuration for new virtual issuer.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Issuer"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Issuer created.",
                        "schema": {
                            "$ref": "#/definitions/Issuer"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a new virtual issuer.",
                "tags": [
                    "/oauth/issuers"
                ]
            }
        },
        "/oauth/issuers/{id}": {
            "delete": {
                "description": "Delete a virtual issuer with the specified ID. A 404 status code is returned for nonexistent IDs. Note: If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
                "operationId": "deleteIssuer",
                "parameters": [
                    {
                        "description": "ID of the virtual issuer to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Issuer deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete a virtual issuer.",
                "tags": [
                    "/oauth/issuers"
                ]
            },
            "get": {
                "description": "Get a virtual issuer with the specified ID. A 404 status code is returned for nonexistent IDs.",
                "operationId": "getIssuerById",
                "parameters": [
                    {
                        "description": "ID of the virtual issuer to fetch.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/Issuer"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Find a virtual issuer by ID.",
                "tags": [
                    "/oauth/issuers"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "Update a virtual issuer with the matching ID. If the policy is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected. Note: A 404 status code is returned for nonexistent IDs.",
                "operationId": "updateIssuer",
                "parameters": [
                    {
                        "description": "ID of the virtual issuer to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for updated virtual issuer.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Issuer"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Issuer updated.",
                        "schema": {
                            "$ref": "#/definitions/Issuer"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update a virtual issuer.",
                "tags": [
                    "/oauth/issuers"
                ]
            }
        },
        "/oauth/openIdConnect/policies": {
            "get": {
                "description": "",
                "operationId": "getPolicies",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/OpenIdConnectPolicies"
                        }
                    }
                },
                "summary": "Get list of OpenID Connect Policies.",
                "tags": [
                    "/oauth/openIdConnect"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Create a new OpenID Connect Policy. If the OpenID Connect policy is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
                "operationId": "createPolicy",
                "parameters": [
                    {
                        "description": "Configuration for new policy.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OpenIdConnectPolicy"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Policy created.",
                        "schema": {
                            "$ref": "#/definitions/OpenIdConnectPolicy"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a new OpenID Connect Policy.",
                "tags": [
                    "/oauth/openIdConnect"
                ]
            }
        },
        "/oauth/openIdConnect/policies/{id}": {
            "delete": {
                "description": "Delete an OpenID Connect Policy with the specified ID. A 404 status code is returned for nonexistent IDs. Note: If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
                "operationId": "deletePolicy",
                "parameters": [
                    {
                        "description": "ID of OpenID Connect Policy to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Policy deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete an OpenID Connect Policy.",
                "tags": [
                    "/oauth/openIdConnect"
                ]
            },
            "get": {
                "description": "Get an OpenID Connect Policy with the specified ID. A 404 status code is returned for nonexistent IDs.",
                "operationId": "getPolicy",
                "parameters": [
                    {
                        "description": "ID of the OpenID Connect Policy to fetch.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/OpenIdConnectPolicy"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Find OpenID Connect Policy by ID.",
                "tags": [
                    "/oauth/openIdConnect"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "Update an OpenID Connect Policy with the matching ID. If the policy is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected. Note: A 404 status code is returned for nonexistent IDs.",
                "operationId": "updatePolicy",
                "parameters": [
                    {
                        "description": "ID of the OpenID Connect Policy to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for updated policy.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OpenIdConnectPolicy"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Policy updated.",
                        "schema": {
                            "$ref": "#/definitions/OpenIdConnectPolicy"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update an OpenID Connect Policy.",
                "tags": [
                    "/oauth/openIdConnect"
                ]
            }
        },
        "/oauth/openIdConnect/settings": {
            "get": {
                "description": "",
                "operationId": "getSettings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/OpenIdConnectSettings"
                        }
                    }
                },
                "summary": "Get the OpenID Connect Settings.",
                "tags": [
                    "/oauth/openIdConnect"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateSettings",
                "parameters": [
                    {
                        "description": "OpenID Connect Settings.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OpenIdConnectSettings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Settings updated.",
                        "schema": {
                            "$ref": "#/definitions/OpenIdConnectSettings"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Set the OpenID Connect Settings.",
                "tags": [
                    "/oauth/openIdConnect"
                ]
            }
        },
        "/oauth/outOfBandAuthPlugins": {
            "get": {
                "description": "",
                "operationId": "getOOBAuthenticators",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/OutOfBandAuthenticators"
                        }
                    }
                },
                "summary": "Get a list of Out of Band authenticator plugin instances.",
                "tags": [
                    "/oauth/outOfBandAuthPlugins"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "createOOBAuthenticator",
                "parameters": [
                    {
                        "description": "Configuration for an Out of Band authenticator plugin instance.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OutOfBandAuthenticator"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Out of Band Authenticator created.",
                        "schema": {
                            "$ref": "#/definitions/OutOfBandAuthenticator"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create an Out of Band authenticator plugin instance.",
                "tags": [
                    "/oauth/outOfBandAuthPlugins"
                ]
            }
        },
        "/oauth/outOfBandAuthPlugins/descriptors": {
            "get": {
                "description": "",
                "operationId": "getOOBAuthPluginDescriptors",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/OutOfBandAuthPluginDescriptors"
                        }
                    }
                },
                "summary": "Get the list of available Out of Band authenticator plugin descriptors.",
                "tags": [
                    "/oauth/outOfBandAuthPlugins"
                ]
            }
        },
        "/oauth/outOfBandAuthPlugins/descriptors/{id}": {
            "get": {
                "description": "",
                "operationId": "getOOBAuthPluginDescriptor",
                "parameters": [
                    {
                        "description": "ID of an Out of Band authenticator plugin descriptor.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/OutOfBandAuthPluginDescriptor"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get the descriptor of an Out of Band authenticator plugin.",
                "tags": [
                    "/oauth/outOfBandAuthPlugins"
                ]
            }
        },
        "/oauth/outOfBandAuthPlugins/{id}": {
            "delete": {
                "description": "",
                "operationId": "deleteOOBAuthenticator",
                "parameters": [
                    {
                        "description": "ID of Out of Band authenticator plugin instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Out of Band Authenticator deleted."
                    },
                    "403": {
                        "description": "The operation is not permitted, based on the current configuration of the server."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete an Out of Band authenticator plugin instance.",
                "tags": [
                    "/oauth/outOfBandAuthPlugins"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getOOBAuthenticator",
                "parameters": [
                    {
                        "description": "ID of Out of Band authenticator plugin instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/OutOfBandAuthenticator"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get a specific Out of Band authenticator plugin instance.",
                "tags": [
                    "/oauth/outOfBandAuthPlugins"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateOOBAuthenticator",
                "parameters": [
                    {
                        "description": "ID of Out of Band authenticator plugin instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for an Out of Band authenticator plugin instance.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OutOfBandAuthenticator"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Out of Band Authenticator updated.",
                        "schema": {
                            "$ref": "#/definitions/OutOfBandAuthenticator"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update an Out of Band authenticator plugin instance.",
                "tags": [
                    "/oauth/outOfBandAuthPlugins"
                ]
            }
        },
        "/oauth/outOfBandAuthPlugins/{id}/actions": {
            "get": {
                "description": "",
                "operationId": "getActions",
                "parameters": [
                    {
                        "description": "ID of the Out of Band authenticator plugin instance to which these actions belongs to.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/Actions"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "List of actions for an Out of Band authenticator plugin instance.",
                "tags": [
                    "/oauth/outOfBandAuthPlugins"
                ]
            }
        },
        "/oauth/outOfBandAuthPlugins/{id}/actions/{actionId}": {
            "get": {
                "description": "",
                "operationId": "getAction",
                "parameters": [
                    {
                        "description": "ID of the Out of Band authenticator plugin instance to which these actions belongs to.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "ID of the action.",
                        "in": "path",
                        "name": "actionId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/Action"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Find an Out of Band authenticator plugin instance's action by ID.",
                "tags": [
                    "/oauth/outOfBandAuthPlugins"
                ]
            }
        },
        "/oauth/outOfBandAuthPlugins/{id}/actions/{actionId}/invokeAction": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "invokeActionWithOptions",
                "parameters": [
                    {
                        "description": "ID of the Out of Band authenticator plugin instance to which these actions belongs to.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "ID of the action.",
                        "in": "path",
                        "name": "actionId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Action options for action invoked.",
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ActionOptions"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Action invoked on Out of Band authenticator.",
                        "schema": {
                            "$ref": "#/definitions/ActionResult"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Invokes an action for Out of Band authenticator plugin instance.",
                "tags": [
                    "/oauth/outOfBandAuthPlugins"
                ]
            }
        },
        "/oauth/resourceOwnerCredentialsMappings": {
            "get": {
                "description": "",
                "operationId": "getResourceOwnerCredentialsMappings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/ResourceOwnerCredentialsMappings"
                        }
                    }
                },
                "summary": "Get the list of Resource Owner Credentials Grant Mapping.",
                "tags": [
                    "/oauth/resourceOwnerCredentialsMappings"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Create a new Resource Owner Credentials mapping. If a Resource Owner Credentials mapping can't be created, a 422 status code is returned along with a list of validation errors that must be corrected.",
                "operationId": "createResourceOwnerCredentialsMapping",
                "parameters": [
                    {
                        "description": "Configuration for Resource Owner Credentials mapping.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResourceOwnerCredentialsMapping"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Resource owner credentials mapping created.",
                        "schema": {
                            "$ref": "#/definitions/ResourceOwnerCredentialsMapping"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a new Resource Owner Credentials mapping.",
                "tags": [
                    "/oauth/resourceOwnerCredentialsMappings"
                ]
            }
        },
        "/oauth/resourceOwnerCredentialsMappings/{id}": {
            "delete": {
                "description": "",
                "operationId": "deleteResourceOwnerCredentialsMapping",
                "parameters": [
                    {
                        "description": "ID of the Resource Owner Credentials mapping.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Resource owner credentials mapping deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete a Resource Owner Credentials mapping.",
                "tags": [
                    "/oauth/resourceOwnerCredentialsMappings"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getResourceOwnerCredentialsMapping",
                "parameters": [
                    {
                        "description": "ID of the Resource Owner Credentials mapping.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/ResourceOwnerCredentialsMapping"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Find the Resource Owner Credentials mapping by the ID.",
                "tags": [
                    "/oauth/resourceOwnerCredentialsMappings"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateResourceOwnerCredentialsMapping",
                "parameters": [
                    {
                        "description": "ID of the Resource Owner Credentials mapping to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for Resource Owner Credentials mapping.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResourceOwnerCredentialsMapping"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Resource owner credentials mapping updated.",
                        "schema": {
                            "$ref": "#/definitions/ResourceOwnerCredentialsMapping"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update a Resource Owner Credentials mapping.",
                "tags": [
                    "/oauth/resourceOwnerCredentialsMappings"
                ]
            }
        },
        "/oauth/tokenExchange/generator/groups": {
            "get": {
                "description": "",
                "operationId": "getGroups",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/TokenExchangeGeneratorGroups"
                        }
                    }
                },
                "summary": "Get list of OAuth 2.0 Token Exchange Generator groups.",
                "tags": [
                    "/oauth/tokenExchange/generator"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Create a new OAuth 2.0 Token Exchange Generator group. If the OAuth 2.0 Token Exchange Generator group is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
                "operationId": "createGroup",
                "parameters": [
                    {
                        "description": "Configuration for new OAuth 2.0 Token Exchange Generator.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TokenExchangeGeneratorGroup"
                        }
                    },
                    {
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "bypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Token Exchange Processor Policy created.",
                        "schema": {
                            "$ref": "#/definitions/TokenExchangeGeneratorGroup"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a new OAuth 2.0 Token Exchange Generator group.",
                "tags": [
                    "/oauth/tokenExchange/generator"
                ]
            }
        },
        "/oauth/tokenExchange/generator/groups/{id}": {
            "delete": {
                "description": "Delete an OAuth 2.0 Token Exchange Generator group with the specified ID. A 404 status code is returned for nonexistent IDs. Note: If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
                "operationId": "deleteGroup",
                "parameters": [
                    {
                        "description": "ID of OAuth 2.0 Token Exchange Generator group to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Token Exchange Processor Policy deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete an OAuth 2.0 Token Exchange Generator group.",
                "tags": [
                    "/oauth/tokenExchange/generator"
                ]
            },
            "get": {
                "description": "Get an OAuth 2.0 Token Exchange Generator group with the specified ID. A 404 status code is returned for nonexistent IDs.",
                "operationId": "getGroup",
                "parameters": [
                    {
                        "description": "ID of the OAuth 2.0 Token Exchange Generator group to fetch.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/TokenExchangeGeneratorGroup"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Find an OAuth 2.0 Token Exchange Generator group by ID.",
                "tags": [
                    "/oauth/tokenExchange/generator"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "Update an OAuth 2.0 Token Exchange Generator group with the matching ID. If the group is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected. Note: A 404 status code is returned for nonexistent IDs.",
                "operationId": "updateGroup",
                "parameters": [
                    {
                        "description": "ID of the OAuth 2.0 Token Exchange Generator group to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for updated OAuth 2.0 Token Exchange Generator group.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TokenExchangeGeneratorGroup"
                        }
                    },
                    {
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "bypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Token Exchange Processor Policy updated.",
                        "schema": {
                            "$ref": "#/definitions/TokenExchangeGeneratorGroup"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update an OAuth 2.0 Token Exchange Generator group.",
                "tags": [
                    "/oauth/tokenExchange/generator"
                ]
            }
        },
        "/oauth/tokenExchange/generator/settings": {
            "get": {
                "description": "",
                "operationId": "getSettings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/TokenExchangeGeneratorSettings"
                        }
                    }
                },
                "summary": "Get general OAuth 2.0 Token Exchange Generator settings.",
                "tags": [
                    "/oauth/tokenExchange/generator"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateSettings",
                "parameters": [
                    {
                        "description": "OAuth 2.0 Token Exchange Generator settings.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TokenExchangeGeneratorSettings"
                        }
                    },
                    {
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "bypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Settings updated.",
                        "schema": {
                            "$ref": "#/definitions/TokenExchangeGeneratorSettings"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update general OAuth 2.0 Token Exchange Generator settings.",
                "tags": [
                    "/oauth/tokenExchange/generator"
                ]
            }
        },
        "/oauth/tokenExchange/processor/policies": {
            "get": {
                "description": "",
                "operationId": "getPolicies",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/TokenExchangeProcessorPolicies"
                        }
                    }
                },
                "summary": "Get list of OAuth 2.0 Token Exchange Processor policies.",
                "tags": [
                    "/oauth/tokenExchange/processor"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Create a new OAuth 2.0 Token Exchange Processor policy. If the OAuth 2.0 Token Exchange Processor policy is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
                "operationId": "createPolicy",
                "parameters": [
                    {
                        "description": "Configuration for new OAuth 2.0 Token Exchange Processor.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TokenExchangeProcessorPolicy"
                        }
                    },
                    {
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "bypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Token Exchange Processor Policy created.",
                        "schema": {
                            "$ref": "#/definitions/TokenExchangeProcessorPolicy"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a new OAuth 2.0 Token Exchange Processor policy.",
                "tags": [
                    "/oauth/tokenExchange/processor"
                ]
            }
        },
        "/oauth/tokenExchange/processor/policies/{id}": {
            "delete": {
                "description": "Delete an OAuth 2.0 Token Exchange Processor policy with the specified ID. A 404 status code is returned for nonexistent IDs. Note: If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
                "operationId": "deletePolicy",
                "parameters": [
                    {
                        "description": "ID of OAuth 2.0 Token Exchange Processor policy to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Token Exchange Processor Policy deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete an OAuth 2.0 Token Exchange Processor policy.",
                "tags": [
                    "/oauth/tokenExchange/processor"
                ]
            },
            "get": {
                "description": "Get an OAuth 2.0 Token Exchange Processor policy with the specified ID. A 404 status code is returned for nonexistent IDs.",
                "operationId": "getPolicy",
                "parameters": [
                    {
                        "description": "ID of the OAuth 2.0 Token Exchange Processor policy to fetch.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/TokenExchangeProcessorPolicy"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Find an OAuth 2.0 Token Exchange Processor policy by ID.",
                "tags": [
                    "/oauth/tokenExchange/processor"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "Update an OAuth 2.0 Token Exchange Processor policy with the matching ID. If the policy is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected. Note: A 404 status code is returned for nonexistent IDs.",
                "operationId": "updatePolicy",
                "parameters": [
                    {
                        "description": "ID of the OAuth 2.0 Token Exchange Processor policy to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for updated OAuth 2.0 Token Exchange Processor policy.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TokenExchangeProcessorPolicy"
                        }
                    },
                    {
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "bypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Token Exchange Processor Policy updated.",
                        "schema": {
                            "$ref": "#/definitions/TokenExchangeProcessorPolicy"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update an OAuth 2.0 Token Exchange Processor policy.",
                "tags": [
                    "/oauth/tokenExchange/processor"
                ]
            }
        },
        "/oauth/tokenExchange/processor/settings": {
            "get": {
                "description": "",
                "operationId": "getSettings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/TokenExchangeProcessorSettings"
                        }
                    }
                },
                "summary": "Get general OAuth 2.0 Token Exchange Processor settings.",
                "tags": [
                    "/oauth/tokenExchange/processor"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateSettings",
                "parameters": [
                    {
                        "description": "OAuth 2.0 Token Exchange Processor settings.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TokenExchangeProcessorSettings"
                        }
                    },
                    {
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "bypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Settings updated.",
                        "schema": {
                            "$ref": "#/definitions/TokenExchangeProcessorSettings"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update general OAuth 2.0 Token Exchange Processor settings.",
                "tags": [
                    "/oauth/tokenExchange/processor"
                ]
            }
        },
        "/oauth/tokenExchange/tokenGeneratorMappings": {
            "get": {
                "description": "",
                "operationId": "getTokenGeneratorMappings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/ProcessorPolicyToGeneratorMappings"
                        }
                    }
                },
                "summary": "Get the list of Token Exchange Processor policy to Token Generator Mappings.",
                "tags": [
                    "/oauth/tokenExchange/tokenGeneratorMappings"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "createTokenGeneratorMapping",
                "parameters": [
                    {
                        "description": "Configuration for a new Token Exchange Processor policy to Token Generator Mapping.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ProcessorPolicyToGeneratorMapping"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Token Exchange Processor policy to Token Generator mapping created.",
                        "schema": {
                            "$ref": "#/definitions/ProcessorPolicyToGeneratorMapping"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a new Token Exchange Processor policy to Token Generator Mapping.",
                "tags": [
                    "/oauth/tokenExchange/tokenGeneratorMappings"
                ]
            }
        },
        "/oauth/tokenExchange/tokenGeneratorMappings/{id}": {
            "delete": {
                "description": "",
                "operationId": "deleteTokenGeneratorMappingById",
                "parameters": [
                    {
                        "description": "ID of Token Exchange Processor policy to Token Generator Mapping to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Token Exchange Processor policy to Token Generator mapping deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete a Token Exchange Processor policy to Token Generator Mapping.",
                "tags": [
                    "/oauth/tokenExchange/tokenGeneratorMappings"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getTokenGeneratorMappingById",
                "parameters": [
                    {
                        "description": "ID of Token Exchange Processor policy to Token Generator Mapping to fetch.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/ProcessorPolicyToGeneratorMapping"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get a Token Exchange Processor policy to Token Generator Mapping.",
                "tags": [
                    "/oauth/tokenExchange/tokenGeneratorMappings"
                ]
            },
            "put": {
                "description": "",
                "operationId": "updateTokenGeneratorMappingById",
                "parameters": [
                    {
                        "description": "ID of Token Exchange Processor policy to Token Generator Mapping to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for updated Token Exchange Processor policy to Token Generator Mapping.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ProcessorPolicyToGeneratorMapping"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Token Exchange Processor policy to Token Generator mapping updated.",
                        "schema": {
                            "$ref": "#/definitions/ProcessorPolicyToGeneratorMapping"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update a Token Exchange Processor policy to Token Generator Mapping.",
                "tags": [
                    "/oauth/tokenExchange/tokenGeneratorMappings"
                ]
            }
        },
        "/passwordCredentialValidators": {
            "get": {
                "description": "",
                "operationId": "getPasswordCredentialValidators",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/PasswordCredentialValidators"
                        }
                    }
                },
                "summary": "Get the list of available password credential validators",
                "tags": [
                    "/passwordCredentialValidators"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Create a new password credential validator instance. If the password credential validator is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
                "operationId": "createPasswordCredentialValidator",
                "parameters": [
                    {
                        "description": "Configuration for the new password credential validator instance.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PasswordCredentialValidator"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Password credential validator created.",
                        "schema": {
                            "$ref": "#/definitions/PasswordCredentialValidator"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a new password credential validator instance",
                "tags": [
                    "/passwordCredentialValidators"
                ]
            }
        },
        "/passwordCredentialValidators/descriptors": {
            "get": {
                "description": "",
                "operationId": "getPasswordCredentialValidatorDescriptors",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/PasswordCredentialValidatorDescriptors"
                        }
                    }
                },
                "summary": "Get a list of available password credential validator descriptors.",
                "tags": [
                    "/passwordCredentialValidators"
                ]
            }
        },
        "/passwordCredentialValidators/descriptors/{id}": {
            "get": {
                "description": "Get the description of a password credential validator by ID. A 404 status code is returned for a nonexistent ID.",
                "operationId": "getPasswordCredentialValidatorDescriptor",
                "parameters": [
                    {
                        "description": "ID of the password credential validator descriptor to fetch.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/PasswordCredentialValidatorDescriptor"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get the description of a password credential validator by ID.",
                "tags": [
                    "/passwordCredentialValidators"
                ]
            }
        },
        "/passwordCredentialValidators/{id}": {
            "delete": {
                "description": "Delete a password credential validator instance with the specified ID. A 404 status code is returned for nonexistent IDs. Note: Only validators not in use can be deleted. If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the errors.",
                "operationId": "deletePasswordCredentialValidator",
                "parameters": [
                    {
                        "description": "ID of the password credential validator to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Password credential validator deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Resource is in use and cannot be deleted.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete a password credential validator instance.",
                "tags": [
                    "/passwordCredentialValidators"
                ]
            },
            "get": {
                "description": "Get the configured password credential validator instance with the specified ID. A 404 status code is returned for a nonexistent ID.",
                "operationId": "getPasswordCredentialValidator",
                "parameters": [
                    {
                        "description": "ID of password credential validator instance to fetch.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/PasswordCredentialValidator"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Find a password credential validator by ID.",
                "tags": [
                    "/passwordCredentialValidators"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "Update a password credential validator instance. If the password credential validator is not properly configured, a 422 status code is returned along with a list of validation errors that need to be corrected.",
                "operationId": "updatePasswordCredentialValidator",
                "parameters": [
                    {
                        "description": "ID of the password credential validator instance",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for the updated password credential validator instance.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PasswordCredentialValidator"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Password credential validator updated.",
                        "schema": {
                            "$ref": "#/definitions/PasswordCredentialValidator"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update a password credential validator instance.",
                "tags": [
                    "/passwordCredentialValidators"
                ]
            }
        },
        "/pingOneConnections": {
            "get": {
                "description": "",
                "operationId": "getPingOneConnections",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/PingOneConnections"
                        }
                    }
                },
                "summary": "Get the list of all PingOne connections.",
                "tags": [
                    "/pingOneConnections"
                ]
            },
            "post": {
                "description": "",
                "operationId": "createPingOneConnection",
                "parameters": [
                    {
                        "description": "Configuration for the new PingOne connection.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PingOneConnection"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "PingOne connection created.",
                        "schema": {
                            "$ref": "#/definitions/PingOneConnection"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a new PingOne connection.",
                "tags": [
                    "/pingOneConnections"
                ]
            }
        },
        "/pingOneConnections/{id}": {
            "delete": {
                "description": "",
                "operationId": "deletePingOneConnection",
                "parameters": [
                    {
                        "description": "ID of the PingOne connection to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "PingOne connection deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete a PingOne connection.",
                "tags": [
                    "/pingOneConnections"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getPingOneConnection",
                "parameters": [
                    {
                        "description": "ID of the connection to fetch.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/PingOneConnection"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get a PingOne connection with the specified ID.",
                "tags": [
                    "/pingOneConnections"
                ]
            },
            "put": {
                "description": "",
                "operationId": "updatePingOneConnection",
                "parameters": [
                    {
                        "description": "ID of the PingOne connection to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for the updated connection.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PingOneConnection"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "PingOne connection updated.",
                        "schema": {
                            "$ref": "#/definitions/PingOneConnection"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update a PingOne connection.",
                "tags": [
                    "/pingOneConnections"
                ]
            }
        },
        "/pingOneConnections/{id}/credentialStatus": {
            "get": {
                "description": "",
                "operationId": "getCredentialStatus",
                "parameters": [
                    {
                        "description": "ID of the PingOne connection.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/PingOneCredentialStatus"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get the status of the credential associated with the PingOne connection",
                "tags": [
                    "/pingOneConnections"
                ]
            }
        },
        "/pingOneConnections/{id}/environments": {
            "get": {
                "description": "",
                "operationId": "getPingOneConnectionEnvironments",
                "parameters": [
                    {
                        "description": "ID of the PingOne connection.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Page number to retrieve.",
                        "format": "int32",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of environments per page.",
                        "format": "int32",
                        "in": "query",
                        "name": "numberPerPage",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Filter criteria limits the environments that are returned to only those that match it. The filter criteria is compared to the environment name and ID fields. The comparison is a case-insensitive partial match. No additional pattern based matching is supported.",
                        "in": "query",
                        "name": "filter",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/PingOneEnvironments"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "500": {
                        "description": "Error connecting to PingOne"
                    }
                },
                "summary": "Get the list of environments that the PingOne connection has access to.",
                "tags": [
                    "/pingOneConnections"
                ]
            }
        },
        "/pingOneConnections/{id}/serviceAssociations": {
            "get": {
                "description": "",
                "operationId": "getPingOneConnectionAssociations",
                "parameters": [
                    {
                        "description": "ID of the PingOne connection.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/ServiceAssociations"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get information about components using this connection to access PingOne services.",
                "tags": [
                    "/pingOneConnections"
                ]
            }
        },
        "/pingOneConnections/{id}/usage": {
            "get": {
                "description": "",
                "operationId": "getPingOneConnectionUsages",
                "parameters": [
                    {
                        "description": "ID of the PingOne connection.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/ResourceUsages"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get the list of resources that reference this PingOne connection.",
                "tags": [
                    "/pingOneConnections"
                ]
            }
        },
        "/pingOneForEnterprise": {
            "get": {
                "description": "",
                "operationId": "getPingOneForEnterpriseSettings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/PingOneForEnterpriseSettings"
                        }
                    },
                    "403": {
                        "description": "PingFederate is not connected to PingOne for Enterprise. Operation not available."
                    }
                },
                "summary": "Get the PingOne for Enterprise settings",
                "tags": [
                    "/pingOneForEnterprise"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updatePingOneSettings",
                "parameters": [
                    {
                        "description": "PingOne for Enterprise connection settings",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PingOneForEnterpriseSettings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/PingOneForEnterpriseSettings"
                        }
                    },
                    "403": {
                        "description": "PingFederate is not connected to PingOne for Enterprise. Operation not available."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update the PingOne for Enterprise settings.",
                "tags": [
                    "/pingOneForEnterprise"
                ]
            }
        },
        "/pingOneForEnterprise/disconnect": {
            "post": {
                "description": "",
                "operationId": "disconnect",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Disconnected from PingOne for Enterprise",
                        "schema": {
                            "$ref": "#/definitions/PingOneForEnterpriseSettings"
                        }
                    },
                    "403": {
                        "description": "PingFederate is not connected to PingOne for Enterprise. Operation not available."
                    },
                    "422": {
                        "description": "Unable to disconnect from PingOne for Enterprise."
                    }
                },
                "summary": "Disconnect from PingOne for Enterprise",
                "tags": [
                    "/pingOneForEnterprise"
                ]
            }
        },
        "/pingOneForEnterprise/keyPairs": {
            "get": {
                "description": "",
                "operationId": "getKeyPairs",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/P14EKeysView"
                        }
                    },
                    "403": {
                        "description": "PingFederate is not connected to PingOne for Enterprise. Operation not available."
                    }
                },
                "summary": "Get the PingOne for Enterprise key pair settings",
                "tags": [
                    "/pingOneForEnterprise"
                ]
            }
        },
        "/pingOneForEnterprise/keyPairs/rotate": {
            "post": {
                "description": "",
                "operationId": "rotateKeys",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/P14EKeysView"
                        }
                    },
                    "403": {
                        "description": "PingFederate is not connected to PingOne for Enterprise. Operation not available."
                    }
                },
                "summary": "Rotate the authentication key",
                "tags": [
                    "/pingOneForEnterprise"
                ]
            }
        },
        "/pingOneForEnterprise/updateIdentityRepository": {
            "post": {
                "description": "Update the identity repository to keep your PingFederate and PingOne for Enterprise settings synchronized.<br>CAUTION: Updating the identity repository overwrites the existing PingOne for Enterprise identity repository, causing users to be directed to the current PingFederate instance for SSO.",
                "operationId": "updatePingOneForEnterpriseIdentityRepository",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/PingOneForEnterpriseSettings"
                        }
                    },
                    "403": {
                        "description": "PingFederate is not connected to PingOne for Enterprise. Operation not available."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update the PingOne Identity Repository",
                "tags": [
                    "/pingOneForEnterprise"
                ]
            }
        },
        "/protocolMetadata/lifetimeSettings": {
            "get": {
                "description": "",
                "operationId": "getLifetimeSettings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/MetadataLifetimeSettings"
                        }
                    }
                },
                "summary": "Get metadata cache duration and reload delay for automated reloading.",
                "tags": [
                    "/protocolMetadata"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateLifetimeSettings",
                "parameters": [
                    {
                        "description": "Metadata lifetime settings.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/MetadataLifetimeSettings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Metadata lifetime settings updated.",
                        "schema": {
                            "$ref": "#/definitions/MetadataLifetimeSettings"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update metadata cache duration and reload delay for automated reloading.",
                "tags": [
                    "/protocolMetadata"
                ]
            }
        },
        "/protocolMetadata/signingSettings": {
            "get": {
                "description": "",
                "operationId": "getSigningSettings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/MetadataSigningSettings"
                        }
                    }
                },
                "summary": "Get the certificate ID and algorithm used for metadata signing.",
                "tags": [
                    "/protocolMetadata"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateSigningSettings",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/MetadataSigningSettings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Metadata signing settings updated.",
                        "schema": {
                            "$ref": "#/definitions/MetadataSigningSettings"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update the certificate and algorithm for metadata signing.",
                "tags": [
                    "/protocolMetadata"
                ]
            }
        },
        "/redirectValidation": {
            "get": {
                "description": "",
                "operationId": "getRedirectValidationSettings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/RedirectValidationSettings"
                        }
                    }
                },
                "summary": "Retrieve redirect validation settings.",
                "tags": [
                    "/redirectValidation"
                ]
            },
            "put": {
                "description": "<b>Note: </b>Ensure IdP Discovery and/or WS-Federation is enabled for redirect validation to function for IdP Discovery and/or wreply for SLO respectively.",
                "operationId": "updateRedirectValidationSettings",
                "parameters": [
                    {
                        "description": "Redirect validation settings.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RedirectValidationSettings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Redirect validation settings updated.",
                        "schema": {
                            "$ref": "#/definitions/RedirectValidationSettings"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update redirect validation settings.",
                "tags": [
                    "/redirectValidation"
                ]
            }
        },
        "/secretManagers": {
            "get": {
                "description": "",
                "operationId": "getSecretManagers",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/SecretManagers"
                        }
                    }
                },
                "summary": "Get a list of secret manager plugin instances.",
                "tags": [
                    "/secretManagers"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "createSecretManager",
                "parameters": [
                    {
                        "description": "Configuration for a secret manager plugin instance.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SecretManager"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Secret Manager plugin created.",
                        "schema": {
                            "$ref": "#/definitions/SecretManager"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a secret manager plugin instance.",
                "tags": [
                    "/secretManagers"
                ]
            }
        },
        "/secretManagers/descriptors": {
            "get": {
                "description": "",
                "operationId": "getSecretManagerPluginDescriptors",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/SecretManagerDescriptors"
                        }
                    }
                },
                "summary": "Get a list of available secret manager plugin descriptors.",
                "tags": [
                    "/secretManagers"
                ]
            }
        },
        "/secretManagers/descriptors/{id}": {
            "get": {
                "description": "",
                "operationId": "getSecretManagerPluginDescriptor",
                "parameters": [
                    {
                        "description": "ID of secret manager plugin descriptor.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/SecretManagerDescriptor"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get a secret manager plugin descriptor.",
                "tags": [
                    "/secretManagers"
                ]
            }
        },
        "/secretManagers/{id}": {
            "delete": {
                "description": "",
                "operationId": "deleteSecretManager",
                "parameters": [
                    {
                        "description": "ID of a secret manager plugin instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Secret Manager plugin deleted."
                    },
                    "403": {
                        "description": "The operation is not permitted, based on the current configuration of the server."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete a secret manager plugin instance.",
                "tags": [
                    "/secretManagers"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getSecretManager",
                "parameters": [
                    {
                        "description": "ID of a secret manager plugin instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/SecretManager"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get a specific secret manager plugin instance.",
                "tags": [
                    "/secretManagers"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateSecretManager",
                "parameters": [
                    {
                        "description": "ID of a secret manager plugin instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for a secret manager plugin instance.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SecretManager"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Secret Manager plugin updated.",
                        "schema": {
                            "$ref": "#/definitions/SecretManager"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update a secret manager plugin instance.",
                "tags": [
                    "/secretManagers"
                ]
            }
        },
        "/secretManagers/{id}/actions": {
            "get": {
                "description": "",
                "operationId": "getActions",
                "parameters": [
                    {
                        "description": "ID of a secret manager plugin instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/Actions"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get a list of actions for a secret manager plugin instance.",
                "tags": [
                    "/secretManagers"
                ]
            }
        },
        "/secretManagers/{id}/actions/{actionId}": {
            "get": {
                "description": "",
                "operationId": "getAction",
                "parameters": [
                    {
                        "description": "ID of a secret manager plugin instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "ID of the action.",
                        "in": "path",
                        "name": "actionId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/Action"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get a secret manager plugin instance's action by ID.",
                "tags": [
                    "/secretManagers"
                ]
            }
        },
        "/secretManagers/{id}/actions/{actionId}/invokeAction": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Invokes an action for secret manager plugin instance. A 404 status code is returned for nonexistent IDs. If the action produces a download file, the file will be returned directly in the response. Otherwise an ActionResult will be returned.",
                "operationId": "invokeActionWithOptions",
                "parameters": [
                    {
                        "description": "ID of a secret manager plugin instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "ID of the action.",
                        "in": "path",
                        "name": "actionId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Action options for action invoked.",
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ActionOptions"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Secret Manager plugin action invoked.",
                        "schema": {
                            "$ref": "#/definitions/ActionResult"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Invokes an action for secret manager plugin instance.",
                "tags": [
                    "/secretManagers"
                ]
            }
        },
        "/serverSettings": {
            "get": {
                "description": "",
                "operationId": "getServerSettings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/ServerSettings"
                        }
                    }
                },
                "summary": "Gets the server settings",
                "tags": [
                    "/serverSettings"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateServerSettings",
                "parameters": [
                    {
                        "description": "Configuration for server settings.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServerSettings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Server Settings updated.",
                        "schema": {
                            "$ref": "#/definitions/ServerSettings"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update the server settings.",
                "tags": [
                    "/serverSettings"
                ]
            }
        },
        "/serverSettings/captchaSettings": {
            "get": {
                "description": "",
                "operationId": "getCaptchaSettings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/CaptchaSettings"
                        }
                    }
                },
                "summary": "Gets the CAPTCHA settings.",
                "tags": [
                    "/serverSettings"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateCaptchaSettings",
                "parameters": [
                    {
                        "description": "CAPTCHA settings.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CaptchaSettings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Captcha settings updated.",
                        "schema": {
                            "$ref": "#/definitions/CaptchaSettings"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update the CAPTCHA settings.",
                "tags": [
                    "/serverSettings"
                ]
            }
        },
        "/serverSettings/emailServer": {
            "get": {
                "deprecated": true,
                "description": "",
                "operationId": "getEmailServerSettings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/EmailServerSettings"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "(Deprecated) Gets the email server settings",
                "tags": [
                    "/serverSettings"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "deprecated": true,
                "description": "(Deprecated) If the validationEmail is provided, an email will be sent to the validationEmail using the provided email server settings.  The settings will be saved if the test email is successfully sent.<br>",
                "operationId": "updateEmailServerSettings",
                "parameters": [
                    {
                        "description": "Configuration for email server settings.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EmailServerSettings"
                        }
                    },
                    {
                        "description": "The email address used to validate the email server settings.",
                        "in": "query",
                        "name": "validationEmail",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Only validation will be performed.  Email server settings will not be saved.",
                        "in": "query",
                        "name": "validateOnly",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Email Server updated.",
                        "schema": {
                            "$ref": "#/definitions/EmailServerSettings"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "(Deprecated) Update the email server settings",
                "tags": [
                    "/serverSettings"
                ]
            }
        },
        "/serverSettings/generalSettings": {
            "get": {
                "description": "",
                "operationId": "getGeneralSettings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/GeneralSettings"
                        }
                    }
                },
                "summary": "Gets the general settings.",
                "tags": [
                    "/serverSettings"
                ]
            },
            "put": {
                "description": "",
                "operationId": "updateGeneralSettings",
                "parameters": [
                    {
                        "description": "Configuration for general settings.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GeneralSettings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "General settings have been updated.",
                        "schema": {
                            "$ref": "#/definitions/GeneralSettings"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update general settings.",
                "tags": [
                    "/serverSettings"
                ]
            }
        },
        "/serverSettings/notifications": {
            "get": {
                "description": "",
                "operationId": "getNotificationSettings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/NotificationSettings"
                        }
                    }
                },
                "summary": "Gets the notification settings",
                "tags": [
                    "/serverSettings"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateNotificationSettings",
                "parameters": [
                    {
                        "description": "Notification settings.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NotificationSettings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Notifications updated.",
                        "schema": {
                            "$ref": "#/definitions/NotificationSettings"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update the notification settings.",
                "tags": [
                    "/serverSettings"
                ]
            }
        },
        "/serverSettings/outboundProvisioning": {
            "get": {
                "description": "Get the settings for database used internally to facilitate outbound provisioning to service providers.",
                "operationId": "getOutBoundProvisioningSettings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/OutboundProvisionDatabase"
                        }
                    }
                },
                "summary": "Get database used for outbound provisioning",
                "tags": [
                    "/serverSettings"
                ]
            },
            "put": {
                "description": "Update the settings for database used internally to facilitate outbound provisioning to service providers.",
                "operationId": "updateOutBoundProvisioningSettings",
                "parameters": [
                    {
                        "description": "The Outbound Provision Database settings.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OutboundProvisionDatabase"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Database updated for outbound provisioning.",
                        "schema": {
                            "$ref": "#/definitions/OutboundProvisionDatabase"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update database used for outbound provisioning",
                "tags": [
                    "/serverSettings"
                ]
            }
        },
        "/serverSettings/systemKeys": {
            "get": {
                "description": "For each key, only encryptedKeyData and not keyData will be returned",
                "operationId": "getSystemKeys",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/SystemKeys"
                        }
                    }
                },
                "summary": "Get the system keys.",
                "tags": [
                    "/serverSettings"
                ]
            },
            "put": {
                "description": "For each key, either encryptedKeyData or keyData must be provided.",
                "operationId": "updateSystemKeys",
                "parameters": [
                    {
                        "description": "System keys.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SystemKeys"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "System keys updated.",
                        "schema": {
                            "$ref": "#/definitions/SystemKeys"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update the system keys.",
                "tags": [
                    "/serverSettings"
                ]
            }
        },
        "/serverSettings/systemKeys/rotate": {
            "post": {
                "description": "Upon rotation, previous key will be replaced by the current key, the current key will be replaced by the pending key, while the newly generated key replaces the pending key. Periodic rotation can ensure optimal security of your environment.",
                "operationId": "rotateSystemKeys",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/SystemKeys"
                        }
                    },
                    "201": {
                        "description": "System Keys rotated.",
                        "schema": {
                            "$ref": "#/definitions/SystemKeys"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Rotate the system keys.",
                "tags": [
                    "/serverSettings"
                ]
            }
        },
        "/serverSettings/wsTrustStsSettings": {
            "get": {
                "description": "",
                "operationId": "getWsTrustStsSettings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/WsTrustStsSettings"
                        }
                    }
                },
                "summary": "Get the current WS-Trust STS Settings.",
                "tags": [
                    "/serverSettings"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateWsTrustStsSettings",
                "parameters": [
                    {
                        "description": "Configuration for WS-Trust STS Settings.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/WsTrustStsSettings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Server Settings updated.",
                        "schema": {
                            "$ref": "#/definitions/WsTrustStsSettings"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update WS-Trust STS Settings.",
                "tags": [
                    "/serverSettings"
                ]
            }
        },
        "/serverSettings/wsTrustStsSettings/issuerCertificates": {
            "get": {
                "description": "",
                "operationId": "getCerts",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/IssuerCerts"
                        }
                    }
                },
                "summary": "Get the list of certificates for WS-Trust STS Settings.",
                "tags": [
                    "/serverSettings"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "importCertificate",
                "parameters": [
                    {
                        "description": "File data to import.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/X509File"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "New certificate has been imported to WS-Trust STS Settings",
                        "schema": {
                            "$ref": "#/definitions/IssuerCert"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                },
                "summary": "Import a new certificate.",
                "tags": [
                    "/serverSettings"
                ]
            }
        },
        "/serverSettings/wsTrustStsSettings/issuerCertificates/{id}": {
            "delete": {
                "description": "If the request is successful, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
                "operationId": "deleteCertificate",
                "parameters": [
                    {
                        "description": "ID of the certificate to delete",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Certificate has been deleted from WS-Trust STS Settings"
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Resource is in use and cannot be deleted.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete a certificate from WS-Trust STS Settings.",
                "tags": [
                    "/serverSettings"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getCert",
                "parameters": [
                    {
                        "description": "ID of the certificate to retrieve.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/IssuerCert"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                },
                "summary": "Retrieve details of a certificate.",
                "tags": [
                    "/serverSettings"
                ]
            }
        },
        "/serviceAuthentication": {
            "get": {
                "description": "",
                "operationId": "getServiceAuthentication",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/ServiceAuthentication"
                        }
                    }
                },
                "summary": "Get the service authentication settings.",
                "tags": [
                    "/serviceAuthentication"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "Manage availability and credentials to services responsible for federation protocol handling, monitoring and administration.",
                "operationId": "updateServiceAuthentication",
                "parameters": [
                    {
                        "description": "Service authentication settings.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServiceAuthentication"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Service authentication settings updated.",
                        "schema": {
                            "$ref": "#/definitions/ServiceAuthentication"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update the service authentication settings.",
                "tags": [
                    "/serviceAuthentication"
                ]
            }
        },
        "/session/applicationSessionPolicy": {
            "get": {
                "description": "",
                "operationId": "getApplicationPolicy",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/ApplicationSessionPolicy"
                        }
                    }
                },
                "summary": "Get the application session policy.",
                "tags": [
                    "/session"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateApplicationPolicy",
                "parameters": [
                    {
                        "description": "Application session policy.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ApplicationSessionPolicy"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Application session policy updated.",
                        "schema": {
                            "$ref": "#/definitions/ApplicationSessionPolicy"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update the application session policy.",
                "tags": [
                    "/session"
                ]
            }
        },
        "/session/authenticationSessionPolicies": {
            "get": {
                "description": "Get a list of all session policies that are associated with specific authentication sources.",
                "operationId": "getSourcePolicies",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationSessionPolicies"
                        }
                    }
                },
                "summary": "Get list of session policies.",
                "tags": [
                    "/session"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Create a new session policy for a specified authentication source. If the session policy is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
                "operationId": "createSourcePolicy",
                "parameters": [
                    {
                        "description": "Configuration for new policy.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuthenticationSessionPolicy"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Authentication session policy created.",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationSessionPolicy"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a new session policy.",
                "tags": [
                    "/session"
                ]
            }
        },
        "/session/authenticationSessionPolicies/global": {
            "get": {
                "description": "",
                "operationId": "getGlobalPolicy",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/GlobalAuthenticationSessionPolicy"
                        }
                    }
                },
                "summary": "Get the global authentication session policy.",
                "tags": [
                    "/session"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateGlobalPolicy",
                "parameters": [
                    {
                        "description": "Global authentication session policy.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GlobalAuthenticationSessionPolicy"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Global authentication session policy updated.",
                        "schema": {
                            "$ref": "#/definitions/GlobalAuthenticationSessionPolicy"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update the global authentication session policy.",
                "tags": [
                    "/session"
                ]
            }
        },
        "/session/authenticationSessionPolicies/{id}": {
            "delete": {
                "description": "Delete the session policy with the specified ID. A 404 status code is returned for nonexistent IDs. If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
                "operationId": "deleteSourcePolicy",
                "parameters": [
                    {
                        "description": "ID of session policy to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Authentication session policy deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete a session policy.",
                "tags": [
                    "/session"
                ]
            },
            "get": {
                "description": "Get the session policy with the specified ID. A 404 status code is returned for nonexistent IDs.",
                "operationId": "getSourcePolicy",
                "parameters": [
                    {
                        "description": "ID of the session policy to fetch.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationSessionPolicy"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Find session policy by ID.",
                "tags": [
                    "/session"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "Update the session policy with the matching ID. If the policy is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
                "operationId": "updateSourcePolicy",
                "parameters": [
                    {
                        "description": "ID of the session policy to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for updated policy.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuthenticationSessionPolicy"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Authentication session policy updated.",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationSessionPolicy"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update a session policy.",
                "tags": [
                    "/session"
                ]
            }
        },
        "/session/settings": {
            "get": {
                "description": "",
                "operationId": "getSessionSettings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/SessionSettings"
                        }
                    }
                },
                "summary": "Get general session management settings.",
                "tags": [
                    "/session"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateSessionSettings",
                "parameters": [
                    {
                        "description": "Session settings.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SessionSettings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "General session management settings updated.",
                        "schema": {
                            "$ref": "#/definitions/SessionSettings"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update general session management settings.",
                "tags": [
                    "/session"
                ]
            }
        },
        "/sp/adapters": {
            "get": {
                "description": "",
                "operationId": "getSpAdapters",
                "parameters": [
                    {
                        "description": "Page number to retrieve.",
                        "format": "int32",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of adapters per page.",
                        "format": "int32",
                        "in": "query",
                        "name": "numberPerPage",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Filter criteria limits the SP adapters that are returned to only those that match it. The filter criteria is compared to the SP adapter instance name and ID fields. The comparison is a case-insensitive partial match. No additional pattern based matching is supported.",
                        "in": "query",
                        "name": "filter",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/SpAdapters"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get the list of configured SP adapter instances.",
                "tags": [
                    "/sp/adapters"
                ]
            },
            "post": {
                "description": "Create a new SP adapter instance. If the SP adapter is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
                "operationId": "createSpAdapter",
                "parameters": [
                    {
                        "description": "Configuration for the SP adapter instance.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SpAdapter"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Adapter created.",
                        "schema": {
                            "$ref": "#/definitions/SpAdapter"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a new SP adapter instance.",
                "tags": [
                    "/sp/adapters"
                ]
            }
        },
        "/sp/adapters/descriptors": {
            "get": {
                "description": "",
                "operationId": "getSpAdapterDescriptors",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/SpAdapterDescriptors"
                        }
                    }
                },
                "summary": "Get the list of available SP adapter descriptors.",
                "tags": [
                    "/sp/adapters"
                ]
            }
        },
        "/sp/adapters/descriptors/{id}": {
            "get": {
                "description": "Get the description of an SP adapter plugin by ID. A 404 status code is returned for nonexistent IDs.",
                "operationId": "getSpAdapterDescriptorsById",
                "parameters": [
                    {
                        "description": "ID of SP adapter descriptor to fetch.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/SpAdapterDescriptor"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get the description of an SP adapter plugin by ID.",
                "tags": [
                    "/sp/adapters"
                ]
            }
        },
        "/sp/adapters/urlMappings": {
            "get": {
                "deprecated": true,
                "description": "",
                "operationId": "getUrlMappings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/SpAdapterUrlMappings"
                        }
                    }
                },
                "summary": "(Deprecated) List the mappings between URLs and adapter instances.",
                "tags": [
                    "/sp/adapters"
                ]
            },
            "put": {
                "deprecated": true,
                "description": "",
                "operationId": "updateUrlMappings",
                "parameters": [
                    {
                        "description": "The SP adapter URL mappings to update.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SpAdapterUrlMappings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Mapping updated.",
                        "schema": {
                            "$ref": "#/definitions/SpAdapterUrlMappings"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "(Deprecated) Update the mappings between URLs and adapters instances.",
                "tags": [
                    "/sp/adapters"
                ]
            }
        },
        "/sp/adapters/{id}": {
            "delete": {
                "description": "Delete an SP adapter instance with the specified ID. A 404 status code is returned for nonexistent IDs. Note: Only adapters not in use can be deleted. If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
                "operationId": "deleteSpAdapter",
                "parameters": [
                    {
                        "description": "ID of SP adapter instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Adapter deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Resource is in use and cannot be deleted.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete an SP adapter instance.",
                "tags": [
                    "/sp/adapters"
                ]
            },
            "get": {
                "description": "Get the configured SP adapter instance with the specified ID. A 404 status code is returned for nonexistent IDs.",
                "operationId": "getSpAdapter",
                "parameters": [
                    {
                        "description": "ID of SP adapter instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/SpAdapter"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Find an SP adapter instance by ID.",
                "tags": [
                    "/sp/adapters"
                ]
            },
            "put": {
                "description": "Update an SP adapter instance.If the SP adapter is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
                "operationId": "updateSpAdapter",
                "parameters": [
                    {
                        "description": "ID of SP adapter instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for the SP adapter instance.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SpAdapter"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Adapter updated.",
                        "schema": {
                            "$ref": "#/definitions/SpAdapter"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update an SP adapter instance.",
                "tags": [
                    "/sp/adapters"
                ]
            }
        },
        "/sp/adapters/{id}/actions": {
            "get": {
                "description": "List the actions for an SP adapter instance. A 404 status code is returned for nonexistent IDs.",
                "operationId": "getActions",
                "parameters": [
                    {
                        "description": "ID of the SP adapter instance to which this action belongs to.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/Actions"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "List the actions for an SP adapter instance.",
                "tags": [
                    "/sp/adapters"
                ]
            }
        },
        "/sp/adapters/{id}/actions/{actionId}": {
            "get": {
                "description": "Find an SP adapter instance's action by ID. A 404 status code is returned for nonexistent IDs.",
                "operationId": "getAction",
                "parameters": [
                    {
                        "description": "ID of the SP adapter instance to which this action belongs to.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "ID of the action.",
                        "in": "path",
                        "name": "actionId",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/Action"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Find an SP adapter instance's action by ID.",
                "tags": [
                    "/sp/adapters"
                ]
            }
        },
        "/sp/adapters/{id}/actions/{actionId}/invokeAction": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Invokes an action for an SP adapter instance. A 404 status code is returned for nonexistent IDs. If the action produces a download file, the file will be returned directly in the response. Otherwise an ActionResult will be returned.",
                "operationId": "invokeActionWithOptions",
                "parameters": [
                    {
                        "description": "ID of the SP adapter instance to which this action belongs to.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "ID of the action.",
                        "in": "path",
                        "name": "actionId",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Action options for action invoked.",
                        "in": "body",
                        "name": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ActionOptions"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Action invoked on adapter.",
                        "schema": {
                            "$ref": "#/definitions/ActionResult"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Invokes an action for an SP adapter instance.",
                "tags": [
                    "/sp/adapters"
                ]
            }
        },
        "/sp/authenticationPolicyContractMappings": {
            "get": {
                "description": "",
                "operationId": "getApcToSpAdapterMappings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/ApcToSpAdapterMappings"
                        }
                    }
                },
                "summary": "Get the list of APC-to-SP Adapter Mappings.",
                "tags": [
                    "/sp/authenticationPolicyContractMappings"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "createApcToSpAdapterMapping",
                "parameters": [
                    {
                        "description": "Configuration for a new APC-to-SP Adapter Mapping.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ApcToSpAdapterMapping"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Authentication policy contract-to-SP adapter mapping created.",
                        "schema": {
                            "$ref": "#/definitions/ApcToSpAdapterMapping"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a new APC-to-SP Adapter Mapping.",
                "tags": [
                    "/sp/authenticationPolicyContractMappings"
                ]
            }
        },
        "/sp/authenticationPolicyContractMappings/{id}": {
            "delete": {
                "description": "",
                "operationId": "deleteApcToSpAdapterMappingById",
                "parameters": [
                    {
                        "description": "ID of APC-to-SP Adapter Mapping to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Authentication policy contract-to-SP adapter mapping deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete an APC-to-SP Adapter Mapping.",
                "tags": [
                    "/sp/authenticationPolicyContractMappings"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getApcToSpAdapterMappingById",
                "parameters": [
                    {
                        "description": "ID of APC-to-SP Adapter Mapping to fetch.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/ApcToSpAdapterMapping"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get an APC-to-SP Adapter Mapping.",
                "tags": [
                    "/sp/authenticationPolicyContractMappings"
                ]
            },
            "put": {
                "description": "",
                "operationId": "updateApcToSpAdapterMappingById",
                "parameters": [
                    {
                        "description": "ID of APC-to-SP Adapter Mapping to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for updated APC-to-SP Adapter Mapping.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ApcToSpAdapterMapping"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Authentication policy contract-to-SP adapter mapping updated.",
                        "schema": {
                            "$ref": "#/definitions/ApcToSpAdapterMapping"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update an APC-to-SP Adapter Mapping.",
                "tags": [
                    "/sp/authenticationPolicyContractMappings"
                ]
            }
        },
        "/sp/defaultUrls": {
            "get": {
                "description": "",
                "operationId": "getDefaultUrls",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/SpDefaultUrls"
                        }
                    }
                },
                "summary": "Gets the SP Default URLs. These are Values that affect the user's experience when executing SP-initiated SSO operations.",
                "tags": [
                    "/sp/defaultUrls"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateDefaultUrls",
                "parameters": [
                    {
                        "description": "Configuration for the IDP Default URL settings.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SpDefaultUrls"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Default URL updated.",
                        "schema": {
                            "$ref": "#/definitions/SpDefaultUrls"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update the SP Default URLs. Enter values that affect the user's experience when executing SP-initiated SSO operations.",
                "tags": [
                    "/sp/defaultUrls"
                ]
            }
        },
        "/sp/idpConnections": {
            "get": {
                "description": "Get a list of all the OIDC, WS-Trust, WS-Fed, SAML1.0, SAML1.1 and SAML 2.0 IdP connections.",
                "operationId": "getConnections",
                "parameters": [
                    {
                        "description": "Entity ID of the connection to fetch. (case-sensitive)",
                        "in": "query",
                        "name": "entityId",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Page number to retrieve.",
                        "format": "int32",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of connections per page.",
                        "format": "int32",
                        "in": "query",
                        "name": "numberPerPage",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Filter criteria limits the IdP connections that are returned to only those that match it. The filter criteria is compared to the IdP connection name and partner entity ID fields. The comparison is a case-insensitive partial match. No additional pattern based matching is supported.",
                        "in": "query",
                        "name": "filter",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/IdpConnections"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get list of IdP connections.",
                "tags": [
                    "/sp/idpConnections"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "Create a new IdP connection. If the IdP connection is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
                "operationId": "createConnection",
                "parameters": [
                    {
                        "description": "Configuration for new connection.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IdpConnection"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Connection created.",
                        "schema": {
                            "$ref": "#/definitions/IdpConnection"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a new IdP connection.",
                "tags": [
                    "/sp/idpConnections"
                ]
            }
        },
        "/sp/idpConnections/{id}": {
            "delete": {
                "description": "Delete an IdP connection with the specified ID. A 404 status code is returned for nonexistent IDs. Note: Only inactive connections can be deleted. If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
                "operationId": "deleteConnection",
                "parameters": [
                    {
                        "description": "ID of IdP Connection to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Connection deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Resource is in use and cannot be deleted.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete an IdP connection.",
                "tags": [
                    "/sp/idpConnections"
                ]
            },
            "get": {
                "description": "Get a SAML 2.0 IdP connection with the specified ID. A 404 status code is returned for nonexistent IDs.",
                "operationId": "getConnection",
                "parameters": [
                    {
                        "description": "ID of IdP Connection to fetch.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/IdpConnection"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Find IdP connection by ID.",
                "tags": [
                    "/sp/idpConnections"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "Update an IdP connection with the matching ID. If the IdP connection is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected. Note: A 404 status code is returned for nonexistent IDs.",
                "operationId": "updateConnection",
                "parameters": [
                    {
                        "description": "ID of IdP Connection to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for updated connection.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/IdpConnection"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Connection updated.",
                        "schema": {
                            "$ref": "#/definitions/IdpConnection"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update an IdP connection.",
                "tags": [
                    "/sp/idpConnections"
                ]
            }
        },
        "/sp/idpConnections/{id}/credentials/certs": {
            "get": {
                "description": "",
                "operationId": "getConnectionCerts",
                "parameters": [
                    {
                        "description": "ID of the IdP Connection.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/ConnectionCerts"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get the IdP connection's certificates.",
                "tags": [
                    "/sp/idpConnections"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "If the certificate's activeVerificationCert flag is set to true, it will become the connection's primary verification certificate.",
                "operationId": "addConnectionCert",
                "parameters": [
                    {
                        "description": "ID of the IdP Connection to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for a verification certificate.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConnectionCert"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Connection Certificate added.",
                        "schema": {
                            "$ref": "#/definitions/ConnectionCert"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Add a new IdP connection certificate.",
                "tags": [
                    "/sp/idpConnections"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateConnectionCerts",
                "parameters": [
                    {
                        "description": "ID of the IdP Connection to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for a verification certificates.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConnectionCerts"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Connection updated.",
                        "schema": {
                            "$ref": "#/definitions/ConnectionCerts"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update the IdP connection's certificates.",
                "tags": [
                    "/sp/idpConnections"
                ]
            }
        },
        "/sp/idpConnections/{id}/credentials/decryptionKeys": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "getDecryptionKeys",
                "parameters": [
                    {
                        "description": "ID of the IdP Connection to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/DecryptionKeys"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get the decryption keys of an IdP connection.",
                "tags": [
                    "/sp/idpConnections"
                ]
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "updateDecryptionKeys",
                "parameters": [
                    {
                        "description": "ID of the IdP Connection to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for decryption keys.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DecryptionKeys"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Connection updated.",
                        "schema": {
                            "$ref": "#/definitions/DecryptionKeys"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Updating the IdP connection's decryption keys.",
                "tags": [
                    "/sp/idpConnections"
                ]
            }
        },
        "/sp/idpConnections/{id}/credentials/signingSettings": {
            "get": {
                "description": "",
                "operationId": "getSigningSettings",
                "parameters": [
                    {
                        "description": "ID of the IdP Connection.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/SigningSettings"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get the IdP connection's signature settings.",
                "tags": [
                    "/sp/idpConnections"
                ]
            },
            "put": {
                "description": "",
                "operationId": "updateSigningSettings",
                "parameters": [
                    {
                        "description": "ID of the IdP Connection to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Signature settings.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SigningSettings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Connection updated.",
                        "schema": {
                            "$ref": "#/definitions/SigningSettings"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update the IdP connection's signature settings.",
                "tags": [
                    "/sp/idpConnections"
                ]
            }
        },
        "/sp/targetUrlMappings": {
            "get": {
                "description": "",
                "operationId": "getUrlMappings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/SpUrlMappings"
                        }
                    }
                },
                "summary": "List the mappings between URLs and adapter or connection instances.",
                "tags": [
                    "/sp/targetUrlMappings"
                ]
            },
            "put": {
                "description": "",
                "operationId": "updateUrlMappings",
                "parameters": [
                    {
                        "description": "The SP adapter URL mappings to update.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SpUrlMappings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Mapping updated.",
                        "schema": {
                            "$ref": "#/definitions/SpUrlMappings"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update the mappings between URLs and adapters or connections instances.",
                "tags": [
                    "/sp/targetUrlMappings"
                ]
            }
        },
        "/sp/tokenGenerators": {
            "get": {
                "description": "",
                "operationId": "getTokenGenerators",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/TokenGenerators"
                        }
                    }
                },
                "summary": "Get the list of token generator instances.",
                "tags": [
                    "/sp/tokenGenerators"
                ]
            },
            "post": {
                "description": "Create a new token generator instance. If the token generator is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
                "operationId": "createTokenGenerator",
                "parameters": [
                    {
                        "description": "Configuration for a token generator instance.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TokenGenerator"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Token generator created.",
                        "schema": {
                            "$ref": "#/definitions/TokenGenerator"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a new token generator instance.",
                "tags": [
                    "/sp/tokenGenerators"
                ]
            }
        },
        "/sp/tokenGenerators/descriptors": {
            "get": {
                "description": "",
                "operationId": "getTokenGeneratorDescriptors",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/TokenGeneratorDescriptors"
                        }
                    }
                },
                "summary": "Get the list of available token generators.",
                "tags": [
                    "/sp/tokenGenerators"
                ]
            }
        },
        "/sp/tokenGenerators/descriptors/{id}": {
            "get": {
                "description": "Get the description of a token generator plugin by ID. A 404 status code is returned for nonexistent IDs.",
                "operationId": "getTokenGeneratorDescriptorsById",
                "parameters": [
                    {
                        "description": "ID of a token generator descriptor to fetch.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/TokenGeneratorDescriptor"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get the description of a token generator plugin by ID.",
                "tags": [
                    "/sp/tokenGenerators"
                ]
            }
        },
        "/sp/tokenGenerators/{id}": {
            "delete": {
                "description": "Delete a token generator instance with the specified ID. A 404 status code is returned for nonexistent IDs. Note: Only token generators not in use can be deleted. If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
                "operationId": "deleteTokenGenerator",
                "parameters": [
                    {
                        "description": "ID of the token generator instance to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Token generator deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Resource is in use and cannot be deleted.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete a token generator instance.",
                "tags": [
                    "/sp/tokenGenerators"
                ]
            },
            "get": {
                "description": "Get the configured token generator instance with the specified ID. A 404 status code is returned for nonexistent IDs.",
                "operationId": "getTokenGenerator",
                "parameters": [
                    {
                        "description": "ID of the token generator instance to fetch.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/TokenGenerator"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Find a token generator instance by ID.",
                "tags": [
                    "/sp/tokenGenerators"
                ]
            },
            "put": {
                "description": "Update a token generator instance. If the token generator is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
                "operationId": "updateTokenGenerator",
                "parameters": [
                    {
                        "description": "ID of the token generator instance.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for the updated token generator instance.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TokenGenerator"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Token generator updated.",
                        "schema": {
                            "$ref": "#/definitions/TokenGenerator"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update a token generator instance.",
                "tags": [
                    "/sp/tokenGenerators"
                ]
            }
        },
        "/tokenProcessorToTokenGeneratorMappings": {
            "get": {
                "description": "",
                "operationId": "getTokenToTokenMappings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/TokenToTokenMappings"
                        }
                    }
                },
                "summary": "Get the list of Token Processor to Token Generator Mappings.",
                "tags": [
                    "/tokenProcessorToTokenGeneratorMappings"
                ]
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "description": "",
                "operationId": "createTokenToTokenMapping",
                "parameters": [
                    {
                        "description": "Configuration for a new Token Processor to Token Generator Mapping.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TokenToTokenMapping"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Token Processor to Token Generator mapping created.",
                        "schema": {
                            "$ref": "#/definitions/TokenToTokenMapping"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Create a new Token Processor to Token Generator Mapping.",
                "tags": [
                    "/tokenProcessorToTokenGeneratorMappings"
                ]
            }
        },
        "/tokenProcessorToTokenGeneratorMappings/{id}": {
            "delete": {
                "description": "",
                "operationId": "deleteTokenToTokenMappingById",
                "parameters": [
                    {
                        "description": "ID of Token Processor to Token Generator Mapping to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "204": {
                        "description": "Token Processor to Token Generator mapping deleted."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Delete a Token Processor to Token Generator Mapping.",
                "tags": [
                    "/tokenProcessorToTokenGeneratorMappings"
                ]
            },
            "get": {
                "description": "",
                "operationId": "getTokenToTokenMappingById",
                "parameters": [
                    {
                        "description": "ID of Token Processor to Token Generator Mapping to fetch.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/TokenToTokenMapping"
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Get a Token Processor to Token Generator Mapping.",
                "tags": [
                    "/tokenProcessorToTokenGeneratorMappings"
                ]
            },
            "put": {
                "description": "",
                "operationId": "updateTokenToTokenMappingById",
                "parameters": [
                    {
                        "description": "ID of Token Processor to Token Generator Mapping to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Configuration for updated Token Processor to Token Generator Mapping.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TokenToTokenMapping"
                        }
                    },
                    {
                        "default": false,
                        "description": "External validation will be bypassed when set to true. Default to false.",
                        "in": "header",
                        "name": "X-BypassExternalValidation",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Token Processor to Token Generator mapping updated.",
                        "schema": {
                            "$ref": "#/definitions/TokenToTokenMapping"
                        }
                    },
                    "400": {
                        "description": "The request was improperly formatted or contained invalid fields."
                    },
                    "404": {
                        "description": "Resource not found.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update a Token Processor to Token Generator Mapping.",
                "tags": [
                    "/tokenProcessorToTokenGeneratorMappings"
                ]
            }
        },
        "/version": {
            "get": {
                "description": "",
                "operationId": "getVersion",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/Version"
                        }
                    }
                },
                "summary": "Gets the server version.",
                "tags": [
                    "/version"
                ]
            }
        },
        "/virtualHostNames": {
            "get": {
                "description": "",
                "operationId": "getVirtualHostNamesSettings",
                "parameters": [],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/VirtualHostNameSettings"
                        }
                    }
                },
                "summary": "Retrieve virtual host names settings.",
                "tags": [
                    "/virtualHostNames"
                ]
            },
            "put": {
                "description": "",
                "operationId": "updateVirtualHostNamesSettings",
                "parameters": [
                    {
                        "description": "Virtual host names settings.",
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VirtualHostNameSettings"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Virtual host names settings updated.",
                        "schema": {
                            "$ref": "#/definitions/VirtualHostNameSettings"
                        }
                    },
                    "422": {
                        "description": "Validation error(s) occurred.",
                        "schema": {
                            "$ref": "#/definitions/ApiResult"
                        }
                    }
                },
                "summary": "Update virtual host names settings.",
                "tags": [
                    "/virtualHostNames"
                ]
            }
        }
    },
    "schemes": [
        "https"
    ],
    "swagger": "2.0",
    "tags": [
        {
            "name": "/oauth/accessTokenManagers"
        },
        {
            "name": "/oauth/accessTokenMappings"
        },
        {
            "name": "/administrativeAccounts"
        },
        {
            "name": "/sp/authenticationPolicyContractMappings"
        },
        {
            "name": "/authenticationApi"
        },
        {
            "name": "/authenticationPolicies"
        },
        {
            "name": "/authenticationPolicyContracts"
        },
        {
            "name": "/authenticationSelectors"
        },
        {
            "name": "/session"
        },
        {
            "name": "/oauth/authServerSettings"
        },
        {
            "name": "/bulk"
        },
        {
            "name": "/certificates/groups"
        },
        {
            "name": "/certificates/revocation"
        },
        {
            "name": "/cluster"
        },
        {
            "name": "/configArchive"
        },
        {
            "name": "/configStore"
        },
        {
            "name": "/configurationEncryptionKeys"
        },
        {
            "name": "/connectionMetadata"
        },
        {
            "name": "/idp/connectors"
        },
        {
            "name": "/dataStores"
        },
        {
            "name": "/extendedProperties"
        },
        {
            "name": "/identityStoreProvisioners"
        },
        {
            "name": "/idp/adapters"
        },
        {
            "name": "/sp/idpConnections"
        },
        {
            "name": "/idp/defaultUrls"
        },
        {
            "name": "/idpToSpAdapterMapping"
        },
        {
            "name": "/incomingProxySettings"
        },
        {
            "name": "/kerberos/realms"
        },
        {
            "name": "/license"
        },
        {
            "name": "/localIdentity/identityProfiles"
        },
        {
            "name": "/metadataUrls"
        },
        {
            "name": "/notificationPublishers"
        },
        {
            "name": "/oauth/authenticationPolicyContractMappings"
        },
        {
            "name": "/oauth/cibaServerPolicy"
        },
        {
            "name": "/oauth/clients"
        },
        {
            "name": "/oauth/clientSettings"
        },
        {
            "name": "/oauth/clientRegistrationPolicies"
        },
        {
            "name": "/oauth/idpAdapterMappings"
        },
        {
            "name": "/oauth/outOfBandAuthPlugins"
        },
        {
            "name": "/keyPairs/oauthOpenIdConnect"
        },
        {
            "name": "/oauth/resourceOwnerCredentialsMappings"
        },
        {
            "name": "/oauth/openIdConnect"
        },
        {
            "name": "/passwordCredentialValidators"
        },
        {
            "name": "/pingOneConnections"
        },
        {
            "name": "/pingOneForEnterprise"
        },
        {
            "name": "/protocolMetadata"
        },
        {
            "name": "/redirectValidation"
        },
        {
            "name": "/keyPairs"
        },
        {
            "name": "/secretManagers"
        },
        {
            "name": "/serverSettings"
        },
        {
            "name": "/serviceAuthentication"
        },
        {
            "name": "/keyPairs/signing"
        },
        {
            "name": "/sp/adapters"
        },
        {
            "name": "/idp/spConnections"
        },
        {
            "name": "/sp/defaultUrls"
        },
        {
            "name": "/sp/targetUrlMappings"
        },
        {
            "name": "/keyPairs/sslClient"
        },
        {
            "name": "/keyPairs/sslServer"
        },
        {
            "name": "/idp/stsRequestParametersContracts"
        },
        {
            "name": "/sp/tokenGenerators"
        },
        {
            "name": "/idp/tokenProcessors"
        },
        {
            "name": "/tokenProcessorToTokenGeneratorMappings"
        },
        {
            "name": "/certificates/ca"
        },
        {
            "name": "/version"
        },
        {
            "name": "/virtualHostNames"
        },
        {
            "name": "/oauth/issuers"
        },
        {
            "name": "/oauth/tokenExchange/tokenGeneratorMappings"
        },
        {
            "name": "/oauth/tokenExchange/generator"
        },
        {
            "name": "/oauth/tokenExchange/processor"
        }
    ]
}