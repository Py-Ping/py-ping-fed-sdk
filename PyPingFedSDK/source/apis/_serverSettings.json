{
    "apiVersion": "v1",
    "apis": [
        {
            "operations": [
                {
                    "method": "GET",
                    "nickname": "getServerSettings",
                    "notes": "",
                    "parameters": [],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "Success."
                        }
                    ],
                    "summary": "Gets the server settings",
                    "type": "ServerSettings"
                },
                {
                    "consumes": [
                        "application/json"
                    ],
                    "method": "PUT",
                    "nickname": "updateServerSettings",
                    "notes": "",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "description": "Configuration for server settings.",
                            "name": "body",
                            "paramType": "body",
                            "required": true,
                            "type": "ServerSettings"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "Server Settings updated."
                        },
                        {
                            "code": 400,
                            "message": "The request was improperly formatted or contained invalid fields."
                        },
                        {
                            "code": 404,
                            "message": "Resource not found."
                        },
                        {
                            "code": 422,
                            "message": "Validation error(s) occurred.",
                            "responseModel": "ApiResult"
                        }
                    ],
                    "summary": "Update the server settings.",
                    "type": "ServerSettings"
                }
            ],
            "path": "/serverSettings"
        },
        {
            "operations": [
                {
                    "method": "GET",
                    "nickname": "getNotificationSettings",
                    "notes": "",
                    "parameters": [],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "Success."
                        }
                    ],
                    "summary": "Gets the notification settings",
                    "type": "NotificationSettings"
                },
                {
                    "consumes": [
                        "application/json"
                    ],
                    "method": "PUT",
                    "nickname": "updateNotificationSettings",
                    "notes": "",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "description": "Notification settings.",
                            "name": "body",
                            "paramType": "body",
                            "required": true,
                            "type": "NotificationSettings"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "Notifications updated."
                        },
                        {
                            "code": 400,
                            "message": "The request was improperly formatted or contained invalid fields."
                        },
                        {
                            "code": 422,
                            "message": "Validation error(s) occurred.",
                            "responseModel": "ApiResult"
                        }
                    ],
                    "summary": "Update the notification settings.",
                    "type": "NotificationSettings"
                }
            ],
            "path": "/serverSettings/notifications"
        },
        {
            "operations": [
                {
                    "deprecated": "true",
                    "method": "GET",
                    "nickname": "getEmailServerSettings",
                    "notes": "",
                    "parameters": [],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "Success."
                        },
                        {
                            "code": 404,
                            "message": "Resource not found."
                        }
                    ],
                    "summary": "(Deprecated) Gets the email server settings",
                    "type": "EmailServerSettings"
                },
                {
                    "consumes": [
                        "application/json"
                    ],
                    "deprecated": "true",
                    "method": "PUT",
                    "nickname": "updateEmailServerSettings",
                    "notes": "(Deprecated) If the validationEmail is provided, an email will be sent to the validationEmail using the provided email server settings.  The settings will be saved if the test email is successfully sent.<br>",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "description": "Configuration for email server settings.",
                            "name": "body",
                            "paramType": "body",
                            "required": true,
                            "type": "EmailServerSettings"
                        },
                        {
                            "allowMultiple": false,
                            "description": "The email address used to validate the email server settings.",
                            "name": "validationEmail",
                            "paramType": "query",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "allowMultiple": false,
                            "description": "Only validation will be performed.  Email server settings will not be saved.",
                            "name": "validateOnly",
                            "paramType": "query",
                            "required": false,
                            "type": "boolean"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "Email Server updated."
                        },
                        {
                            "code": 400,
                            "message": "The request was improperly formatted or contained invalid fields."
                        },
                        {
                            "code": 404,
                            "message": "Resource not found."
                        },
                        {
                            "code": 422,
                            "message": "Validation error(s) occurred.",
                            "responseModel": "ApiResult"
                        }
                    ],
                    "summary": "(Deprecated) Update the email server settings",
                    "type": "EmailServerSettings"
                }
            ],
            "path": "/serverSettings/emailServer"
        },
        {
            "operations": [
                {
                    "method": "GET",
                    "nickname": "getCaptchaSettings",
                    "notes": "",
                    "parameters": [],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "Success."
                        }
                    ],
                    "summary": "Gets the CAPTCHA settings.",
                    "type": "CaptchaSettings"
                },
                {
                    "consumes": [
                        "application/json"
                    ],
                    "method": "PUT",
                    "nickname": "updateCaptchaSettings",
                    "notes": "",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "description": "CAPTCHA settings.",
                            "name": "body",
                            "paramType": "body",
                            "required": true,
                            "type": "CaptchaSettings"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "Captcha settings updated."
                        },
                        {
                            "code": 400,
                            "message": "The request was improperly formatted or contained invalid fields."
                        },
                        {
                            "code": 422,
                            "message": "Validation error(s) occurred.",
                            "responseModel": "ApiResult"
                        }
                    ],
                    "summary": "Update the CAPTCHA settings.",
                    "type": "CaptchaSettings"
                }
            ],
            "path": "/serverSettings/captchaSettings"
        },
        {
            "operations": [
                {
                    "method": "GET",
                    "nickname": "getSystemKeys",
                    "notes": "For each key, only encryptedKeyData and not keyData will be returned",
                    "parameters": [],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "Success."
                        }
                    ],
                    "summary": "Get the system keys.",
                    "type": "SystemKeys"
                },
                {
                    "method": "PUT",
                    "nickname": "updateSystemKeys",
                    "notes": "For each key, either encryptedKeyData or keyData must be provided.",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "description": "System keys.",
                            "name": "body",
                            "paramType": "body",
                            "required": true,
                            "type": "SystemKeys"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "System keys updated."
                        },
                        {
                            "code": 400,
                            "message": "The request was improperly formatted or contained invalid fields."
                        },
                        {
                            "code": 422,
                            "message": "Validation error(s) occurred.",
                            "responseModel": "ApiResult"
                        }
                    ],
                    "summary": "Update the system keys.",
                    "type": "SystemKeys"
                }
            ],
            "path": "/serverSettings/systemKeys"
        },
        {
            "operations": [
                {
                    "method": "POST",
                    "nickname": "rotateSystemKeys",
                    "notes": "Upon rotation, previous key will be replaced by the current key, the current key will be replaced by the pending key, while the newly generated key replaces the pending key. Periodic rotation can ensure optimal security of your environment.",
                    "parameters": [],
                    "responseMessages": [
                        {
                            "code": 201,
                            "message": "System Keys rotated."
                        },
                        {
                            "code": 400,
                            "message": "The request was improperly formatted or contained invalid fields."
                        },
                        {
                            "code": 422,
                            "message": "Validation error(s) occurred."
                        }
                    ],
                    "summary": "Rotate the system keys.",
                    "type": "SystemKeys"
                }
            ],
            "path": "/serverSettings/systemKeys/rotate"
        },
        {
            "operations": [
                {
                    "method": "GET",
                    "nickname": "getOutBoundProvisioningSettings",
                    "notes": "Get the settings for database used internally to facilitate outbound provisioning to service providers.",
                    "parameters": [],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "Success."
                        }
                    ],
                    "summary": "Get database used for outbound provisioning",
                    "type": "OutboundProvisionDatabase"
                },
                {
                    "method": "PUT",
                    "nickname": "updateOutBoundProvisioningSettings",
                    "notes": "Update the settings for database used internally to facilitate outbound provisioning to service providers.",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "description": "The Outbound Provision Database settings.",
                            "name": "body",
                            "paramType": "body",
                            "required": true,
                            "type": "OutboundProvisionDatabase"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "Database updated for outbound provisioning."
                        },
                        {
                            "code": 422,
                            "message": "Validation error(s) occurred."
                        }
                    ],
                    "summary": "Update database used for outbound provisioning",
                    "type": "OutboundProvisionDatabase"
                }
            ],
            "path": "/serverSettings/outboundProvisioning"
        }
    ],
    "basePath": "https://localhost:9999/pf-admin-api/v1",
    "models": {
        "ApiResult": {
            "description": "Details on the result of the operation.",
            "id": "ApiResult",
            "properties": {
                "developerMessage": {
                    "description": "Developer-oriented error message, if available.",
                    "type": "string"
                },
                "message": {
                    "description": "Success or error message.",
                    "type": "string"
                },
                "resultId": {
                    "description": "Result identifier.",
                    "type": "string"
                },
                "validationErrors": {
                    "description": "List of validation errors, if any.",
                    "items": {
                        "$ref": "ValidationError"
                    },
                    "type": "array"
                }
            }
        },
        "BaseProviderRole": {
            "description": "Base Provider Role.",
            "id": "BaseProviderRole",
            "properties": {
                "enable": {
                    "type": "boolean"
                },
                "enableSaml10": {
                    "description": "Enable SAML 1.0.",
                    "type": "boolean"
                },
                "enableSaml11": {
                    "description": "Enable SAML 1.1.",
                    "type": "boolean"
                },
                "enableWsFed": {
                    "description": "Enable WS Federation.",
                    "type": "boolean"
                },
                "enableWsTrust": {
                    "description": "Enable WS Trust.",
                    "type": "boolean"
                }
            },
            "subTypes": [
                "IdpRole",
                "SpRole"
            ]
        },
        "CaptchaSettings": {
            "description": "Settings for CAPTCHA.",
            "id": "CaptchaSettings",
            "properties": {
                "encryptedSecretKey": {
                    "description": "The encrypted secret key for reCAPTCHA. If you do not want to update the stored value, this attribute should be passed back unchanged.",
                    "type": "string"
                },
                "secretKey": {
                    "description": "Secret key for reCAPTCHA. GETs will not return this attribute. To update this field, specify the new value in this attribute.",
                    "type": "string"
                },
                "siteKey": {
                    "description": "Site key for reCAPTCHA.",
                    "type": "string"
                }
            }
        },
        "CertificateExpirationNotificationSettings": {
            "description": "Notification settings for certificate expiration events.",
            "id": "CertificateExpirationNotificationSettings",
            "properties": {
                "emailAddress": {
                    "description": "Email address where notifications are sent.",
                    "type": "string"
                },
                "finalWarningPeriod": {
                    "description": "Time before certificate expiration when final warning is sent (in days).",
                    "format": "int32",
                    "type": "integer"
                },
                "initialWarningPeriod": {
                    "description": "Time before certificate expiration when initial warning is sent (in days).",
                    "format": "int32",
                    "type": "integer"
                },
                "notificationPublisherRef": {
                    "$ref": "ResourceLink",
                    "description": "Reference to the associated notification publisher."
                }
            },
            "required": [
                "emailAddress",
                "finalWarningPeriod"
            ]
        },
        "ContactInfo": {
            "description": "Contact information.",
            "id": "ContactInfo",
            "properties": {
                "company": {
                    "description": "Company name.",
                    "type": "string"
                },
                "email": {
                    "description": "Contact email address.",
                    "type": "string"
                },
                "firstName": {
                    "description": "Contact first name.",
                    "type": "string"
                },
                "lastName": {
                    "description": "Contact last name.",
                    "type": "string"
                },
                "phone": {
                    "description": "Contact phone number.",
                    "type": "string"
                }
            }
        },
        "EmailServerSettings": {
            "description": "Email server configuration settings.",
            "id": "EmailServerSettings",
            "properties": {
                "emailServer": {
                    "description": "The IP address or hostname of your email server.",
                    "type": "string"
                },
                "enableUtf8MessageHeaders": {
                    "description": "Only set this flag to true if the email server supports UTF-8 characters in message headers. Otherwise, this is defaulted to false.",
                    "type": "boolean"
                },
                "encryptedPassword": {
                    "description": "For GET requests, this field contains the encrypted password, if one exists.  For POST and PUT requests, if you wish to reuse the existing password, this field should be passed back unchanged.",
                    "type": "string"
                },
                "password": {
                    "description": "User password.  To update the password, specify the plaintext value in this field.  This field will not be populated for GET requests.",
                    "type": "string"
                },
                "port": {
                    "description": "The SMTP port on your email server. Allowable values: 1 - 65535. The default value is 25.",
                    "format": "int32",
                    "type": "integer"
                },
                "retryAttempts": {
                    "description": "The number of times PingFederate tries to resend an email upon unsuccessful delivery. The default value is 2.",
                    "format": "int32",
                    "type": "integer"
                },
                "retryDelay": {
                    "description": "The number of minutes PingFederate waits before the next retry attempt. The default value is 2.",
                    "format": "int32",
                    "type": "integer"
                },
                "sourceAddr": {
                    "description": "The email address that appears in the 'From' header line in email messages generated by PingFederate.  The address must be in valid format but need not be set up on your system.",
                    "type": "string"
                },
                "sslPort": {
                    "description": "The secure SMTP port on your email server. This field is not active unless Use SSL is enabled. Allowable values: 1 - 65535. The default value is  465.",
                    "format": "int32",
                    "type": "integer"
                },
                "timeout": {
                    "description": "The amount of time in seconds that PingFederate will wait before it times out connecting to the SMTP server. Allowable values: 0 - 3600. The default value is 30.",
                    "format": "int32",
                    "type": "integer"
                },
                "useDebugging": {
                    "description": "Turns on detailed error messages for the PingFederate server log to help troubleshoot any problems.",
                    "type": "boolean"
                },
                "useSSL": {
                    "description": "Requires the use of SSL/TLS on the port specified by 'sslPort'. If this option is enabled, it overrides the 'useTLS' option.",
                    "type": "boolean"
                },
                "useTLS": {
                    "description": "Requires the use of the STARTTLS protocol on the port specified by 'port'.",
                    "type": "boolean"
                },
                "username": {
                    "description": "Authorized email username. Required if the password is provided.",
                    "type": "string"
                },
                "verifyHostname": {
                    "description": "If useSSL or useTLS is enabled, this flag determines whether the email server hostname is verified against the server's SMTPS certificate.",
                    "type": "boolean"
                }
            },
            "required": [
                "sourceAddr",
                "emailServer",
                "port"
            ]
        },
        "FederationInfo": {
            "description": "Federation Info.",
            "id": "FederationInfo",
            "properties": {
                "autoConnectEntityId": {
                    "description": "This property has been deprecated and no longer used",
                    "type": "string"
                },
                "baseUrl": {
                    "description": "The fully qualified host name, port, and path (if applicable) on which the PingFederate server runs.",
                    "type": "string"
                },
                "saml1xIssuerId": {
                    "description": "This ID identifies your federation server for SAML 1.x transactions. As with SAML 2.0, it is usually defined as an organization's URL or a DNS address. The SourceID used for artifact resolution is derived from this ID using SHA1.",
                    "type": "string"
                },
                "saml1xSourceId": {
                    "description": "If supplied, the Source ID value entered here is used for SAML 1.x, instead of being derived from the SAML 1.x Issuer/Audience.",
                    "type": "string"
                },
                "saml2EntityId": {
                    "description": "This ID defines your organization as the entity operating the server for SAML 2.0 transactions. It is usually defined as an organization's URL or a DNS address; for example: pingidentity.com. The SAML SourceID used for artifact resolution is derived from this ID using SHA1.",
                    "type": "string"
                },
                "wsfedRealm": {
                    "description": "The URI of the realm associated with the PingFederate server. A realm represents a single unit of security administration or trust.",
                    "type": "string"
                }
            }
        },
        "IdpRole": {
            "description": "This property has been deprecated and is no longer used. All Roles and protocols are always enabled.",
            "extends": "BaseProviderRole",
            "id": "IdpRole",
            "properties": {
                "enable": {
                    "description": "Enable Identity Provider Role.",
                    "type": "boolean"
                },
                "enableOutboundProvisioning": {
                    "description": "Enable Outbound Provisioning.",
                    "type": "boolean"
                },
                "enableSaml10": {
                    "description": "Enable SAML 1.0.",
                    "type": "boolean"
                },
                "enableSaml11": {
                    "description": "Enable SAML 1.1.",
                    "type": "boolean"
                },
                "enableWsFed": {
                    "description": "Enable WS Federation.",
                    "type": "boolean"
                },
                "enableWsTrust": {
                    "description": "Enable WS Trust.",
                    "type": "boolean"
                },
                "saml20Profile": {
                    "$ref": "SAML20Profile",
                    "description": "SAML 2.0 Profile settings."
                }
            }
        },
        "LicenseEventNotificationSettings": {
            "description": "Notification settings for licensing events.",
            "id": "LicenseEventNotificationSettings",
            "properties": {
                "emailAddress": {
                    "description": "The email address where notifications are sent.",
                    "type": "string"
                },
                "notificationPublisherRef": {
                    "$ref": "ResourceLink",
                    "description": "Reference to the associated notification publisher."
                }
            },
            "required": [
                "emailAddress"
            ]
        },
        "MetadataEventNotificationSettings": {
            "description": "Notification settings for metadata update events.",
            "id": "MetadataEventNotificationSettings",
            "properties": {
                "emailAddress": {
                    "description": "The email address where metadata update notifications are sent.",
                    "type": "string"
                },
                "notificationPublisherRef": {
                    "$ref": "ResourceLink",
                    "description": "Reference to the associated notification publisher."
                }
            },
            "required": [
                "emailAddress"
            ]
        },
        "NotificationSettings": {
            "description": "Settings for notifications relating to licensing and certificate expiration.",
            "id": "NotificationSettings",
            "properties": {
                "accountChangesNotificationPublisherRef": {
                    "$ref": "ResourceLink",
                    "description": "Reference to the associated notification publisher for admin user account changes."
                },
                "certificateExpirations": {
                    "$ref": "CertificateExpirationNotificationSettings",
                    "description": "Settings for certificate expiration notifications."
                },
                "licenseEvents": {
                    "$ref": "LicenseEventNotificationSettings",
                    "description": "Settings for license event notifications."
                },
                "metadataNotificationSettings": {
                    "$ref": "MetadataEventNotificationSettings",
                    "description": "Settings for metadata update event notifications."
                },
                "notifyAdminUserPasswordChanges": {
                    "description": "Determines whether admin users are notified through email when their account is changed.",
                    "type": "boolean"
                }
            }
        },
        "OAuthRole": {
            "description": "This property has been deprecated and is no longer used. OAuth and OpenID Connect are always enabled.",
            "id": "OAuthRole",
            "properties": {
                "enableOauth": {
                    "description": "Enable OAuth 2.0 Authorization Server (AS) Role.",
                    "type": "boolean"
                },
                "enableOpenIdConnect": {
                    "description": "Enable Open ID Connect.",
                    "type": "boolean"
                }
            }
        },
        "OutboundProvisionDatabase": {
            "description": "The settings for database used internally to facilitate outbound provisioning. The database stores state of synchronization between the source data store and the target data store.",
            "id": "OutboundProvisionDatabase",
            "properties": {
                "dataStoreRef": {
                    "$ref": "ResourceLink",
                    "description": "Reference to the associated data store."
                },
                "synchronizationFrequency": {
                    "description": "The synchronization frequency in seconds. The default value is 60.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "required": [
                "dataStoreRef"
            ]
        },
        "ResourceLink": {
            "description": "A reference to a resource.",
            "id": "ResourceLink",
            "properties": {
                "id": {
                    "description": "The ID of the resource.",
                    "type": "string"
                },
                "location": {
                    "description": "A read-only URL that references the resource. If the resource is not currently URL-accessible, this property will be null.",
                    "type": "string"
                }
            },
            "required": [
                "id"
            ]
        },
        "RolesAndProtocols": {
            "description": "This property has been deprecated and is no longer used. All Roles and protocols are always enabled.",
            "id": "RolesAndProtocols",
            "properties": {
                "enableIdpDiscovery": {
                    "description": "Enable IdP Discovery.",
                    "type": "boolean"
                },
                "idpRole": {
                    "$ref": "IdpRole",
                    "description": "Identity Provider (IdP) settings."
                },
                "oauthRole": {
                    "$ref": "OAuthRole",
                    "description": "OAuth role settings."
                },
                "spRole": {
                    "$ref": "SpRole",
                    "description": "Service Provider (SP) settings."
                }
            }
        },
        "SAML20Profile": {
            "description": "SAML 2.0 Profile.",
            "id": "SAML20Profile",
            "properties": {
                "enable": {
                    "description": "Enable SAML2.0 profile.",
                    "type": "boolean"
                },
                "enableAutoConnect": {
                    "description": "This property has been deprecated and no longer used",
                    "type": "boolean"
                }
            },
            "subTypes": [
                "SpSAML20Profile"
            ]
        },
        "ServerSettings": {
            "description": "Server configuration settings.",
            "id": "ServerSettings",
            "properties": {
                "captchaSettings": {
                    "$ref": "CaptchaSettings",
                    "description": "Captcha Settings."
                },
                "contactInfo": {
                    "$ref": "ContactInfo",
                    "description": "Information that identifies the server."
                },
                "emailServer": {
                    "$ref": "EmailServerSettings",
                    "description": "Email Server Settings."
                },
                "federationInfo": {
                    "$ref": "FederationInfo",
                    "description": "Federation Info."
                },
                "notifications": {
                    "$ref": "NotificationSettings",
                    "description": "Notification settings for license and certificate expiration events."
                },
                "rolesAndProtocols": {
                    "$ref": "RolesAndProtocols",
                    "description": "Configure roles and protocols."
                }
            }
        },
        "SpRole": {
            "description": "This property has been deprecated and is no longer used. All Roles and protocols are always enabled.",
            "extends": "BaseProviderRole",
            "id": "SpRole",
            "properties": {
                "enable": {
                    "description": "Enable Service Provider Role.",
                    "type": "boolean"
                },
                "enableInboundProvisioning": {
                    "description": "Enable Inbound Provisioning.",
                    "type": "boolean"
                },
                "enableOpenIDConnect": {
                    "description": "Enable OpenID Connect.",
                    "type": "boolean"
                },
                "enableSaml10": {
                    "description": "Enable SAML 1.0.",
                    "type": "boolean"
                },
                "enableSaml11": {
                    "description": "Enable SAML 1.1.",
                    "type": "boolean"
                },
                "enableWsFed": {
                    "description": "Enable WS Federation.",
                    "type": "boolean"
                },
                "enableWsTrust": {
                    "description": "Enable WS Trust.",
                    "type": "boolean"
                },
                "saml20Profile": {
                    "$ref": "SpSAML20Profile",
                    "description": "SAML 2.0 Profile settings."
                }
            }
        },
        "SpSAML20Profile": {
            "description": "SP SAML 2.0 Profile.",
            "extends": "SAML20Profile",
            "id": "SpSAML20Profile",
            "properties": {
                "enable": {
                    "description": "Enable SAML2.0 profile.",
                    "type": "boolean"
                },
                "enableAutoConnect": {
                    "description": "This property has been deprecated and no longer used",
                    "type": "boolean"
                },
                "enableXASP": {
                    "description": "Enable Attribute Requester Mapping for X.509 Attribute Sharing Profile (XASP)",
                    "type": "boolean"
                }
            }
        },
        "SystemKey": {
            "description": "A system key.",
            "id": "SystemKey",
            "properties": {
                "creationDate": {
                    "description": "Creation time of the key.",
                    "format": "date-time",
                    "type": "string"
                },
                "encryptedKeyData": {
                    "description": "The system key encrypted.",
                    "type": "string"
                },
                "keyData": {
                    "description": "The clear text system key base 64 encoded. The system key must be 32 bytes before base 64 encoding.",
                    "type": "string"
                }
            }
        },
        "SystemKeys": {
            "description": "Secrets that are used in cryptographic operations to generate and consume internal tokens",
            "id": "SystemKeys",
            "properties": {
                "current": {
                    "$ref": "SystemKey",
                    "description": "The current secret."
                },
                "pending": {
                    "$ref": "SystemKey",
                    "description": "The next secret."
                },
                "previous": {
                    "$ref": "SystemKey",
                    "description": "Previously used secret."
                }
            },
            "required": [
                "current",
                "pending"
            ]
        },
        "ValidationError": {
            "description": "A data input validation error.",
            "id": "ValidationError",
            "properties": {
                "developerMessage": {
                    "description": "Developer-oriented error message, if available.",
                    "type": "string"
                },
                "errorId": {
                    "description": "Error identifier.",
                    "type": "string"
                },
                "fieldPath": {
                    "description": "The path to the model field to which the error relates, if one exists.",
                    "type": "string"
                },
                "message": {
                    "description": "User-friendly error description.",
                    "type": "string"
                }
            }
        }
    },
    "produces": [
        "application/json"
    ],
    "resourcePath": "/serverSettings",
    "swaggerVersion": "1.2"
}