{
    "apiVersion": "v1",
    "apis": [
        {
            "operations": [
                {
                    "method": "GET",
                    "nickname": "getCustomDataStoreDescriptors",
                    "notes": "",
                    "parameters": [],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "Success."
                        }
                    ],
                    "summary": "Get the list of available custom data store descriptors.",
                    "type": "CustomDataStoreDescriptors"
                }
            ],
            "path": "/dataStores/descriptors"
        },
        {
            "operations": [
                {
                    "method": "GET",
                    "nickname": "getCustomDataStoreDescriptor",
                    "notes": "Get the description of a custom data store plugin by ID. A 404 status code is returned for nonexistent IDs.",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "description": "ID of custom data store descriptor to fetch.",
                            "name": "id",
                            "paramType": "path",
                            "required": true,
                            "type": "string"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "Success."
                        },
                        {
                            "code": 404,
                            "message": "Resource not found."
                        }
                    ],
                    "summary": "Get the description of a custom data store plugin by ID.",
                    "type": "CustomDataStoreDescriptor"
                }
            ],
            "path": "/dataStores/descriptors/{id}"
        },
        {
            "operations": [
                {
                    "method": "GET",
                    "nickname": "getDataStores",
                    "notes": "Get a list of all the data stores.",
                    "parameters": [],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "Success."
                        }
                    ],
                    "summary": "Get list of data stores.",
                    "type": "DataStores"
                },
                {
                    "consumes": [
                        "application/json"
                    ],
                    "method": "POST",
                    "nickname": "createDataStore",
                    "notes": "Create a new data store. If the data store is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "description": "Configuration for new data store.",
                            "name": "body",
                            "paramType": "body",
                            "required": true,
                            "type": "DataStore"
                        },
                        {
                            "allowMultiple": false,
                            "defaultValue": "false",
                            "description": "Connection test will be bypassed when set to true. Default to false.",
                            "name": "X-BypassExternalValidation",
                            "paramType": "header",
                            "required": false,
                            "type": "boolean"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 201,
                            "message": "Data store created."
                        },
                        {
                            "code": 400,
                            "message": "The request was improperly formatted or contained invalid fields."
                        },
                        {
                            "code": 422,
                            "message": "Validation error(s) occurred.",
                            "responseModel": "ApiResult"
                        }
                    ],
                    "summary": "Create a new data store.",
                    "type": "DataStore"
                }
            ],
            "path": "/dataStores"
        },
        {
            "operations": [
                {
                    "method": "GET",
                    "nickname": "getDataStore",
                    "notes": "Get a data store with the specified ID. A 404 status code is returned for nonexistent IDs.",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "description": "ID of data store to fetch.",
                            "name": "id",
                            "paramType": "path",
                            "required": true,
                            "type": "string"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "Success."
                        },
                        {
                            "code": 404,
                            "message": "Resource not found.",
                            "responseModel": "ApiResult"
                        }
                    ],
                    "summary": "Find data store by ID.",
                    "type": "DataStore"
                },
                {
                    "consumes": [
                        "application/json"
                    ],
                    "method": "PUT",
                    "nickname": "updateDataStore",
                    "notes": "Update a data store with the matching ID. If the data store is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected. Note: A 404 status code is returned for nonexistent IDs.",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "description": "ID of data store to update.",
                            "name": "id",
                            "paramType": "path",
                            "required": true,
                            "type": "string"
                        },
                        {
                            "allowMultiple": false,
                            "description": "Configuration for updated data store.",
                            "name": "body",
                            "paramType": "body",
                            "required": true,
                            "type": "DataStore"
                        },
                        {
                            "allowMultiple": false,
                            "defaultValue": "false",
                            "description": "Connection test will be bypassed when set to true. Default to false.",
                            "name": "X-BypassExternalValidation",
                            "paramType": "header",
                            "required": false,
                            "type": "boolean"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "Data store updated."
                        },
                        {
                            "code": 400,
                            "message": "The request was improperly formatted or contained invalid fields."
                        },
                        {
                            "code": 404,
                            "message": "Resource not found.",
                            "responseModel": "ApiResult"
                        },
                        {
                            "code": 422,
                            "message": "Validation error(s) occurred.",
                            "responseModel": "ApiResult"
                        }
                    ],
                    "summary": "Update a data store.",
                    "type": "DataStore"
                },
                {
                    "method": "DELETE",
                    "nickname": "deleteDataStore",
                    "notes": "Delete a data store with the specified ID. A 404 status code is returned for nonexistent IDs. Note: Only unused data stores can be deleted. If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "description": "ID of data store to delete.",
                            "name": "id",
                            "paramType": "path",
                            "required": true,
                            "type": "string"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 204,
                            "message": "Data store deleted."
                        },
                        {
                            "code": 404,
                            "message": "Resource not found.",
                            "responseModel": "ApiResult"
                        },
                        {
                            "code": 422,
                            "message": "Resource is in use and cannot be deleted.",
                            "responseModel": "ApiResult"
                        }
                    ],
                    "summary": "Delete a data store.",
                    "type": "ApiResult"
                }
            ],
            "path": "/dataStores/{id}"
        },
        {
            "operations": [
                {
                    "method": "GET",
                    "nickname": "getActions",
                    "notes": "",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "description": "ID of data store to which these actions belong to.",
                            "name": "id",
                            "paramType": "path",
                            "required": true,
                            "type": "string"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "Success."
                        },
                        {
                            "code": 404,
                            "message": "Resource not found.",
                            "responseModel": "ApiResult"
                        }
                    ],
                    "summary": "List the actions for a data store instance.",
                    "type": "Actions"
                }
            ],
            "path": "/dataStores/{id}/actions"
        },
        {
            "operations": [
                {
                    "method": "GET",
                    "nickname": "getAction",
                    "notes": "Find a data store instance's action by ID. A 404 status code is returned for nonexistent action IDs.",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "description": "ID of data store to which these actions belong to.",
                            "name": "id",
                            "paramType": "path",
                            "required": true,
                            "type": "string"
                        },
                        {
                            "allowMultiple": false,
                            "description": "ID of the action to get.",
                            "name": "actionId",
                            "paramType": "path",
                            "required": true,
                            "type": "string"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "Success."
                        },
                        {
                            "code": 404,
                            "message": "Resource not found.",
                            "responseModel": "ApiResult"
                        }
                    ],
                    "summary": "Find a data store instance's action by ID.",
                    "type": "Action"
                }
            ],
            "path": "/dataStores/{id}/actions/{actionId}"
        },
        {
            "operations": [
                {
                    "method": "POST",
                    "nickname": "invokeAction",
                    "notes": "Invokes an action for a data source instance. A 404 status code is returned for nonexistent action IDs. If the action produces a download file, the file will be returned directly in the response. Otherwise an ActionResult will be returned.",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "description": "ID of data store to which these actions belong to.",
                            "name": "id",
                            "paramType": "path",
                            "required": true,
                            "type": "string"
                        },
                        {
                            "allowMultiple": false,
                            "description": "ID of the action to invoke.",
                            "name": "actionId",
                            "paramType": "path",
                            "required": true,
                            "type": "string"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "Action invoked on Data store."
                        },
                        {
                            "code": 404,
                            "message": "Resource not found."
                        }
                    ],
                    "summary": "Invokes an action for a data source instance.",
                    "type": "ActionResult"
                }
            ],
            "path": "/dataStores/{id}/actions/{actionId}/invokeAction"
        }
    ],
    "basePath": "https://ip-10-101-29-72:9999/pf-admin-api/v1",
    "models": {
        "Action": {
            "description": "A read-only plugin action that either represents a file download or an arbitrary invocation performed by the plugin.",
            "id": "Action",
            "properties": {
                "description": {
                    "description": "The description of this action.",
                    "type": "string"
                },
                "download": {
                    "description": "Whether this action will trigger a download or invoke an internal action that will return a string result.",
                    "type": "boolean"
                },
                "id": {
                    "description": "The ID of this action.",
                    "type": "string"
                },
                "invocationRef": {
                    "$ref": "ResourceLink",
                    "description": "Whether this action will trigger a download or invoke an internal action that will return a string result."
                },
                "name": {
                    "description": "The name of this action.",
                    "type": "string"
                }
            }
        },
        "ActionDescriptor": {
            "description": "Describes an arbitrary action that is available for a plugin.",
            "id": "ActionDescriptor",
            "properties": {
                "description": {
                    "description": "The description of this action",
                    "type": "string"
                },
                "download": {
                    "description": "Whether this action will trigger a download or invoke an internal action that will return a string result.",
                    "type": "boolean"
                },
                "downloadContentType": {
                    "description": "If this is a download, this is the Content-Type of the downloaded file. Otherwise, this is null.",
                    "type": "string"
                },
                "downloadFileName": {
                    "description": "If this is a download, this is the suggested file name of the downloaded file. Otherwise, this is null.",
                    "type": "string"
                },
                "name": {
                    "description": "The name of this action",
                    "type": "string"
                }
            }
        },
        "ActionResult": {
            "description": "The result for non-download plugin actions.",
            "id": "ActionResult",
            "properties": {
                "message": {
                    "description": "The message from the completed action.",
                    "type": "string"
                }
            }
        },
        "Actions": {
            "description": "A read-only list of available actions for this plugin instance.",
            "id": "Actions",
            "properties": {
                "items": {
                    "description": "The list of available actions.",
                    "items": {
                        "$ref": "Action"
                    },
                    "type": "array"
                }
            }
        },
        "ApiResult": {
            "description": "Details on the result of the operation.",
            "id": "ApiResult",
            "properties": {
                "developerMessage": {
                    "description": "Developer-oriented error message, if available.",
                    "type": "string"
                },
                "message": {
                    "description": "Success or error message.",
                    "type": "string"
                },
                "resultId": {
                    "description": "Result identifier.",
                    "type": "string"
                },
                "validationErrors": {
                    "description": "List of validation errors, if any.",
                    "items": {
                        "$ref": "ValidationError"
                    },
                    "type": "array"
                }
            }
        },
        "BaseSelectionFieldDescriptor": {
            "description": "Holds fields that are shared by all selection-type field descriptors.",
            "extends": "FieldDescriptor",
            "id": "BaseSelectionFieldDescriptor",
            "properties": {
                "advanced": {
                    "description": "Whether this is an advanced field or not.",
                    "type": "boolean"
                },
                "defaultValue": {
                    "description": "Default value of the field.",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the field.",
                    "type": "string"
                },
                "label": {
                    "description": "Label of the field to be displayed in the administrative console.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the field.",
                    "type": "string"
                },
                "optionValues": {
                    "description": "The list of option values for this selection field.",
                    "items": {
                        "$ref": "OptionValue"
                    },
                    "type": "array"
                },
                "required": {
                    "description": "Whether a value is required for this field or not.",
                    "type": "boolean"
                },
                "type": {
                    "$ref": "FieldDescriptorType",
                    "description": "The type of field descriptor.",
                    "enum": [
                        "RADIO_GROUP",
                        "SELECT",
                        "FILTERABLE_SELECT",
                        "CHECK_BOX",
                        "TEXT_AREA",
                        "TEXT",
                        "UPLOAD_FILE",
                        "HASHED_TEXT"
                    ]
                }
            },
            "subTypes": [
                "RadioGroupFieldDescriptor",
                "SelectFieldDescriptor"
            ]
        },
        "CheckBoxFieldDescriptor": {
            "description": "A boolean field typically rendered as a checkbox in a configuration UI.",
            "extends": "FieldDescriptor",
            "id": "CheckBoxFieldDescriptor",
            "properties": {
                "advanced": {
                    "description": "Whether this is an advanced field or not.",
                    "type": "boolean"
                },
                "defaultValue": {
                    "description": "Default value of the field.",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the field.",
                    "type": "string"
                },
                "label": {
                    "description": "Label of the field to be displayed in the administrative console.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the field.",
                    "type": "string"
                },
                "required": {
                    "description": "Whether a value is required for this field or not.",
                    "type": "boolean"
                },
                "type": {
                    "$ref": "FieldDescriptorType",
                    "description": "The type of field descriptor.",
                    "enum": [
                        "RADIO_GROUP",
                        "SELECT",
                        "FILTERABLE_SELECT",
                        "CHECK_BOX",
                        "TEXT_AREA",
                        "TEXT",
                        "UPLOAD_FILE",
                        "HASHED_TEXT"
                    ]
                }
            }
        },
        "ConfigField": {
            "description": "A plugin configuration field value.",
            "id": "ConfigField",
            "properties": {
                "encryptedValue": {
                    "description": "For encrypted or hashed fields, this attribute contains the encrypted representation of the field's value, if a value is defined. If you do not want to update the stored value, this attribute should be passed back unchanged.",
                    "type": "string"
                },
                "inherited": {
                    "description": "Whether this field is inherited from its parent instance. If true, the value/encrypted value properties become read-only. The default value is false.",
                    "type": "boolean"
                },
                "name": {
                    "description": "The name of the configuration field.",
                    "type": "string"
                },
                "value": {
                    "description": "The value for the configuration field. For encrypted or hashed fields, GETs will not return this attribute. To update an encrypted or hashed field, specify the new value in this attribute.",
                    "type": "string"
                }
            },
            "required": [
                "name"
            ]
        },
        "ConfigRow": {
            "description": "A row of configuration values for a plugin configuration table.",
            "id": "ConfigRow",
            "properties": {
                "defaultRow": {
                    "description": "Whether this row is the default.",
                    "type": "boolean"
                },
                "fields": {
                    "description": "The configuration fields in the row.",
                    "items": {
                        "$ref": "ConfigField"
                    },
                    "type": "array"
                }
            },
            "required": [
                "fields"
            ]
        },
        "ConfigTable": {
            "description": "A plugin configuration table populated with values.",
            "id": "ConfigTable",
            "properties": {
                "inherited": {
                    "description": "Whether this table is inherited from its parent instance. If true, the rows become read-only. The default value is false.",
                    "type": "boolean"
                },
                "name": {
                    "description": "The name of the table.",
                    "type": "string"
                },
                "rows": {
                    "description": "List of table rows.",
                    "items": {
                        "$ref": "ConfigRow"
                    },
                    "type": "array"
                }
            },
            "required": [
                "name"
            ]
        },
        "CustomDataStore": {
            "description": "A custom data store.",
            "extends": "DataStore",
            "id": "CustomDataStore",
            "properties": {
                "configuration": {
                    "$ref": "PluginConfiguration",
                    "description": "Plugin instance configuration."
                },
                "id": {
                    "description": "The persistent, unique ID for the data store. It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned if not specified.",
                    "type": "string"
                },
                "maskAttributeValues": {
                    "description": "Whether attribute values should be masked in the log.",
                    "type": "boolean"
                },
                "name": {
                    "description": "The plugin instance name.",
                    "type": "string"
                },
                "parentRef": {
                    "$ref": "ResourceLink",
                    "description": "The reference to this plugin's parent instance. The parent reference is only accepted if the plugin type supports parent instances.<br>Note: This parent reference is required if this plugin instance is used as an overriding plugin (e.g. connection adapter overrides)"
                },
                "pluginDescriptorRef": {
                    "$ref": "ResourceLink",
                    "description": "Reference to the plugin descriptor for this instance. The plugin descriptor cannot be modified once the instance is created.<br>Note: Ignored when specifying a connection's adapter override."
                },
                "type": {
                    "$ref": "DataStoreType",
                    "description": "The data store type.",
                    "enum": [
                        "LDAP",
                        "JDBC",
                        "CUSTOM"
                    ]
                }
            },
            "required": [
                "type",
                "name",
                "pluginDescriptorRef",
                "configuration"
            ]
        },
        "CustomDataStoreDescriptor": {
            "description": "A custom data store descriptor.",
            "extends": "PluginDescriptor",
            "id": "CustomDataStoreDescriptor",
            "properties": {
                "attributeContract": {
                    "description": "The attribute contract for this plugin.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "className": {
                    "description": "Full class name of the class that implements this plugin.",
                    "type": "string"
                },
                "configDescriptor": {
                    "$ref": "PluginConfigDescriptor",
                    "description": "The descriptor which defines the configuration fields available for this plugin."
                },
                "id": {
                    "description": "Unique ID of the plugin.",
                    "type": "string"
                },
                "name": {
                    "description": "Friendly name for the plugin.",
                    "type": "string"
                },
                "supportsExtendedContract": {
                    "description": "Determines whether this plugin supports extending the attribute contract.",
                    "type": "boolean"
                }
            }
        },
        "CustomDataStoreDescriptors": {
            "description": "A collection of custom data store descriptors.",
            "id": "CustomDataStoreDescriptors",
            "properties": {
                "items": {
                    "description": "The list of custom data store descriptors.",
                    "items": {
                        "$ref": "CustomDataStoreDescriptor"
                    },
                    "type": "array"
                }
            }
        },
        "DataSourceTag": {
            "id": "DataSourceTag",
            "properties": {
                "defaultSource": {
                    "type": "boolean"
                },
                "tags": {
                    "type": "string"
                },
                "tagsHashSet": {
                    "$ref": "Set",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "DataStore": {
            "description": "The set of attributes used to configure a data store.",
            "discriminator": "type",
            "id": "DataStore",
            "properties": {
                "id": {
                    "description": "The persistent, unique ID for the data store. It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned if not specified.",
                    "type": "string"
                },
                "maskAttributeValues": {
                    "description": "Whether attribute values should be masked in the log.",
                    "type": "boolean"
                },
                "type": {
                    "$ref": "DataStoreType",
                    "description": "The data store type.",
                    "enum": [
                        "LDAP",
                        "JDBC",
                        "CUSTOM"
                    ]
                }
            },
            "required": [
                "type"
            ],
            "subTypes": [
                "JdbcDataStore",
                "LdapDataStore",
                "CustomDataStore"
            ]
        },
        "DataStores": {
            "description": "A collection of data stores.",
            "id": "DataStores",
            "properties": {
                "items": {
                    "description": "The actual list of data stores.",
                    "items": {
                        "$ref": "DataStore"
                    },
                    "type": "array"
                }
            }
        },
        "FieldDescriptor": {
            "description": "Describes a plugin configuration field.",
            "discriminator": "type",
            "id": "FieldDescriptor",
            "properties": {
                "advanced": {
                    "description": "Whether this is an advanced field or not.",
                    "type": "boolean"
                },
                "defaultValue": {
                    "description": "Default value of the field.",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the field.",
                    "type": "string"
                },
                "label": {
                    "description": "Label of the field to be displayed in the administrative console.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the field.",
                    "type": "string"
                },
                "required": {
                    "description": "Whether a value is required for this field or not.",
                    "type": "boolean"
                },
                "type": {
                    "$ref": "FieldDescriptorType",
                    "description": "The type of field descriptor.",
                    "enum": [
                        "RADIO_GROUP",
                        "SELECT",
                        "FILTERABLE_SELECT",
                        "CHECK_BOX",
                        "TEXT_AREA",
                        "TEXT",
                        "UPLOAD_FILE",
                        "HASHED_TEXT"
                    ]
                }
            },
            "subTypes": [
                "RadioGroupFieldDescriptor",
                "SelectFieldDescriptor",
                "CheckBoxFieldDescriptor",
                "UploadFileFieldDescriptor",
                "TextAreaFieldDescriptor",
                "TextFieldDescriptor",
                "HashedTextFieldDescriptor"
            ]
        },
        "HashedTextFieldDescriptor": {
            "description": "A text field that will contain a secure salted hash.",
            "extends": "FieldDescriptor",
            "id": "HashedTextFieldDescriptor",
            "properties": {
                "advanced": {
                    "description": "Whether this is an advanced field or not.",
                    "type": "boolean"
                },
                "defaultValue": {
                    "description": "Default value of the field.",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the field.",
                    "type": "string"
                },
                "label": {
                    "description": "Label of the field to be displayed in the administrative console.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the field.",
                    "type": "string"
                },
                "required": {
                    "description": "Whether a value is required for this field or not.",
                    "type": "boolean"
                },
                "size": {
                    "description": "The size of the text field.",
                    "format": "int32",
                    "type": "integer"
                },
                "type": {
                    "$ref": "FieldDescriptorType",
                    "description": "The type of field descriptor.",
                    "enum": [
                        "RADIO_GROUP",
                        "SELECT",
                        "FILTERABLE_SELECT",
                        "CHECK_BOX",
                        "TEXT_AREA",
                        "TEXT",
                        "UPLOAD_FILE",
                        "HASHED_TEXT"
                    ]
                }
            }
        },
        "JdbcDataStore": {
            "description": "A JDBC data store.",
            "extends": "DataStore",
            "id": "JdbcDataStore",
            "properties": {
                "allowMultiValueAttributes": {
                    "description": "Indicates that this data store can select more than one record from a column and return the results as a multi-value attribute.",
                    "type": "boolean"
                },
                "blockingTimeout": {
                    "description": "The amount of time in milliseconds a request waits to get a connection from the connection pool before it fails. Omitting this attribute will set the value to the connection pool default.",
                    "format": "int32",
                    "type": "integer"
                },
                "connectionUrl": {
                    "description": "The default location of the JDBC database. This field is required if no mapping for JDBC database location and tags are specified.",
                    "type": "string"
                },
                "connectionUrlTags": {
                    "description": "The set of connection URLs and associated tags for this JDBC data store.",
                    "items": {
                        "$ref": "JdbcTagConfig"
                    },
                    "type": "array"
                },
                "driverClass": {
                    "description": "The name of the driver class used to communicate with the source database.",
                    "type": "string"
                },
                "encryptedPassword": {
                    "description": "The encrypted password needed to access the database. If you do not want to update the stored value, this attribute should be passed back unchanged.",
                    "type": "string"
                },
                "id": {
                    "description": "The persistent, unique ID for the data store. It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned if not specified.",
                    "type": "string"
                },
                "idleTimeout": {
                    "description": "The length of time in minutes the connection can be idle in the pool before it is closed. Omitting this attribute will set the value to the connection pool default.",
                    "format": "int32",
                    "type": "integer"
                },
                "maskAttributeValues": {
                    "description": "Whether attribute values should be masked in the log.",
                    "type": "boolean"
                },
                "maxPoolSize": {
                    "description": "The largest number of database connections in the connection pool for the given data store. Omitting this attribute will set the value to the connection pool default.",
                    "format": "int32",
                    "type": "integer"
                },
                "minPoolSize": {
                    "description": "The smallest number of database connections in the connection pool for the given data store. Omitting this attribute will set the value to the connection pool default.",
                    "format": "int32",
                    "type": "integer"
                },
                "name": {
                    "description": "The data store name with a unique value across all data sources. Omitting this attribute will set the value to a combination of the connection url and the username.",
                    "type": "string"
                },
                "password": {
                    "description": "The password needed to access the database. GETs will not return this attribute. To update this field, specify the new value in this attribute.",
                    "type": "string"
                },
                "type": {
                    "$ref": "DataStoreType",
                    "description": "The data store type.",
                    "enum": [
                        "LDAP",
                        "JDBC",
                        "CUSTOM"
                    ]
                },
                "userName": {
                    "description": "The name that identifies the user when connecting to the database.",
                    "type": "string"
                },
                "validateConnectionSql": {
                    "description": "A simple SQL statement used by PingFederate at runtime to verify that the database connection is still active and to reconnect if needed.",
                    "type": "string"
                }
            },
            "required": [
                "type",
                "driverClass",
                "userName"
            ]
        },
        "JdbcTagConfig": {
            "description": "A JDBC data store's connection URLs and tags configuration. This is required if no default JDBC database location is specified.",
            "extends": "DataSourceTag",
            "id": "JdbcTagConfig",
            "properties": {
                "connectionUrl": {
                    "description": "The location of the JDBC database.",
                    "type": "string"
                },
                "defaultSource": {
                    "description": "Whether this is the default connection. Defaults to false if not specified.",
                    "type": "boolean"
                },
                "tags": {
                    "description": "Tags associated with this data source.",
                    "type": "string"
                }
            },
            "required": [
                "connectionUrl"
            ]
        },
        "LdapDataStore": {
            "description": "A LDAP data store.",
            "extends": "DataStore",
            "id": "LdapDataStore",
            "properties": {
                "binaryAttributes": {
                    "description": "The list of LDAP attributes to be handled as binary data.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "bindAnonymously": {
                    "description": "Whether username and password are required. The default value is false.",
                    "type": "boolean"
                },
                "connectionTimeout": {
                    "description": "The maximum number of milliseconds that a connection attempt should be allowed to continue before returning an error. A value of -1 causes the pool to wait indefinitely. Omitting this attribute will set the value to the default value.",
                    "format": "int32",
                    "type": "integer"
                },
                "createIfNecessary": {
                    "description": "Indicates whether temporary connections can be created when the Maximum Connections threshold is reached.",
                    "type": "boolean"
                },
                "dnsTtl": {
                    "description": "The maximum time in milliseconds that DNS information are cached. Omitting this attribute will set the value to the default value.",
                    "format": "int32",
                    "type": "integer"
                },
                "encryptedPassword": {
                    "description": "The encrypted password credential required to access the data store.  If you do not want to update the stored value, this attribute should be passed back unchanged.",
                    "type": "string"
                },
                "followLDAPReferrals": {
                    "description": "Follow LDAP Referrals in the domain tree. The default value is false. This property does not apply to PingDirectory as this functionality is configured in PingDirectory.",
                    "type": "boolean"
                },
                "hostnames": {
                    "description": "The default LDAP host names. This field is required if no mapping for host names and tags are specified.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "hostnamesTags": {
                    "description": "The set of host names and associated tags for this LDAP data store.",
                    "items": {
                        "$ref": "LdapTagConfig"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "The persistent, unique ID for the data store. It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned if not specified.",
                    "type": "string"
                },
                "ldapDnsSrvPrefix": {
                    "description": "The prefix value used to discover LDAP DNS SRV record. Omitting this attribute will set the value to the default value.",
                    "type": "string"
                },
                "ldapType": {
                    "$ref": "LdapType",
                    "description": "A type that allows PingFederate to configure many provisioning settings automatically. The 'UNBOUNDID_DS' type has been deprecated, please use the 'PING_DIRECTORY' type instead.",
                    "enum": [
                        "ACTIVE_DIRECTORY",
                        "ORACLE_DIRECTORY_SERVER",
                        "ORACLE_UNIFIED_DIRECTORY",
                        "UNBOUNDID_DS",
                        "PING_DIRECTORY",
                        "GENERIC"
                    ]
                },
                "ldapsDnsSrvPrefix": {
                    "description": "The prefix value used to discover LDAPs DNS SRV record. Omitting this attribute will set the value to the default value.",
                    "type": "string"
                },
                "maskAttributeValues": {
                    "description": "Whether attribute values should be masked in the log.",
                    "type": "boolean"
                },
                "maxConnections": {
                    "description": "The largest number of active connections that can remain in each pool without releasing extra ones. Omitting this attribute will set the value to the default value.",
                    "format": "int32",
                    "type": "integer"
                },
                "maxWait": {
                    "description": "The maximum number of milliseconds the pool waits for a connection to become available when trying to obtain a connection from the pool. Omitting this attribute or setting a value of -1 causes the pool not to wait at all and to either create a new connection or produce an error (when no connections are available).",
                    "format": "int32",
                    "type": "integer"
                },
                "minConnections": {
                    "description": "The smallest number of connections that can remain in each pool, without creating extra ones. Omitting this attribute will set the value to the default value.",
                    "format": "int32",
                    "type": "integer"
                },
                "name": {
                    "description": "The data store name with a unique value across all data sources. Omitting this attribute will set the value to a combination of the hostname(s) and the principal.",
                    "type": "string"
                },
                "password": {
                    "description": "The password credential required to access the data store. GETs will not return this attribute. To update this field, specify the new value in this attribute.",
                    "type": "string"
                },
                "readTimeout": {
                    "description": "The maximum number of milliseconds a connection waits for a response to be returned before producing an error. A value of -1 causes the connection to wait indefinitely. Omitting this attribute will set the value to the default value.",
                    "format": "int32",
                    "type": "integer"
                },
                "testOnBorrow": {
                    "description": "Indicates whether objects are validated before being borrowed from the pool.",
                    "type": "boolean"
                },
                "testOnReturn": {
                    "description": "Indicates whether objects are validated before being returned to the pool.",
                    "type": "boolean"
                },
                "timeBetweenEvictions": {
                    "description": "The frequency, in milliseconds, that the evictor cleans up the connections in the pool. A value of -1 disables the evictor. Omitting this attribute will set the value to the default value.",
                    "format": "int32",
                    "type": "integer"
                },
                "type": {
                    "$ref": "DataStoreType",
                    "description": "The data store type.",
                    "enum": [
                        "LDAP",
                        "JDBC",
                        "CUSTOM"
                    ]
                },
                "useDnsSrvRecords": {
                    "description": "Use DNS SRV Records to discover LDAP server information. The default value is false.",
                    "type": "boolean"
                },
                "useSsl": {
                    "description": "Connects to the LDAP data store using secure SSL/TLS encryption (LDAPS). The default value is false.",
                    "type": "boolean"
                },
                "userDN": {
                    "description": "The username credential required to access the data store.",
                    "type": "string"
                },
                "verifyHost": {
                    "description": "Verifies that the presented server certificate includes the address to which the client intended to establish a connection. Omitting this attribute will set the value to true.",
                    "type": "boolean"
                }
            },
            "required": [
                "type",
                "ldapType"
            ]
        },
        "LdapTagConfig": {
            "description": "An LDAP data store's hostnames and tags configuration. This is required if no default hostname is specified.",
            "extends": "DataSourceTag",
            "id": "LdapTagConfig",
            "properties": {
                "defaultSource": {
                    "description": "Whether this is the default connection. Defaults to false if not specified.",
                    "type": "boolean"
                },
                "hostnames": {
                    "description": "The LDAP host names.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "tags": {
                    "description": "Tags associated with this data source.",
                    "type": "string"
                }
            },
            "required": [
                "hostnames"
            ]
        },
        "OptionValue": {
            "description": "An option name and value associated with a selection field.",
            "id": "OptionValue",
            "properties": {
                "name": {
                    "description": "The name of the option.",
                    "type": "string"
                },
                "value": {
                    "description": "The value associated with this option.",
                    "type": "string"
                }
            }
        },
        "PluginConfigDescriptor": {
            "description": "Defines the configuration fields available for a plugin.",
            "id": "PluginConfigDescriptor",
            "properties": {
                "actionDescriptors": {
                    "description": "The available actions for this plugin.",
                    "items": {
                        "$ref": "ActionDescriptor"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "The description of this plugin.",
                    "type": "string"
                },
                "fields": {
                    "description": "The configuration fields available for this plugin.",
                    "items": {
                        "$ref": "FieldDescriptor"
                    },
                    "type": "array"
                },
                "tables": {
                    "description": "Configuration tables available for this plugin.",
                    "items": {
                        "$ref": "TableDescriptor"
                    },
                    "type": "array"
                }
            }
        },
        "PluginConfiguration": {
            "description": "Configuration settings for a plugin instance.",
            "id": "PluginConfiguration",
            "properties": {
                "fields": {
                    "description": "List of configuration fields.",
                    "items": {
                        "$ref": "ConfigField"
                    },
                    "type": "array"
                },
                "tables": {
                    "description": "List of configuration tables.",
                    "items": {
                        "$ref": "ConfigTable"
                    },
                    "type": "array"
                }
            }
        },
        "PluginDescriptor": {
            "description": "Defines a plugin type, including available configuration parameters.",
            "id": "PluginDescriptor",
            "properties": {
                "attributeContract": {
                    "description": "The attribute contract for this plugin.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "className": {
                    "description": "Full class name of the class that implements this plugin.",
                    "type": "string"
                },
                "configDescriptor": {
                    "$ref": "PluginConfigDescriptor",
                    "description": "The descriptor which defines the configuration fields available for this plugin."
                },
                "id": {
                    "description": "Unique ID of the plugin.",
                    "type": "string"
                },
                "name": {
                    "description": "Friendly name for the plugin.",
                    "type": "string"
                },
                "supportsExtendedContract": {
                    "description": "Determines whether this plugin supports extending the attribute contract.",
                    "type": "boolean"
                }
            }
        },
        "RadioGroupFieldDescriptor": {
            "description": "A selection-type field intended to be rendered as a group of radio buttons in a UI.",
            "extends": "BaseSelectionFieldDescriptor",
            "id": "RadioGroupFieldDescriptor",
            "properties": {
                "advanced": {
                    "description": "Whether this is an advanced field or not.",
                    "type": "boolean"
                },
                "defaultValue": {
                    "description": "Default value of the field.",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the field.",
                    "type": "string"
                },
                "label": {
                    "description": "Label of the field to be displayed in the administrative console.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the field.",
                    "type": "string"
                },
                "optionValues": {
                    "description": "The list of option values for this selection field.",
                    "items": {
                        "$ref": "OptionValue"
                    },
                    "type": "array"
                },
                "required": {
                    "description": "Whether a value is required for this field or not.",
                    "type": "boolean"
                },
                "type": {
                    "$ref": "FieldDescriptorType",
                    "description": "The type of field descriptor.",
                    "enum": [
                        "RADIO_GROUP",
                        "SELECT",
                        "FILTERABLE_SELECT",
                        "CHECK_BOX",
                        "TEXT_AREA",
                        "TEXT",
                        "UPLOAD_FILE",
                        "HASHED_TEXT"
                    ]
                }
            }
        },
        "ResourceLink": {
            "description": "A reference to a resource.",
            "id": "ResourceLink",
            "properties": {
                "id": {
                    "description": "The ID of the resource.",
                    "type": "string"
                },
                "location": {
                    "description": "A read-only URL that references the resource. If the resource is not currently URL-accessible, this property will be null.",
                    "type": "string"
                }
            },
            "required": [
                "id"
            ]
        },
        "SelectFieldDescriptor": {
            "description": "A selection field that is intended to be rendered as a dropdown list of options.",
            "extends": "BaseSelectionFieldDescriptor",
            "id": "SelectFieldDescriptor",
            "properties": {
                "advanced": {
                    "description": "Whether this is an advanced field or not.",
                    "type": "boolean"
                },
                "defaultValue": {
                    "description": "Default value of the field.",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the field.",
                    "type": "string"
                },
                "label": {
                    "description": "Label of the field to be displayed in the administrative console.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the field.",
                    "type": "string"
                },
                "optionValues": {
                    "description": "The list of option values for this selection field.",
                    "items": {
                        "$ref": "OptionValue"
                    },
                    "type": "array"
                },
                "required": {
                    "description": "Whether a value is required for this field or not.",
                    "type": "boolean"
                },
                "type": {
                    "$ref": "FieldDescriptorType",
                    "description": "The type of field descriptor.",
                    "enum": [
                        "RADIO_GROUP",
                        "SELECT",
                        "FILTERABLE_SELECT",
                        "CHECK_BOX",
                        "TEXT_AREA",
                        "TEXT",
                        "UPLOAD_FILE",
                        "HASHED_TEXT"
                    ]
                }
            }
        },
        "TableDescriptor": {
            "description": "Defines a plugin configuration table.",
            "id": "TableDescriptor",
            "properties": {
                "columns": {
                    "description": "Get the columns in the table.",
                    "items": {
                        "$ref": "FieldDescriptor"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "Description for the table.",
                    "type": "string"
                },
                "label": {
                    "description": "Label for the table to be displayed in the administrative console.",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the table.",
                    "type": "string"
                },
                "requireDefaultRow": {
                    "description": "Configure whether this table requires default row to be set.",
                    "type": "boolean"
                }
            }
        },
        "TextAreaFieldDescriptor": {
            "description": "A field intended to be rendered as a text box in a UI.",
            "extends": "FieldDescriptor",
            "id": "TextAreaFieldDescriptor",
            "properties": {
                "advanced": {
                    "description": "Whether this is an advanced field or not.",
                    "type": "boolean"
                },
                "columns": {
                    "description": "The number of columns for the text box.",
                    "format": "int32",
                    "type": "integer"
                },
                "defaultValue": {
                    "description": "Default value of the field.",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the field.",
                    "type": "string"
                },
                "label": {
                    "description": "Label of the field to be displayed in the administrative console.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the field.",
                    "type": "string"
                },
                "required": {
                    "description": "Whether a value is required for this field or not.",
                    "type": "boolean"
                },
                "rows": {
                    "description": "The number of rows for the text box.",
                    "format": "int32",
                    "type": "integer"
                },
                "type": {
                    "$ref": "FieldDescriptorType",
                    "description": "The type of field descriptor.",
                    "enum": [
                        "RADIO_GROUP",
                        "SELECT",
                        "FILTERABLE_SELECT",
                        "CHECK_BOX",
                        "TEXT_AREA",
                        "TEXT",
                        "UPLOAD_FILE",
                        "HASHED_TEXT"
                    ]
                }
            }
        },
        "TextFieldDescriptor": {
            "description": "A text field.",
            "extends": "FieldDescriptor",
            "id": "TextFieldDescriptor",
            "properties": {
                "advanced": {
                    "description": "Whether this is an advanced field or not.",
                    "type": "boolean"
                },
                "defaultValue": {
                    "description": "Default value of the field.",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the field.",
                    "type": "string"
                },
                "encrypted": {
                    "description": "Determines whether the field value should be masked in the UI and encrypted on disk.",
                    "type": "boolean"
                },
                "label": {
                    "description": "Label of the field to be displayed in the administrative console.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the field.",
                    "type": "string"
                },
                "required": {
                    "description": "Whether a value is required for this field or not.",
                    "type": "boolean"
                },
                "size": {
                    "description": "The size of the text field.",
                    "format": "int32",
                    "type": "integer"
                },
                "type": {
                    "$ref": "FieldDescriptorType",
                    "description": "The type of field descriptor.",
                    "enum": [
                        "RADIO_GROUP",
                        "SELECT",
                        "FILTERABLE_SELECT",
                        "CHECK_BOX",
                        "TEXT_AREA",
                        "TEXT",
                        "UPLOAD_FILE",
                        "HASHED_TEXT"
                    ]
                }
            }
        },
        "UploadFileFieldDescriptor": {
            "description": "A field which allows the user to upload a file.",
            "extends": "FieldDescriptor",
            "id": "UploadFileFieldDescriptor",
            "properties": {
                "advanced": {
                    "description": "Whether this is an advanced field or not.",
                    "type": "boolean"
                },
                "defaultValue": {
                    "description": "Default value of the field.",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the field.",
                    "type": "string"
                },
                "label": {
                    "description": "Label of the field to be displayed in the administrative console.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the field.",
                    "type": "string"
                },
                "required": {
                    "description": "Whether a value is required for this field or not.",
                    "type": "boolean"
                },
                "type": {
                    "$ref": "FieldDescriptorType",
                    "description": "The type of field descriptor.",
                    "enum": [
                        "RADIO_GROUP",
                        "SELECT",
                        "FILTERABLE_SELECT",
                        "CHECK_BOX",
                        "TEXT_AREA",
                        "TEXT",
                        "UPLOAD_FILE",
                        "HASHED_TEXT"
                    ]
                }
            }
        },
        "ValidationError": {
            "description": "A data input validation error.",
            "id": "ValidationError",
            "properties": {
                "developerMessage": {
                    "description": "Developer-oriented error message, if available.",
                    "type": "string"
                },
                "errorId": {
                    "description": "Error identifier.",
                    "type": "string"
                },
                "fieldPath": {
                    "description": "The path to the model field to which the error relates, if one exists.",
                    "type": "string"
                },
                "message": {
                    "description": "User-friendly error description.",
                    "type": "string"
                }
            }
        }
    },
    "produces": [
        "application/json"
    ],
    "resourcePath": "/dataStores",
    "swaggerVersion": "1.2"
}