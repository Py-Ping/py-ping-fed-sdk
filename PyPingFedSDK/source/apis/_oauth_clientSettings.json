{
    "apiVersion": "v1",
    "apis": [
        {
            "operations": [
                {
                    "method": "GET",
                    "nickname": "getClientSettings",
                    "notes": "",
                    "parameters": [],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "Success."
                        },
                        {
                            "code": 403,
                            "message": "PingFederate does not have its OAuth 2.0 authorization server role enabled. Operation not available."
                        }
                    ],
                    "summary": "Configure the client settings.",
                    "type": "ClientSettings"
                },
                {
                    "consumes": [
                        "application/json"
                    ],
                    "method": "PUT",
                    "nickname": "updateClientSettings",
                    "notes": "",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "description": "Configuration for client settings.",
                            "name": "body",
                            "paramType": "body",
                            "required": true,
                            "type": "ClientSettings"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "Client Settings updated."
                        },
                        {
                            "code": 400,
                            "message": "The request was improperly formatted or contained invalid fields."
                        },
                        {
                            "code": 403,
                            "message": "PingFederate does not have its OAuth 2.0 authorization server role enabled. Operation not available."
                        },
                        {
                            "code": 422,
                            "message": "Validation error(s) occurred.",
                            "responseModel": "ApiResult"
                        }
                    ],
                    "summary": "Update the client settings.",
                    "type": "ClientSettings"
                }
            ],
            "path": "/oauth/clientSettings"
        }
    ],
    "basePath": "https://ip-10-101-29-72:9999/pf-admin-api/v1",
    "models": {
        "ApiResult": {
            "description": "Details on the result of the operation.",
            "id": "ApiResult",
            "properties": {
                "developerMessage": {
                    "description": "Developer-oriented error message, if available.",
                    "type": "string"
                },
                "message": {
                    "description": "Success or error message.",
                    "type": "string"
                },
                "resultId": {
                    "description": "Result identifier.",
                    "type": "string"
                },
                "validationErrors": {
                    "description": "List of validation errors, if any.",
                    "items": {
                        "$ref": "ValidationError"
                    },
                    "type": "array"
                }
            }
        },
        "ClientMetadata": {
            "description": "The client metadata.",
            "id": "ClientMetadata",
            "properties": {
                "description": {
                    "description": "The metadata description.",
                    "type": "string"
                },
                "multiValued": {
                    "description": "If the field should allow multiple values.",
                    "type": "boolean"
                },
                "parameter": {
                    "description": "The metadata name.",
                    "type": "string"
                }
            }
        },
        "ClientRegistrationOIDCPolicy": {
            "description": "Client Registration Open ID Connect Policy settings.",
            "id": "ClientRegistrationOIDCPolicy",
            "properties": {
                "idTokenContentEncryptionAlgorithm": {
                    "$ref": "ContentEncryptionAlgorithm",
                    "description": "The JSON Web Encryption [JWE] content encryption algorithm for the ID Token.<br>AES_128_CBC_HMAC_SHA_256 - Composite AES-CBC-128 HMAC-SHA-256<br>AES_192_CBC_HMAC_SHA_384 - Composite AES-CBC-192 HMAC-SHA-384<br>AES_256_CBC_HMAC_SHA_512 - Composite AES-CBC-256 HMAC-SHA-512<br>AES-GCM-128 - AES_128_GCM<br>AES_192_GCM - AES-GCM-192<br>AES_256_GCM - AES-GCM-256",
                    "enum": [
                        "AES_128_CBC_HMAC_SHA_256",
                        "AES_192_CBC_HMAC_SHA_384",
                        "AES_256_CBC_HMAC_SHA_512",
                        "AES_128_GCM",
                        "AES_192_GCM",
                        "AES_256_GCM"
                    ]
                },
                "idTokenEncryptionAlgorithm": {
                    "$ref": "EncryptionAlgorithm",
                    "description": "The JSON Web Encryption [JWE] encryption algorithm used to encrypt the content encryption key for the ID Token.<br>DIR - Direct Encryption with symmetric key<br>A128KW - AES-128 Key Wrap<br>A192KW - AES-192 Key Wrap<br>A256KW - AES-256 Key Wrap<br>A128GCMKW - AES-GCM-128 key encryption<br>A192GCMKW - AES-GCM-192 key encryption<br>A256GCMKW - AES-GCM-256 key encryption<br>ECDH_ES - ECDH-ES<br>ECDH_ES_A128KW - ECDH-ES with AES-128 Key Wrap<br>ECDH_ES_A192KW - ECDH-ES with AES-192 Key Wrap<br>ECDH_ES_A256KW - ECDH-ES with AES-256 Key Wrap<br>RSA_OAEP - RSAES OAEP<br>",
                    "enum": [
                        "DIR",
                        "A128KW",
                        "A192KW",
                        "A256KW",
                        "A128GCMKW",
                        "A192GCMKW",
                        "A256GCMKW",
                        "ECDH_ES",
                        "ECDH_ES_A128KW",
                        "ECDH_ES_A192KW",
                        "ECDH_ES_A256KW",
                        "RSA_OAEP"
                    ]
                },
                "idTokenSigningAlgorithm": {
                    "$ref": "SigningAlgorithm",
                    "description": "The JSON Web Signature [JWS] algorithm required for the ID Token.<br>NONE - No signing algorithm<br>HS256 - HMAC using SHA-256<br>HS384 - HMAC using SHA-384<br>HS512 - HMAC using SHA-512<br>RS256 - RSA using SHA-256<br>RS384 - RSA using SHA-384<br>RS512 - RSA using SHA-512<br>ES256 - ECDSA using P256 Curve and SHA-256<br>ES384 - ECDSA using P384 Curve and SHA-384<br>ES512 - ECDSA using P521 Curve and SHA-512<br>PS256 - RSASSA-PSS using SHA-256 and MGF1 padding with SHA-256<br>PS384 - RSASSA-PSS using SHA-384 and MGF1 padding with SHA-384<br>PS512 - RSASSA-PSS using SHA-512 and MGF1 padding with SHA-512<br>A null value will represent the default algorithm which is RS256.<br>RSASSA-PSS is only supported with SafeNet Luna, Thales nCipher or Java 11",
                    "enum": [
                        "NONE",
                        "HS256",
                        "HS384",
                        "HS512",
                        "RS256",
                        "RS384",
                        "RS512",
                        "ES256",
                        "ES384",
                        "ES512",
                        "PS256",
                        "PS384",
                        "PS512"
                    ]
                },
                "policyGroup": {
                    "$ref": "ResourceLink",
                    "description": "The Open ID Connect policy. A null value will represent the default policy group."
                }
            }
        },
        "ClientSettings": {
            "description": "The client settings.",
            "id": "ClientSettings",
            "properties": {
                "clientMetadata": {
                    "description": "The client metadata.",
                    "items": {
                        "$ref": "ClientMetadata"
                    },
                    "type": "array"
                },
                "dynamicClientRegistration": {
                    "$ref": "DynamicClientRegistration",
                    "description": "Dynamic client registration settings."
                }
            }
        },
        "DynamicClientRegistration": {
            "description": "Dynamic client registration settings.",
            "id": "DynamicClientRegistration",
            "properties": {
                "allowedExclusiveScopes": {
                    "description": "The exclusive scopes to allow.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "bypassActivationCodeConfirmationOverride": {
                    "description": "Indicates if the Activation Code Confirmation page should be bypassed if 'verification_url_complete' is used by the end user to authorize a device.",
                    "type": "boolean"
                },
                "cibaPollingInterval": {
                    "description": "The minimum amount of time in seconds that the Client must wait between polling requests to the token endpoint. The default is 3 seconds.",
                    "format": "int32",
                    "type": "integer"
                },
                "cibaRequireSignedRequests": {
                    "description": "Determines whether CIBA signed requests are required for this client.",
                    "type": "boolean"
                },
                "clientCertIssuerRef": {
                    "$ref": "ResourceLink",
                    "description": "Client TLS Certificate Issuer DN."
                },
                "clientCertIssuerType": {
                    "$ref": "ClientCertificateIssuerType",
                    "description": "Client TLS Certificate Issuer Type.",
                    "enum": [
                        "NONE",
                        "TRUST_ANY",
                        "CERTIFICATE"
                    ]
                },
                "defaultAccessTokenManagerRef": {
                    "$ref": "ResourceLink",
                    "description": "The default access token manager for this client."
                },
                "deviceFlowSettingType": {
                    "$ref": "DeviceFlowSettingType",
                    "description": "Allows an administrator to override the Device Authorization Settings set globally for the OAuth AS. Defaults to SERVER_DEFAULT.",
                    "enum": [
                        "SERVER_DEFAULT",
                        "OVERRIDE_SERVER_DEFAULT"
                    ]
                },
                "devicePollingIntervalOverride": {
                    "description": "The amount of time client should wait between polling requests, in seconds.",
                    "format": "int32",
                    "type": "integer"
                },
                "enforceReplayPrevention": {
                    "description": "Enforce replay prevention.",
                    "type": "boolean"
                },
                "initialAccessTokenScope": {
                    "description": "The initial access token to prevent unwanted client registrations.",
                    "type": "string"
                },
                "oidcPolicy": {
                    "$ref": "ClientRegistrationOIDCPolicy",
                    "description": "Open ID Connect Policy settings.  This is included in the message only when OIDC is enabled."
                },
                "pendingAuthorizationTimeoutOverride": {
                    "description": "The 'device_code' and 'user_code' timeout, in seconds.",
                    "format": "int32",
                    "type": "integer"
                },
                "persistentGrantExpirationTime": {
                    "description": "The persistent grant expiration time.",
                    "format": "int64",
                    "type": "integer"
                },
                "persistentGrantExpirationTimeUnit": {
                    "$ref": "PersistentGrantLifetimeUnit",
                    "description": "The persistent grant expiration time unit.",
                    "enum": [
                        "MINUTES",
                        "DAYS",
                        "HOURS"
                    ]
                },
                "persistentGrantExpirationType": {
                    "$ref": "PersistentGrantLifetimeType",
                    "description": "Allows an administrator to override the Persistent Grant Lifetime set globally for the OAuth AS. Defaults to SERVER_DEFAULT.",
                    "enum": [
                        "INDEFINITE_EXPIRY",
                        "SERVER_DEFAULT",
                        "OVERRIDE_SERVER_DEFAULT"
                    ]
                },
                "persistentGrantIdleTimeout": {
                    "description": "The persistent grant idle timeout.",
                    "format": "int64",
                    "type": "integer"
                },
                "persistentGrantIdleTimeoutTimeUnit": {
                    "$ref": "PersistentGrantLifetimeUnit",
                    "description": "The persistent grant idle timeout time unit.",
                    "enum": [
                        "MINUTES",
                        "DAYS",
                        "HOURS"
                    ]
                },
                "persistentGrantIdleTimeoutType": {
                    "$ref": "PersistentGrantLifetimeType",
                    "description": "Allows an administrator to override the Persistent Grant Idle Timeout set globally for the OAuth AS. Defaults to SERVER_DEFAULT.",
                    "enum": [
                        "INDEFINITE_EXPIRY",
                        "SERVER_DEFAULT",
                        "OVERRIDE_SERVER_DEFAULT"
                    ]
                },
                "policyRefs": {
                    "description": "The client registration policies.",
                    "items": {
                        "$ref": "ResourceLink"
                    },
                    "type": "array"
                },
                "refreshRolling": {
                    "$ref": "RefreshRollingType",
                    "description": "Use ROLL or DONT_ROLL to override the Roll Refresh Token Values setting on the Authorization Server Settings. SERVER_DEFAULT will default to the Roll Refresh Token Values setting on the Authorization Server Setting screen. Defaults to SERVER_DEFAULT.",
                    "enum": [
                        "SERVER_DEFAULT",
                        "DONT_ROLL",
                        "ROLL"
                    ]
                },
                "requestPolicyRef": {
                    "$ref": "ResourceLink",
                    "description": "The CIBA request policy."
                },
                "requireProofKeyForCodeExchange": {
                    "description": "Determines whether Proof Key for Code Exchange (PKCE) is required for the dynamically created client.",
                    "type": "boolean"
                },
                "requireSignedRequests": {
                    "description": "Require signed requests.",
                    "type": "boolean"
                },
                "restrictCommonScopes": {
                    "description": "Restrict common scopes.",
                    "type": "boolean"
                },
                "restrictedCommonScopes": {
                    "description": "The common scopes to restrict.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "tokenExchangeProcessorPolicyRef": {
                    "$ref": "ResourceLink",
                    "description": "The Token Exchange Processor policy."
                },
                "userAuthorizationUrlOverride": {
                    "description": "The URL is used as 'verification_url' and 'verification_url_complete' values in a Device Authorization request.",
                    "type": "string"
                }
            }
        },
        "ResourceLink": {
            "description": "A reference to a resource.",
            "id": "ResourceLink",
            "properties": {
                "id": {
                    "description": "The ID of the resource.",
                    "type": "string"
                },
                "location": {
                    "description": "A read-only URL that references the resource. If the resource is not currently URL-accessible, this property will be null.",
                    "type": "string"
                }
            },
            "required": [
                "id"
            ]
        },
        "ValidationError": {
            "description": "A data input validation error.",
            "id": "ValidationError",
            "properties": {
                "developerMessage": {
                    "description": "Developer-oriented error message, if available.",
                    "type": "string"
                },
                "errorId": {
                    "description": "Error identifier.",
                    "type": "string"
                },
                "fieldPath": {
                    "description": "The path to the model field to which the error relates, if one exists.",
                    "type": "string"
                },
                "message": {
                    "description": "User-friendly error description.",
                    "type": "string"
                }
            }
        }
    },
    "produces": [
        "application/json"
    ],
    "resourcePath": "/oauth/clientSettings",
    "swaggerVersion": "1.2"
}