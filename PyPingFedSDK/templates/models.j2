class {{ class_name }}():
    """{{details.get('description', '').replace("\n","").strip()}}

    Attributes
    ----------
{% for property, prop_details in details.get('properties').items() %}
    {{ property }} {% if prop_details.get('type', '')%} : {{prop_details.get('type')}} {% endif %}
{% if prop_details.get('description', '')%}        {{prop_details.get('description', '').replace("\n","").strip()}}
{% endif %}
{% endfor %}

    """

    def __init__(self{% for property in details.get('required', {}) %}, {{ safe_variable(safe_name(property)) }}{% if json_type_convert(details['properties'][property].get('type', '')) != '' %}:{{ json_type_convert(details['properties'][property].get('type', '')) }}{% endif %}{% endfor %}{% for property, attributes in details.get('properties', {}).items() if property not in details.get('required', []) %}, {{ safe_variable(property) }}{% if json_type_convert(attributes.get('type', '')) != '' %}:{{ json_type_convert(attributes.get('type', '')) }}{% endif %}=None{% endfor %}) -> None:
{% for property in details.get('properties') %}
        self.{{ safe_variable(safe_name(property)) }} = {{ safe_variable(safe_name(property)) }}
{% endfor %}

    def _validate(self) -> bool:
        return any(x for x in [{% for property in details.get('required', []) %}"{{ safe_variable(property) }}"{% if not loop.last %}, {% endif %}{% endfor %}] if self.__dict__[x] is not None)

    def __repr__(self) -> str:
        return f"{self.__class__.__name__}({self.__dict__})"

    def __str__(self) -> str:
        return f"{self.__dict__}"

    def __eq__(self, other) -> bool:
        if isinstance(other, {{class_name}}):
            return self.__dict__ == other.__dict__
        return NotImplemented

    def __hash__(self) -> int:
        return hash(frozenset([{% for property in details.get('properties') %}self.{{ safe_variable(property) }}{% if not loop.last %}, {% endif %}{% endfor %}]))

    @classmethod
    def from_dict(cls, python_dict: dict):
        valid_data = {k: v for k, v in python_dict.items() if k in [{% for property in details.get('properties', {}) %}"{{ safe_variable(property) }}"{% if not loop.last %}, {% endif %}{% endfor %}]}

        return cls(**valid_data)

    def to_dict(self):
        return self.__dict__
