class {{ class_name }}():
    """ {{details.get('description', '')}}

    Attributes
    ----------
{% for property, prop_details in details.get('properties').items() %}
    {{property}} : {{prop_details.get('type', 'str')}}
        {{prop_details.get('description', '')}}
{% endfor %}

    """

    __slots__ = [{% for property in details.get('properties', {}) %}"{{property}}"{% if not loop.last %}, {% endif %}{% endfor %}]
    def __init__(self{% for property in details.get('required', {}) %}, {{property}}{% endfor %}{% for property in details.get('properties', []) if property not in details.get('required', []) %}, {{property}}=None{% endfor %}):
    {% for property in details.get('properties') %}
        self.{{ property }} = {{ property }}
    {% endfor %}

    def _validate(self):
        return any(x for x in {{ details.get('required', []) }} if __dict__[x] is not None)

    def __repr__(self):
        return f"{self.__class__.__name__}({self.__dict__})"

    def __str__(self):
        return f"{self.__dict__}"

    def __eq__(self, other):
        if isinstance(other, {{class_name}}):
            return self.__dict__ == other.__dict__
        return NotImplemented

    def __hash__(self):
        return hash(({% for property in details.get('properties') %}{{property}}{% if not loop.last %}, {% endif %}{% endfor %}))

    @classmethod
    def from_dict(cls, python_dict):
        valid_data = {k: v for k, v in python_dict.items() if k in __slots__}
        
        return cls(**valid_data)

